// <auto-generated/>
using Autodesk.DataManagement.Data.V1.Projects.Item.Versions.Item;
using Autodesk.DataManagement.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.DataManagement.Data.V1.Projects.Item.Versions {
    /// <summary>
    /// Builds and executes requests for operations under \data\v1\projects\{project_id}\versions
    /// </summary>
    public class VersionsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>Gets an item from the Autodesk.DataManagement.data.v1.projects.item.versions.item collection</summary>
        /// <param name="position">The unique identifier of a version.</param>
        /// <returns>A <see cref="WithVersion_ItemRequestBuilder"/></returns>
        public WithVersion_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("version_id", position);
                return new WithVersion_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="VersionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VersionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/data/v1/projects/{project_id}/versions{?copyFrom*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="VersionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VersionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/data/v1/projects/{project_id}/versions{?copyFrom*}", rawUrl)
        {
        }
        /// <summary>
        /// Creates new versions of a file (item), except for the first version of the item. To create the first version of the item, use POST items.Before creating each version you need to create a new storage location for the version, and upload the file to the storage object. For more details about the workflow, see the tutorial on uploading a file.This endpoint also copies versions of items to exisitng items in other folders. The endpoint creates a new version of the existing item in the target folder. You cannot copy versions of items across different projects and accounts.To copy versions of items to other folders and create a new item and a first version of the item in the target folder, use POST versions.This endpoint can also be used to delete files on BIM360 Document Management. For more information, please refer to the delete and restore a file turorial.Note that to access BIM 360 Docs files using the Data Management API you need to provision your app in the BIM 360 Account Administrator portal. For more details, see the Manage Access to Docs tutorial.New! Autodesk Construction Cloud platform (ACC). Note that this endpoint is compatible with ACC projects. For more information about the Autodesk Construction Cloud APIs, see the Autodesk Construction Cloud documentation.
        /// </summary>
        /// <returns>A <see cref="CreatedVersion"/></returns>
        /// <param name="body">Describe the version to be created.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="CreatedVersion400Error">When receiving a 400 status code</exception>
        /// <exception cref="CreatedVersion403Error">When receiving a 403 status code</exception>
        /// <exception cref="CreatedVersion404Error">When receiving a 404 status code</exception>
        /// <exception cref="CreatedVersion423Error">When receiving a 423 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<CreatedVersion?> PostAsync(CreateVersion body, Action<RequestConfiguration<VersionsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<CreatedVersion> PostAsync(CreateVersion body, Action<RequestConfiguration<VersionsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"400", CreatedVersion400Error.CreateFromDiscriminatorValue},
                {"403", CreatedVersion403Error.CreateFromDiscriminatorValue},
                {"404", CreatedVersion404Error.CreateFromDiscriminatorValue},
                {"423", CreatedVersion423Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<CreatedVersion>(requestInfo, CreatedVersion.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates new versions of a file (item), except for the first version of the item. To create the first version of the item, use POST items.Before creating each version you need to create a new storage location for the version, and upload the file to the storage object. For more details about the workflow, see the tutorial on uploading a file.This endpoint also copies versions of items to exisitng items in other folders. The endpoint creates a new version of the existing item in the target folder. You cannot copy versions of items across different projects and accounts.To copy versions of items to other folders and create a new item and a first version of the item in the target folder, use POST versions.This endpoint can also be used to delete files on BIM360 Document Management. For more information, please refer to the delete and restore a file turorial.Note that to access BIM 360 Docs files using the Data Management API you need to provision your app in the BIM 360 Account Administrator portal. For more details, see the Manage Access to Docs tutorial.New! Autodesk Construction Cloud platform (ACC). Note that this endpoint is compatible with ACC projects. For more information about the Autodesk Construction Cloud APIs, see the Autodesk Construction Cloud documentation.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Describe the version to be created.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(CreateVersion body, Action<RequestConfiguration<VersionsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(CreateVersion body, Action<RequestConfiguration<VersionsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/vnd.api+json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="VersionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public VersionsRequestBuilder WithUrl(string rawUrl)
        {
            return new VersionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Creates new versions of a file (item), except for the first version of the item. To create the first version of the item, use POST items.Before creating each version you need to create a new storage location for the version, and upload the file to the storage object. For more details about the workflow, see the tutorial on uploading a file.This endpoint also copies versions of items to exisitng items in other folders. The endpoint creates a new version of the existing item in the target folder. You cannot copy versions of items across different projects and accounts.To copy versions of items to other folders and create a new item and a first version of the item in the target folder, use POST versions.This endpoint can also be used to delete files on BIM360 Document Management. For more information, please refer to the delete and restore a file turorial.Note that to access BIM 360 Docs files using the Data Management API you need to provision your app in the BIM 360 Account Administrator portal. For more details, see the Manage Access to Docs tutorial.New! Autodesk Construction Cloud platform (ACC). Note that this endpoint is compatible with ACC projects. For more information about the Autodesk Construction Cloud APIs, see the Autodesk Construction Cloud documentation.
        /// </summary>
        public class VersionsRequestBuilderPostQueryParameters 
        {
            /// <summary>Only relevant for copying files to BIM 360 Docs - the version ID (URN) of the file to copy. For details about finding the URN, follow the initial steps in the Download a File tutorial.  You can only copy files to the Plans folder or to subfolders of the Plans folder with an item:autodesk.bim360:Document item extension type, and you can only copy files to the Project Files folder or to subfolders of the Project Files folder with an item:autodesk.bim360:File item extension type.  To verify an item’s extension type, use GET item, and check the attributes.extension.type attribute.  Note that if you copy a file to the Plans folder or to a subfolder of the Plans folder, the copied file inherits the permissions of the source file. For example, if the end user did not have permission to download files in the source folder, but does have permission to download files in the target folder, he/she will not be able to download the copied file.  Note that you cannot copy a file if it is in the middle of being uploaded, updated, or copied. To verify the current process state of a file, call GET item, and check the attributes.extension.data.processState attribute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("copyFrom")]
            public string? CopyFrom { get; set; }
#nullable restore
#else
            [QueryParameter("copyFrom")]
            public string CopyFrom { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class VersionsRequestBuilderPostRequestConfiguration : RequestConfiguration<VersionsRequestBuilderPostQueryParameters> 
        {
        }
    }
}

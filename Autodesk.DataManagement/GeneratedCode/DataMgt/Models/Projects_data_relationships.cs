// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.DataManagement.Models {
    public class Projects_data_relationships : IParsable 
    {
        /// <summary>The checklists property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_checklists? Checklists { get; set; }
#nullable restore
#else
        public Projects_data_relationships_checklists Checklists { get; set; }
#endif
        /// <summary>The cost property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_cost? Cost { get; set; }
#nullable restore
#else
        public Projects_data_relationships_cost Cost { get; set; }
#endif
        /// <summary>The hub property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_hub? Hub { get; set; }
#nullable restore
#else
        public Projects_data_relationships_hub Hub { get; set; }
#endif
        /// <summary>The issues property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_issues? Issues { get; set; }
#nullable restore
#else
        public Projects_data_relationships_issues Issues { get; set; }
#endif
        /// <summary>The locations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_locations? Locations { get; set; }
#nullable restore
#else
        public Projects_data_relationships_locations Locations { get; set; }
#endif
        /// <summary>The markups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_markups? Markups { get; set; }
#nullable restore
#else
        public Projects_data_relationships_markups Markups { get; set; }
#endif
        /// <summary>The rfis property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_rfis? Rfis { get; set; }
#nullable restore
#else
        public Projects_data_relationships_rfis Rfis { get; set; }
#endif
        /// <summary>The rootFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_rootFolder? RootFolder { get; set; }
#nullable restore
#else
        public Projects_data_relationships_rootFolder RootFolder { get; set; }
#endif
        /// <summary>The submittals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_submittals? Submittals { get; set; }
#nullable restore
#else
        public Projects_data_relationships_submittals Submittals { get; set; }
#endif
        /// <summary>The topFolders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Projects_data_relationships_topFolders? TopFolders { get; set; }
#nullable restore
#else
        public Projects_data_relationships_topFolders TopFolders { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Projects_data_relationships"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Projects_data_relationships CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Projects_data_relationships();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"checklists", n => { Checklists = n.GetObjectValue<Projects_data_relationships_checklists>(Projects_data_relationships_checklists.CreateFromDiscriminatorValue); } },
                {"cost", n => { Cost = n.GetObjectValue<Projects_data_relationships_cost>(Projects_data_relationships_cost.CreateFromDiscriminatorValue); } },
                {"hub", n => { Hub = n.GetObjectValue<Projects_data_relationships_hub>(Projects_data_relationships_hub.CreateFromDiscriminatorValue); } },
                {"issues", n => { Issues = n.GetObjectValue<Projects_data_relationships_issues>(Projects_data_relationships_issues.CreateFromDiscriminatorValue); } },
                {"locations", n => { Locations = n.GetObjectValue<Projects_data_relationships_locations>(Projects_data_relationships_locations.CreateFromDiscriminatorValue); } },
                {"markups", n => { Markups = n.GetObjectValue<Projects_data_relationships_markups>(Projects_data_relationships_markups.CreateFromDiscriminatorValue); } },
                {"rfis", n => { Rfis = n.GetObjectValue<Projects_data_relationships_rfis>(Projects_data_relationships_rfis.CreateFromDiscriminatorValue); } },
                {"rootFolder", n => { RootFolder = n.GetObjectValue<Projects_data_relationships_rootFolder>(Projects_data_relationships_rootFolder.CreateFromDiscriminatorValue); } },
                {"submittals", n => { Submittals = n.GetObjectValue<Projects_data_relationships_submittals>(Projects_data_relationships_submittals.CreateFromDiscriminatorValue); } },
                {"topFolders", n => { TopFolders = n.GetObjectValue<Projects_data_relationships_topFolders>(Projects_data_relationships_topFolders.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Projects_data_relationships_checklists>("checklists", Checklists);
            writer.WriteObjectValue<Projects_data_relationships_cost>("cost", Cost);
            writer.WriteObjectValue<Projects_data_relationships_hub>("hub", Hub);
            writer.WriteObjectValue<Projects_data_relationships_issues>("issues", Issues);
            writer.WriteObjectValue<Projects_data_relationships_locations>("locations", Locations);
            writer.WriteObjectValue<Projects_data_relationships_markups>("markups", Markups);
            writer.WriteObjectValue<Projects_data_relationships_rfis>("rfis", Rfis);
            writer.WriteObjectValue<Projects_data_relationships_rootFolder>("rootFolder", RootFolder);
            writer.WriteObjectValue<Projects_data_relationships_submittals>("submittals", Submittals);
            writer.WriteObjectValue<Projects_data_relationships_topFolders>("topFolders", TopFolders);
        }
    }
}

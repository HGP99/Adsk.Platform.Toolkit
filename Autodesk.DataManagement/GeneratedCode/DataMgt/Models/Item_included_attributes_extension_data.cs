// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.DataManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Item_included_attributes_extension_data : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The conformingStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConformingStatus { get; set; }
#nullable restore
#else
        public string ConformingStatus { get; set; }
#endif
        /// <summary>The extractionState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExtractionState { get; set; }
#nullable restore
#else
        public string ExtractionState { get; set; }
#endif
        /// <summary>The isCompositeDesign property</summary>
        public bool? IsCompositeDesign { get; set; }
        /// <summary>The mimeType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MimeType { get; set; }
#nullable restore
#else
        public string MimeType { get; set; }
#endif
        /// <summary>The modelGuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelGuid { get; set; }
#nullable restore
#else
        public string ModelGuid { get; set; }
#endif
        /// <summary>The modelType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelType { get; set; }
#nullable restore
#else
        public string ModelType { get; set; }
#endif
        /// <summary>The modelVersion property</summary>
        public double? ModelVersion { get; set; }
        /// <summary>The originalItemUrn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalItemUrn { get; set; }
#nullable restore
#else
        public string OriginalItemUrn { get; set; }
#endif
        /// <summary>The processState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessState { get; set; }
#nullable restore
#else
        public string ProcessState { get; set; }
#endif
        /// <summary>The projectGuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectGuid { get; set; }
#nullable restore
#else
        public string ProjectGuid { get; set; }
#endif
        /// <summary>The reviewState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReviewState { get; set; }
#nullable restore
#else
        public string ReviewState { get; set; }
#endif
        /// <summary>The revisionDisplayLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RevisionDisplayLabel { get; set; }
#nullable restore
#else
        public string RevisionDisplayLabel { get; set; }
#endif
        /// <summary>The sourceFileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceFileName { get; set; }
#nullable restore
#else
        public string SourceFileName { get; set; }
#endif
        /// <summary>The splittingState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SplittingState { get; set; }
#nullable restore
#else
        public string SplittingState { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.Models.Item_included_attributes_extension_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.DataManagement.Models.Item_included_attributes_extension_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.DataManagement.Models.Item_included_attributes_extension_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "conformingStatus", n => { ConformingStatus = n.GetStringValue(); } },
                { "extractionState", n => { ExtractionState = n.GetStringValue(); } },
                { "isCompositeDesign", n => { IsCompositeDesign = n.GetBoolValue(); } },
                { "mimeType", n => { MimeType = n.GetStringValue(); } },
                { "modelGuid", n => { ModelGuid = n.GetStringValue(); } },
                { "modelType", n => { ModelType = n.GetStringValue(); } },
                { "modelVersion", n => { ModelVersion = n.GetDoubleValue(); } },
                { "originalItemUrn", n => { OriginalItemUrn = n.GetStringValue(); } },
                { "processState", n => { ProcessState = n.GetStringValue(); } },
                { "projectGuid", n => { ProjectGuid = n.GetStringValue(); } },
                { "reviewState", n => { ReviewState = n.GetStringValue(); } },
                { "revisionDisplayLabel", n => { RevisionDisplayLabel = n.GetStringValue(); } },
                { "sourceFileName", n => { SourceFileName = n.GetStringValue(); } },
                { "splittingState", n => { SplittingState = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("conformingStatus", ConformingStatus);
            writer.WriteStringValue("extractionState", ExtractionState);
            writer.WriteBoolValue("isCompositeDesign", IsCompositeDesign);
            writer.WriteStringValue("mimeType", MimeType);
            writer.WriteStringValue("modelGuid", ModelGuid);
            writer.WriteStringValue("modelType", ModelType);
            writer.WriteDoubleValue("modelVersion", ModelVersion);
            writer.WriteStringValue("originalItemUrn", OriginalItemUrn);
            writer.WriteStringValue("processState", ProcessState);
            writer.WriteStringValue("projectGuid", ProjectGuid);
            writer.WriteStringValue("reviewState", ReviewState);
            writer.WriteStringValue("revisionDisplayLabel", RevisionDisplayLabel);
            writer.WriteStringValue("sourceFileName", SourceFileName);
            writer.WriteStringValue("splittingState", SplittingState);
        }
    }
}

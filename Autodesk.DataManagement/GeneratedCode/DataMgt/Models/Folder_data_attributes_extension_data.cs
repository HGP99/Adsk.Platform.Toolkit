// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.DataManagement.Models {
    public class Folder_data_attributes_extension_data : IParsable 
    {
        /// <summary>The allowedTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Folder_data_attributes_extension_data_allowedTypes>? AllowedTypes { get; set; }
#nullable restore
#else
        public List<Folder_data_attributes_extension_data_allowedTypes> AllowedTypes { get; set; }
#endif
        /// <summary>The namingStandardIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Folder_data_attributes_extension_data_namingStandardIds>? NamingStandardIds { get; set; }
#nullable restore
#else
        public List<Folder_data_attributes_extension_data_namingStandardIds> NamingStandardIds { get; set; }
#endif
        /// <summary>The visibleTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Folder_data_attributes_extension_data_visibleTypes>? VisibleTypes { get; set; }
#nullable restore
#else
        public List<Folder_data_attributes_extension_data_visibleTypes> VisibleTypes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Folder_data_attributes_extension_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Folder_data_attributes_extension_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Folder_data_attributes_extension_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"allowedTypes", n => { AllowedTypes = n.GetCollectionOfObjectValues<Folder_data_attributes_extension_data_allowedTypes>(Folder_data_attributes_extension_data_allowedTypes.CreateFromDiscriminatorValue)?.ToList(); } },
                {"namingStandardIds", n => { NamingStandardIds = n.GetCollectionOfObjectValues<Folder_data_attributes_extension_data_namingStandardIds>(Folder_data_attributes_extension_data_namingStandardIds.CreateFromDiscriminatorValue)?.ToList(); } },
                {"visibleTypes", n => { VisibleTypes = n.GetCollectionOfObjectValues<Folder_data_attributes_extension_data_visibleTypes>(Folder_data_attributes_extension_data_visibleTypes.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Folder_data_attributes_extension_data_allowedTypes>("allowedTypes", AllowedTypes);
            writer.WriteCollectionOfObjectValues<Folder_data_attributes_extension_data_namingStandardIds>("namingStandardIds", NamingStandardIds);
            writer.WriteCollectionOfObjectValues<Folder_data_attributes_extension_data_visibleTypes>("visibleTypes", VisibleTypes);
        }
    }
}

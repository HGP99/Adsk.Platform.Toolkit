// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.DataManagement.OSS.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Bucket : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The key of the Bucket</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BucketKey { get; set; }
#nullable restore
#else
        public string BucketKey { get; set; }
#endif
        /// <summary>The owner of the Bucket</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BucketOwner { get; set; }
#nullable restore
#else
        public string BucketOwner { get; set; }
#endif
        /// <summary>The epoch time at which the bucket was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedDate { get; set; }
#nullable restore
#else
        public string CreatedDate { get; set; }
#endif
        /// <summary>The permissions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.DataManagement.OSS.Models.Permission>? Permissions { get; set; }
#nullable restore
#else
        public List<global::Autodesk.DataManagement.OSS.Models.Permission> Permissions { get; set; }
#endif
        /// <summary>The policy key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PolicyKey { get; set; }
#nullable restore
#else
        public string PolicyKey { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Models.Bucket"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.DataManagement.OSS.Models.Bucket CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.DataManagement.OSS.Models.Bucket();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bucketKey", n => { BucketKey = n.GetStringValue(); } },
                { "bucketOwner", n => { BucketOwner = n.GetStringValue(); } },
                { "createdDate", n => { CreatedDate = n.GetStringValue(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfObjectValues<global::Autodesk.DataManagement.OSS.Models.Permission>(global::Autodesk.DataManagement.OSS.Models.Permission.CreateFromDiscriminatorValue)?.AsList(); } },
                { "policyKey", n => { PolicyKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bucketKey", BucketKey);
            writer.WriteStringValue("bucketOwner", BucketOwner);
            writer.WriteStringValue("createdDate", CreatedDate);
            writer.WriteCollectionOfObjectValues<global::Autodesk.DataManagement.OSS.Models.Permission>("permissions", Permissions);
            writer.WriteStringValue("policyKey", PolicyKey);
        }
    }
}

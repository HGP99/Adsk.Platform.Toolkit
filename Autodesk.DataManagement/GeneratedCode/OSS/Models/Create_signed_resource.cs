// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.DataManagement.OSS.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Create_signed_resource : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If set, the public URL will be restricted to the specified IP addresses. downloads and uploads will be allowed or blocked based on the list of the IP addresses in the X-Forwarded-For header received from Apigee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AllowedIpAddresses { get; set; }
#nullable restore
#else
        public string AllowedIpAddresses { get; set; }
#endif
        /// <summary>If set, the public URL will use that value as Content-Disposition when downloading</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentDisposition { get; set; }
#nullable restore
#else
        public string ContentDisposition { get; set; }
#endif
        /// <summary>If set, the public URL will use that value as Content-Type when downloading</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>Expiration time value. Default is 60 minutes.</summary>
        public int? MinutesExpiration { get; set; }
        /// <summary>If it is true, the public URL can only be used once and will expire immediately after use. When downloading an object, URL will expire once the download is complete.</summary>
        public bool? SingleUse { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Models.Create_signed_resource"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.DataManagement.OSS.Models.Create_signed_resource CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.DataManagement.OSS.Models.Create_signed_resource();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowedIpAddresses", n => { AllowedIpAddresses = n.GetStringValue(); } },
                { "contentDisposition", n => { ContentDisposition = n.GetStringValue(); } },
                { "contentType", n => { ContentType = n.GetStringValue(); } },
                { "minutesExpiration", n => { MinutesExpiration = n.GetIntValue(); } },
                { "singleUse", n => { SingleUse = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("allowedIpAddresses", AllowedIpAddresses);
            writer.WriteStringValue("contentDisposition", ContentDisposition);
            writer.WriteStringValue("contentType", ContentType);
            writer.WriteIntValue("minutesExpiration", MinutesExpiration);
            writer.WriteBoolValue("singleUse", SingleUse);
        }
    }
}
#pragma warning restore CS0618

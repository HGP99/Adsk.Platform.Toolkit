// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.DataManagement.OSS.Models {
    public class Batchsigneds3upload_object_requests : IParsable 
    {
        /// <summary>The index of an individual part for which to retrieve a chunk upload URL.</summary>
        public int? FirstPart { get; set; }
        /// <summary>The key/name of the object for which to create an S3 upload URL. If neither the &quot;part&quot; nor &quot;parts&quot; attribute is provided, OSS will return a single upload URL with which to upload the entire object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectKey { get; set; }
#nullable restore
#else
        public string ObjectKey { get; set; }
#endif
        /// <summary>For a multipart upload, the number of chunk URLs to return. If X is provided, the response will include chunk URLs from 1 to X. If none provided, the response will include only a single URL with which to upload an entire object.</summary>
        public int? Parts { get; set; }
        /// <summary>The identifier of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. This must match the uploadKey returned by a previous call to this endpoint where the client requested more than one part URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadKey { get; set; }
#nullable restore
#else
        public string UploadKey { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Batchsigneds3upload_object_requests"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Batchsigneds3upload_object_requests CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Batchsigneds3upload_object_requests();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"firstPart", n => { FirstPart = n.GetIntValue(); } },
                {"objectKey", n => { ObjectKey = n.GetStringValue(); } },
                {"parts", n => { Parts = n.GetIntValue(); } },
                {"uploadKey", n => { UploadKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("firstPart", FirstPart);
            writer.WriteStringValue("objectKey", ObjectKey);
            writer.WriteIntValue("parts", Parts);
            writer.WriteStringValue("uploadKey", UploadKey);
        }
    }
}

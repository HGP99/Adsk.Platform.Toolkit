// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.DataManagement.OSS.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Signeds3download_response : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The values for the updatable params that were used in the creation of the returned S3 signed URL -- `Content-Type`, `Content-Disposition`, and `Cache-Control`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_params? Params { get; set; }
#nullable restore
#else
        public global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_params Params { get; set; }
#endif
        /// <summary>The calculated sha1 of the object, if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sha1 { get; set; }
#nullable restore
#else
        public string Sha1 { get; set; }
#endif
        /// <summary>The object size in bytes.</summary>
        public long? Size { get; set; }
        /// <summary>Indicates the status of the object. `complete` indicates a raw upload or merged resumable upload; `chunked` indicates an unmerged resumable upload where the user  provide `public-resource-fallback`=`false`; `fallback` indicates an unmerged resumable  upload where the user provides `public-resource-fallback`=`true`.</summary>
        public global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_status? Status { get; set; }
        /// <summary>The S3 signed URL with which to download the object. This attribute is returned when `status` is `complete` or `fallback`; in the latter case, this will return an OSS Signed Resource, not an S3 signed URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>A map of S3 signed URLs, one for each chunk of an unmerged resumable upload. This attribute is returned when `status` is `chunked`. The key of each entry is the byte range of the total file which the chunk comprises.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_urls? Urls { get; set; }
#nullable restore
#else
        public global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_urls Urls { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Models.Signeds3download_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.DataManagement.OSS.Models.Signeds3download_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.DataManagement.OSS.Models.Signeds3download_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "params", n => { Params = n.GetObjectValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_params>(global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_params.CreateFromDiscriminatorValue); } },
                { "sha1", n => { Sha1 = n.GetStringValue(); } },
                { "size", n => { Size = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_status>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "urls", n => { Urls = n.GetObjectValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_urls>(global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_urls.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_params>("params", Params);
            writer.WriteStringValue("sha1", Sha1);
            writer.WriteLongValue("size", Size);
            writer.WriteEnumValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_status>("status", Status);
            writer.WriteStringValue("url", Url);
            writer.WriteObjectValue<global::Autodesk.DataManagement.OSS.Models.Signeds3download_response_urls>("urls", Urls);
        }
    }
}
#pragma warning restore CS0618

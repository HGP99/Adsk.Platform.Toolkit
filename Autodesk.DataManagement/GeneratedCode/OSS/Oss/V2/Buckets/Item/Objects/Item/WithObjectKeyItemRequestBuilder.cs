// <auto-generated/>
using Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Copyto;
using Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Details;
using Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signed;
using Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3download;
using Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item {
    /// <summary>
    /// Builds and executes requests for operations under \oss\v2\buckets\{bucketKey}\objects\{objectKey}
    /// </summary>
    public class WithObjectKeyItemRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The copyto property</summary>
        public CopytoRequestBuilder Copyto
        {
            get => new CopytoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The details property</summary>
        public DetailsRequestBuilder Details
        {
            get => new DetailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signed property</summary>
        public SignedRequestBuilder Signed
        {
            get => new SignedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signeds3download property</summary>
        public Signeds3downloadRequestBuilder Signeds3download
        {
            get => new Signeds3downloadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signeds3upload property</summary>
        public Signeds3uploadRequestBuilder Signeds3upload
        {
            get => new Signeds3uploadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="WithObjectKeyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithObjectKeyItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oss/v2/buckets/{bucketKey}/objects/{objectKey}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithObjectKeyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithObjectKeyItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oss/v2/buckets/{bucketKey}/objects/{objectKey}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an object from the bucket.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an object from the bucket.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithObjectKeyItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithObjectKeyItemRequestBuilder WithUrl(string rawUrl)
        {
            return new WithObjectKeyItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithObjectKeyItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}

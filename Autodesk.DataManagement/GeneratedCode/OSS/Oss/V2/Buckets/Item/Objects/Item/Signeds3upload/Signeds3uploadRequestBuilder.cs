// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.DataManagement.OSS.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload
{
    /// <summary>
    /// Builds and executes requests for operations under \oss\v2\buckets\{bucketKey}\objects\{objectKey}\signeds3upload
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Signeds3uploadRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Signeds3uploadRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signeds3upload{?firstPart*,minutesExpiration*,parts*,uploadKey*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Signeds3uploadRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signeds3upload{?firstPart*,minutesExpiration*,parts*,uploadKey*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets a signed URL to upload an object in a single request, or an array of signed URLs with which to upload an object in multiple parts.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Models.Signeds3upload_response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.DataManagement.OSS.Models.Signeds3upload_response?> GetAsync(Action<RequestConfiguration<global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder.Signeds3uploadRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.DataManagement.OSS.Models.Signeds3upload_response> GetAsync(Action<RequestConfiguration<global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder.Signeds3uploadRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.DataManagement.OSS.Models.Signeds3upload_response>(requestInfo, global::Autodesk.DataManagement.OSS.Models.Signeds3upload_response.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Instructs OSS to complete the object creation process after the bytes have been uploaded directly to S3.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Models.Completes3upload_response_200"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.DataManagement.OSS.Models.Completes3upload_response_200?> PostAsync(global::Autodesk.DataManagement.OSS.Models.Completes3upload_body body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.DataManagement.OSS.Models.Completes3upload_response_200> PostAsync(global::Autodesk.DataManagement.OSS.Models.Completes3upload_body body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.DataManagement.OSS.Models.Completes3upload_response_200>(requestInfo, global::Autodesk.DataManagement.OSS.Models.Completes3upload_response_200.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets a signed URL to upload an object in a single request, or an array of signed URLs with which to upload an object in multiple parts.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder.Signeds3uploadRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder.Signeds3uploadRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Instructs OSS to complete the object creation process after the bytes have been uploaded directly to S3.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.DataManagement.OSS.Models.Completes3upload_body body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.DataManagement.OSS.Models.Completes3upload_body body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets a signed URL to upload an object in a single request, or an array of signed URLs with which to upload an object in multiple parts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Signeds3uploadRequestBuilderGetQueryParameters 
        {
            /// <summary>Index of first part in the parts collection.</summary>
            [QueryParameter("firstPart")]
            public int? FirstPart { get; set; }
            /// <summary>The custom expiration time within the 1 to 60 minutes range, if not specified, default is 2 minutes.</summary>
            [QueryParameter("minutesExpiration")]
            public int? MinutesExpiration { get; set; }
            /// <summary>For a multipart upload, the number of chunk upload URLs to return. If X is provided, the response will include chunk URLs from 1 to X. If none provided, the response will include only a single URL with which to upload an entire object.</summary>
            [QueryParameter("parts")]
            public int? Parts { get; set; }
            /// <summary>The identifier of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. This must match the `uploadKey` returned by a previous call to this endpoint where the client requested more than one part URL. If none provided, OSS will initiate a new upload entirely.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("uploadKey")]
            public string? UploadKey { get; set; }
#nullable restore
#else
            [QueryParameter("uploadKey")]
            public string UploadKey { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Signeds3uploadRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.DataManagement.OSS.Oss.V2.Buckets.Item.Objects.Item.Signeds3upload.Signeds3uploadRequestBuilder.Signeds3uploadRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Signeds3uploadRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

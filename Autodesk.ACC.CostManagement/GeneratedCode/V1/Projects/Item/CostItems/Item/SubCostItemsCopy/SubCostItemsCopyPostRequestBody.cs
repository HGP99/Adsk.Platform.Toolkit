// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.Item.SubCostItemsCopy {
    public class SubCostItemsCopyPostRequestBody : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The from property</summary>
        public SubCostItemsCopyPostRequestBody_from? From { get; set; }
        /// <summary>The source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SubCostItemsCopyPostRequestBody_source? Source { get; set; }
#nullable restore
#else
        public SubCostItemsCopyPostRequestBody_source Source { get; set; }
#endif
        /// <summary>The target property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SubCostItemsCopyPostRequestBody_target? Target { get; set; }
#nullable restore
#else
        public SubCostItemsCopyPostRequestBody_target Target { get; set; }
#endif
        /// <summary>The to property</summary>
        public SubCostItemsCopyPostRequestBody_to? To { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="SubCostItemsCopyPostRequestBody"/> and sets the default values.
        /// </summary>
        public SubCostItemsCopyPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SubCostItemsCopyPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SubCostItemsCopyPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SubCostItemsCopyPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"from", n => { From = n.GetEnumValue<SubCostItemsCopyPostRequestBody_from>(); } },
                {"source", n => { Source = n.GetObjectValue<SubCostItemsCopyPostRequestBody_source>(SubCostItemsCopyPostRequestBody_source.CreateFromDiscriminatorValue); } },
                {"target", n => { Target = n.GetObjectValue<SubCostItemsCopyPostRequestBody_target>(SubCostItemsCopyPostRequestBody_target.CreateFromDiscriminatorValue); } },
                {"to", n => { To = n.GetEnumValue<SubCostItemsCopyPostRequestBody_to>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<SubCostItemsCopyPostRequestBody_from>("from", From);
            writer.WriteObjectValue<SubCostItemsCopyPostRequestBody_source>("source", Source);
            writer.WriteObjectValue<SubCostItemsCopyPostRequestBody_target>("target", Target);
            writer.WriteEnumValue<SubCostItemsCopyPostRequestBody_to>("to", To);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

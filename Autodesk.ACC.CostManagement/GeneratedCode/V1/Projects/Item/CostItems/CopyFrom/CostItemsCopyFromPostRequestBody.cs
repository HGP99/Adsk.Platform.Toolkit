// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.CopyFrom {
    public class CostItemsCopyFromPostRequestBody : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The from property</summary>
        public CostItemsCopyFromPostRequestBody_from? From { get; set; }
        /// <summary>A list of cost items.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Ids { get; set; }
#nullable restore
#else
        public List<Guid?> Ids { get; set; }
#endif
        /// <summary>The to property</summary>
        public CostItemsCopyFromPostRequestBody_to? To { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="CostItemsCopyFromPostRequestBody"/> and sets the default values.
        /// </summary>
        public CostItemsCopyFromPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CostItemsCopyFromPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CostItemsCopyFromPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CostItemsCopyFromPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"from", n => { From = n.GetEnumValue<CostItemsCopyFromPostRequestBody_from>(); } },
                {"ids", n => { Ids = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"to", n => { To = n.GetEnumValue<CostItemsCopyFromPostRequestBody_to>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<CostItemsCopyFromPostRequestBody_from>("from", From);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("ids", Ids);
            writer.WriteEnumValue<CostItemsCopyFromPostRequestBody_to>("to", To);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
using Autodesk.ACC.CostManagement.Models;
using Autodesk.ACC.CostManagement.V1.Projects.Item.AccountCompanies;
using Autodesk.ACC.CostManagement.V1.Projects.Item.AccountUsers;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Activities;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ActualCosts;
using Autodesk.ACC.CostManagement.V1.Projects.Item.AttachmentFolders;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Attachments.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Attachments;
using Autodesk.ACC.CostManagement.V1.Projects.Item.BillingPeriods;
using Autodesk.ACC.CostManagement.V1.Projects.Item.BillingPeriodsBatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.BudgetTransfers.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.BudgetTransfers;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Budgets.BatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Budgets.Import;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Budgets.Search;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Budgets.Sync;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Budgets;
using Autodesk.ACC.CostManagement.V1.Projects.Item.BudgetsContracts.Link;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CalendarConfigurations;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CalendarItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.Attach;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.BatchPricing;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.BatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.ClearMarkup;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.Detach;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders.IgnoreMarkup;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrders;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ChangeOrdersGenerate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Comments;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CommentsBatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CompanyFolders;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComplianceDefinitions.Reorder;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComplianceDefinitions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComplianceRequirements.AddContent;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComplianceRequirements.RemoveContent;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComplianceRequirements;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ComponentTemplates;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts.CreateFromCostItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts.Import;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts.Search;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts.Sync;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Contracts;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.Attach;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.CopyFrom;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems.Detach;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CostItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.CustomColumns;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DefaultValues;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DistributionColumns;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DistributionItems.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DistributionItems.BatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DistributionItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Distributions.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Distributions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DocumentPackages.Merge;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DocumentPackages.Recent;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DocumentPackages;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DocumentTemplates.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.DocumentTemplates;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Documents;
using Autodesk.ACC.CostManagement.V1.Projects.Item.EmailNotifications;
using Autodesk.ACC.CostManagement.V1.Projects.Item.EmailNotificationsBatchSend;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExchangeRates;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Expenses;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExpensesBatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExpensesBatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Exports;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExternalRelationships.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExternalRelationships.Search;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExternalRelationships.Update;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ExternalRelationships;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Filters;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ForecastAdjustments;
using Autodesk.ACC.CostManagement.V1.Projects.Item.MainContracts.Import;
using Autodesk.ACC.CostManagement.V1.Projects.Item.MainContracts;
using Autodesk.ACC.CostManagement.V1.Projects.Item.MarkupFormulas;
using Autodesk.ACC.CostManagement.V1.Projects.Item.MarkupFormulasApply;
using Autodesk.ACC.CostManagement.V1.Projects.Item.MarkupFormulasReapply;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Markups;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Metadata;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Milestones.BatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Milestones.BatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Milestones;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Options;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Overbilling;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PaymentItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PaymentReferences;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Payments;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PaymentsBatchCreate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PaymentsBatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PerformanceTrackingItemInstances;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PerformanceTrackingItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Permissions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ProjectBaseValue;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Properties;
using Autodesk.ACC.CostManagement.V1.Projects.Item.PropertyValuesBatchUpdate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Purge;
using Autodesk.ACC.CostManagement.V1.Projects.Item.RelationshipsAuthorize;
using Autodesk.ACC.CostManagement.V1.Projects.Item.SavedViews;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ScheduleOfValues.Import;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ScheduleOfValues.Search;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ScheduleOfValues.Sync;
using Autodesk.ACC.CostManagement.V1.Projects.Item.ScheduleOfValues;
using Autodesk.ACC.CostManagement.V1.Projects.Item.SegmentValues;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Segments;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Settings;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Signnow;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Status;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Statuses;
using Autodesk.ACC.CostManagement.V1.Projects.Item.TaxFormulas;
using Autodesk.ACC.CostManagement.V1.Projects.Item.TaxItems.Activate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.TaxItems.Deactivate;
using Autodesk.ACC.CostManagement.V1.Projects.Item.TaxItems;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Taxes;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Templates;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Terminologies;
using Autodesk.ACC.CostManagement.V1.Projects.Item.TimeSheets;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Units;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WebhookAuthorize;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WorkflowApprovals;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WorkflowConditions.Reorder;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WorkflowConditions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WorkflowDecisions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.WorkflowDefinitions;
using Autodesk.ACC.CostManagement.V1.Projects.Item.Workflows;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.CostManagement.V1.Projects.Item {
    /// <summary>
    /// Builds and executes requests for operations under \v1\projects\{projectId}
    /// </summary>
    public class WithProjectItemRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The accountCompanies property</summary>
        public AccountCompaniesRequestBuilder AccountCompanies
        {
            get => new AccountCompaniesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The accountUsers property</summary>
        public AccountUsersRequestBuilder AccountUsers
        {
            get => new AccountUsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The activities property</summary>
        public ActivitiesRequestBuilder Activities
        {
            get => new ActivitiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The actualCosts property</summary>
        public ActualCostsRequestBuilder ActualCosts
        {
            get => new ActualCostsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The attachmentFolders property</summary>
        public AttachmentFoldersRequestBuilder AttachmentFolders
        {
            get => new AttachmentFoldersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The attachments property</summary>
        public AttachmentsRequestBuilder Attachments
        {
            get => new AttachmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The attachmentsBatchCreate property</summary>
        public AttachmentsBatchCreateRequestBuilder AttachmentsBatchCreate
        {
            get => new AttachmentsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The billingPeriods property</summary>
        public BillingPeriodsRequestBuilder BillingPeriods
        {
            get => new BillingPeriodsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The billingPeriodsBatchUpdate property</summary>
        public BillingPeriodsBatchUpdateRequestBuilder BillingPeriodsBatchUpdate
        {
            get => new BillingPeriodsBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgets property</summary>
        public BudgetsRequestBuilder Budgets
        {
            get => new BudgetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetsBatchUpdate property</summary>
        public BudgetsBatchUpdateRequestBuilder BudgetsBatchUpdate
        {
            get => new BudgetsBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetsContractsLink property</summary>
        public BudgetsContractsLinkRequestBuilder BudgetsContractsLink
        {
            get => new BudgetsContractsLinkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetsImport property</summary>
        public BudgetsImportRequestBuilder BudgetsImport
        {
            get => new BudgetsImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetsSearch property</summary>
        public BudgetsSearchRequestBuilder BudgetsSearch
        {
            get => new BudgetsSearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetsSync property</summary>
        public BudgetsSyncRequestBuilder BudgetsSync
        {
            get => new BudgetsSyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetTransfers property</summary>
        public BudgetTransfersRequestBuilder BudgetTransfers
        {
            get => new BudgetTransfersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The budgetTransfersBatchCreate property</summary>
        public BudgetTransfersBatchCreateRequestBuilder BudgetTransfersBatchCreate
        {
            get => new BudgetTransfersBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The calendarConfigurations property</summary>
        public CalendarConfigurationsRequestBuilder CalendarConfigurations
        {
            get => new CalendarConfigurationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The calendarItems property</summary>
        public CalendarItemsRequestBuilder CalendarItems
        {
            get => new CalendarItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrders property</summary>
        public ChangeOrdersRequestBuilder ChangeOrders
        {
            get => new ChangeOrdersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersAttach property</summary>
        public ChangeOrdersAttachRequestBuilder ChangeOrdersAttach
        {
            get => new ChangeOrdersAttachRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersBatchPricing property</summary>
        public ChangeOrdersBatchPricingRequestBuilder ChangeOrdersBatchPricing
        {
            get => new ChangeOrdersBatchPricingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersBatchUpdate property</summary>
        public ChangeOrdersBatchUpdateRequestBuilder ChangeOrdersBatchUpdate
        {
            get => new ChangeOrdersBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersClearMarkup property</summary>
        public ChangeOrdersClearMarkupRequestBuilder ChangeOrdersClearMarkup
        {
            get => new ChangeOrdersClearMarkupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersDetach property</summary>
        public ChangeOrdersDetachRequestBuilder ChangeOrdersDetach
        {
            get => new ChangeOrdersDetachRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersGenerate property</summary>
        public ChangeOrdersGenerateRequestBuilder ChangeOrdersGenerate
        {
            get => new ChangeOrdersGenerateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changeOrdersIgnoreMarkup property</summary>
        public ChangeOrdersIgnoreMarkupRequestBuilder ChangeOrdersIgnoreMarkup
        {
            get => new ChangeOrdersIgnoreMarkupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The comments property</summary>
        public CommentsRequestBuilder Comments
        {
            get => new CommentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The commentsBatchCreate property</summary>
        public CommentsBatchCreateRequestBuilder CommentsBatchCreate
        {
            get => new CommentsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The companyFolders property</summary>
        public CompanyFoldersRequestBuilder CompanyFolders
        {
            get => new CompanyFoldersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The complianceDefinitions property</summary>
        public ComplianceDefinitionsRequestBuilder ComplianceDefinitions
        {
            get => new ComplianceDefinitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The complianceDefinitionsReorder property</summary>
        public ComplianceDefinitionsReorderRequestBuilder ComplianceDefinitionsReorder
        {
            get => new ComplianceDefinitionsReorderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The complianceRequirements property</summary>
        public ComplianceRequirementsRequestBuilder ComplianceRequirements
        {
            get => new ComplianceRequirementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The complianceRequirementsAddContent property</summary>
        public ComplianceRequirementsAddContentRequestBuilder ComplianceRequirementsAddContent
        {
            get => new ComplianceRequirementsAddContentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The complianceRequirementsRemoveContent property</summary>
        public ComplianceRequirementsRemoveContentRequestBuilder ComplianceRequirementsRemoveContent
        {
            get => new ComplianceRequirementsRemoveContentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The componentTemplates property</summary>
        public ComponentTemplatesRequestBuilder ComponentTemplates
        {
            get => new ComponentTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contracts property</summary>
        public ContractsRequestBuilder Contracts
        {
            get => new ContractsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contractsBatchCreate property</summary>
        public ContractsBatchCreateRequestBuilder ContractsBatchCreate
        {
            get => new ContractsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contractsCreateFromCostItems property</summary>
        public ContractsCreateFromCostItemsRequestBuilder ContractsCreateFromCostItems
        {
            get => new ContractsCreateFromCostItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contractsImport property</summary>
        public ContractsImportRequestBuilder ContractsImport
        {
            get => new ContractsImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contractsSearch property</summary>
        public ContractsSearchRequestBuilder ContractsSearch
        {
            get => new ContractsSearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contractsSync property</summary>
        public ContractsSyncRequestBuilder ContractsSync
        {
            get => new ContractsSyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The costItems property</summary>
        public CostItemsRequestBuilder CostItems
        {
            get => new CostItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The costItemsAttach property</summary>
        public CostItemsAttachRequestBuilder CostItemsAttach
        {
            get => new CostItemsAttachRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The costItemsBatchCreate property</summary>
        public CostItemsBatchCreateRequestBuilder CostItemsBatchCreate
        {
            get => new CostItemsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The costItemsCopyFrom property</summary>
        public CostItemsCopyFromRequestBuilder CostItemsCopyFrom
        {
            get => new CostItemsCopyFromRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The costItemsDetach property</summary>
        public CostItemsDetachRequestBuilder CostItemsDetach
        {
            get => new CostItemsDetachRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customColumns property</summary>
        public CustomColumnsRequestBuilder CustomColumns
        {
            get => new CustomColumnsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The defaultValues property</summary>
        public DefaultValuesRequestBuilder DefaultValues
        {
            get => new DefaultValuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributionColumns property</summary>
        public DistributionColumnsRequestBuilder DistributionColumns
        {
            get => new DistributionColumnsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributionItems property</summary>
        public DistributionItemsRequestBuilder DistributionItems
        {
            get => new DistributionItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributionItemsBatchCreate property</summary>
        public DistributionItemsBatchCreateRequestBuilder DistributionItemsBatchCreate
        {
            get => new DistributionItemsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributionItemsBatchUpdate property</summary>
        public DistributionItemsBatchUpdateRequestBuilder DistributionItemsBatchUpdate
        {
            get => new DistributionItemsBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributions property</summary>
        public DistributionsRequestBuilder Distributions
        {
            get => new DistributionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The distributionsBatchCreate property</summary>
        public DistributionsBatchCreateRequestBuilder DistributionsBatchCreate
        {
            get => new DistributionsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documentPackages property</summary>
        public DocumentPackagesRequestBuilder DocumentPackages
        {
            get => new DocumentPackagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documentPackagesMerge property</summary>
        public DocumentPackagesMergeRequestBuilder DocumentPackagesMerge
        {
            get => new DocumentPackagesMergeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documentPackagesRecent property</summary>
        public DocumentPackagesRecentRequestBuilder DocumentPackagesRecent
        {
            get => new DocumentPackagesRecentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documents property</summary>
        public DocumentsRequestBuilder Documents
        {
            get => new DocumentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documentTemplates property</summary>
        public DocumentTemplatesRequestBuilder DocumentTemplates
        {
            get => new DocumentTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The documentTemplatesBatchCreate property</summary>
        public DocumentTemplatesBatchCreateRequestBuilder DocumentTemplatesBatchCreate
        {
            get => new DocumentTemplatesBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emailNotifications property</summary>
        public EmailNotificationsRequestBuilder EmailNotifications
        {
            get => new EmailNotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emailNotificationsBatchSend property</summary>
        public EmailNotificationsBatchSendRequestBuilder EmailNotificationsBatchSend
        {
            get => new EmailNotificationsBatchSendRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The exchangeRates property</summary>
        public ExchangeRatesRequestBuilder ExchangeRates
        {
            get => new ExchangeRatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expenses property</summary>
        public ExpensesRequestBuilder Expenses
        {
            get => new ExpensesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expensesBatchCreate property</summary>
        public ExpensesBatchCreateRequestBuilder ExpensesBatchCreate
        {
            get => new ExpensesBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expensesBatchUpdate property</summary>
        public ExpensesBatchUpdateRequestBuilder ExpensesBatchUpdate
        {
            get => new ExpensesBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The exports property</summary>
        public ExportsRequestBuilder Exports
        {
            get => new ExportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The externalRelationships property</summary>
        public ExternalRelationshipsRequestBuilder ExternalRelationships
        {
            get => new ExternalRelationshipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The externalRelationshipsBatchCreate property</summary>
        public ExternalRelationshipsBatchCreateRequestBuilder ExternalRelationshipsBatchCreate
        {
            get => new ExternalRelationshipsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The externalRelationshipsSearch property</summary>
        public ExternalRelationshipsSearchRequestBuilder ExternalRelationshipsSearch
        {
            get => new ExternalRelationshipsSearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The externalRelationshipsUpdate property</summary>
        public ExternalRelationshipsUpdateRequestBuilder ExternalRelationshipsUpdate
        {
            get => new ExternalRelationshipsUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filters property</summary>
        public FiltersRequestBuilder Filters
        {
            get => new FiltersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The forecastAdjustments property</summary>
        public ForecastAdjustmentsRequestBuilder ForecastAdjustments
        {
            get => new ForecastAdjustmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mainContracts property</summary>
        public MainContractsRequestBuilder MainContracts
        {
            get => new MainContractsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mainContractsImport property</summary>
        public MainContractsImportRequestBuilder MainContractsImport
        {
            get => new MainContractsImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markupFormulas property</summary>
        public MarkupFormulasRequestBuilder MarkupFormulas
        {
            get => new MarkupFormulasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markupFormulasApply property</summary>
        public MarkupFormulasApplyRequestBuilder MarkupFormulasApply
        {
            get => new MarkupFormulasApplyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markupFormulasReapply property</summary>
        public MarkupFormulasReapplyRequestBuilder MarkupFormulasReapply
        {
            get => new MarkupFormulasReapplyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markups property</summary>
        public MarkupsRequestBuilder Markups
        {
            get => new MarkupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The metadata property</summary>
        public MetadataRequestBuilder Metadata
        {
            get => new MetadataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The milestones property</summary>
        public MilestonesRequestBuilder Milestones
        {
            get => new MilestonesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The milestonesBatchCreate property</summary>
        public MilestonesBatchCreateRequestBuilder MilestonesBatchCreate
        {
            get => new MilestonesBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The milestonesBatchUpdate property</summary>
        public MilestonesBatchUpdateRequestBuilder MilestonesBatchUpdate
        {
            get => new MilestonesBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The optionsPath property</summary>
        public OptionsRequestBuilder OptionsPath
        {
            get => new OptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The overbilling property</summary>
        public OverbillingRequestBuilder Overbilling
        {
            get => new OverbillingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The paymentItems property</summary>
        public PaymentItemsRequestBuilder PaymentItems
        {
            get => new PaymentItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The paymentReferences property</summary>
        public PaymentReferencesRequestBuilder PaymentReferences
        {
            get => new PaymentReferencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The payments property</summary>
        public PaymentsRequestBuilder Payments
        {
            get => new PaymentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The paymentsBatchCreate property</summary>
        public PaymentsBatchCreateRequestBuilder PaymentsBatchCreate
        {
            get => new PaymentsBatchCreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The paymentsBatchUpdate property</summary>
        public PaymentsBatchUpdateRequestBuilder PaymentsBatchUpdate
        {
            get => new PaymentsBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The performanceTrackingItemInstances property</summary>
        public PerformanceTrackingItemInstancesRequestBuilder PerformanceTrackingItemInstances
        {
            get => new PerformanceTrackingItemInstancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The performanceTrackingItems property</summary>
        public PerformanceTrackingItemsRequestBuilder PerformanceTrackingItems
        {
            get => new PerformanceTrackingItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The permissions property</summary>
        public PermissionsRequestBuilder Permissions
        {
            get => new PermissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projectBaseValue property</summary>
        public ProjectBaseValueRequestBuilder ProjectBaseValue
        {
            get => new ProjectBaseValueRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The properties property</summary>
        public PropertiesRequestBuilder Properties
        {
            get => new PropertiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The propertyValuesBatchUpdate property</summary>
        public PropertyValuesBatchUpdateRequestBuilder PropertyValuesBatchUpdate
        {
            get => new PropertyValuesBatchUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purge property</summary>
        public PurgeRequestBuilder Purge
        {
            get => new PurgeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The relationshipsAuthorize property</summary>
        public RelationshipsAuthorizeRequestBuilder RelationshipsAuthorize
        {
            get => new RelationshipsAuthorizeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The savedViews property</summary>
        public SavedViewsRequestBuilder SavedViews
        {
            get => new SavedViewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scheduleOfValues property</summary>
        public ScheduleOfValuesRequestBuilder ScheduleOfValues
        {
            get => new ScheduleOfValuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scheduleOfValuesImport property</summary>
        public ScheduleOfValuesImportRequestBuilder ScheduleOfValuesImport
        {
            get => new ScheduleOfValuesImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scheduleOfValuesSearch property</summary>
        public ScheduleOfValuesSearchRequestBuilder ScheduleOfValuesSearch
        {
            get => new ScheduleOfValuesSearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scheduleOfValuesSync property</summary>
        public ScheduleOfValuesSyncRequestBuilder ScheduleOfValuesSync
        {
            get => new ScheduleOfValuesSyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The segments property</summary>
        public SegmentsRequestBuilder Segments
        {
            get => new SegmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The segmentValues property</summary>
        public SegmentValuesRequestBuilder SegmentValues
        {
            get => new SegmentValuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public SettingsRequestBuilder Settings
        {
            get => new SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signnow property</summary>
        public SignnowRequestBuilder Signnow
        {
            get => new SignnowRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public StatusRequestBuilder Status
        {
            get => new StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statuses property</summary>
        public StatusesRequestBuilder Statuses
        {
            get => new StatusesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxes property</summary>
        public TaxesRequestBuilder Taxes
        {
            get => new TaxesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxFormulas property</summary>
        public TaxFormulasRequestBuilder TaxFormulas
        {
            get => new TaxFormulasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxItems property</summary>
        public TaxItemsRequestBuilder TaxItems
        {
            get => new TaxItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxItemsActivate property</summary>
        public TaxItemsActivateRequestBuilder TaxItemsActivate
        {
            get => new TaxItemsActivateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxItemsDeactivate property</summary>
        public TaxItemsDeactivateRequestBuilder TaxItemsDeactivate
        {
            get => new TaxItemsDeactivateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public TemplatesRequestBuilder Templates
        {
            get => new TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The terminologies property</summary>
        public TerminologiesRequestBuilder Terminologies
        {
            get => new TerminologiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timeSheets property</summary>
        public TimeSheetsRequestBuilder TimeSheets
        {
            get => new TimeSheetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The units property</summary>
        public UnitsRequestBuilder Units
        {
            get => new UnitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhookAuthorize property</summary>
        public WebhookAuthorizeRequestBuilder WebhookAuthorize
        {
            get => new WebhookAuthorizeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowApprovals property</summary>
        public WorkflowApprovalsRequestBuilder WorkflowApprovals
        {
            get => new WorkflowApprovalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowConditions property</summary>
        public WorkflowConditionsRequestBuilder WorkflowConditions
        {
            get => new WorkflowConditionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowConditionsReorder property</summary>
        public WorkflowConditionsReorderRequestBuilder WorkflowConditionsReorder
        {
            get => new WorkflowConditionsReorderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowDecisions property</summary>
        public WorkflowDecisionsRequestBuilder WorkflowDecisions
        {
            get => new WorkflowDecisionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflowDefinitions property</summary>
        public WorkflowDefinitionsRequestBuilder WorkflowDefinitions
        {
            get => new WorkflowDefinitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflows property</summary>
        public WorkflowsRequestBuilder Workflows
        {
            get => new WorkflowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="WithProjectItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithProjectItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/projects/{projectId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithProjectItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithProjectItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/projects/{projectId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes a container. Internal only.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="DefinedError">When receiving a 400 status code</exception>
        /// <exception cref="Error">When receiving a 401 status code</exception>
        /// <exception cref="Error">When receiving a 403 status code</exception>
        /// <exception cref="Error">When receiving a 404 status code</exception>
        /// <exception cref="Error">When receiving a 500 status code</exception>
        /// <exception cref="Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"400", DefinedError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the container&apos;s status
        /// </summary>
        /// <returns>A <see cref="Container"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="DefinedError">When receiving a 400 status code</exception>
        /// <exception cref="Error">When receiving a 401 status code</exception>
        /// <exception cref="Error">When receiving a 403 status code</exception>
        /// <exception cref="Error">When receiving a 404 status code</exception>
        /// <exception cref="Error">When receiving a 500 status code</exception>
        /// <exception cref="Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Container?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Container> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"400", DefinedError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<Container>(requestInfo, Container.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes a container. Internal only.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Gets the container&apos;s status
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithProjectItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithProjectItemRequestBuilder WithUrl(string rawUrl)
        {
            return new WithProjectItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithProjectItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithProjectItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}

// <auto-generated/>
using Autodesk.ACC.CostManagement.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.CostManagement.V1.Projects.Item.ActualCosts.Aggregation {
    /// <summary>
    /// Builds and executes requests for operations under \v1\projects\{projectId}\actual-costs\aggregation
    /// </summary>
    public class AggregationRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="AggregationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AggregationRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/projects/{projectId}/actual-costs/aggregation{?filter%5BbudgetId%5D*,filter%5BcontractId%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="AggregationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AggregationRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/projects/{projectId}/actual-costs/aggregation{?filter%5BbudgetId%5D*,filter%5BcontractId%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns aggregations of all actual cost.
        /// </summary>
        /// <returns>A List&lt;ActualCostAggregation&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="DefinedError">When receiving a 400 status code</exception>
        /// <exception cref="Error">When receiving a 401 status code</exception>
        /// <exception cref="Error">When receiving a 403 status code</exception>
        /// <exception cref="Error">When receiving a 404 status code</exception>
        /// <exception cref="Error">When receiving a 500 status code</exception>
        /// <exception cref="Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<ActualCostAggregation>?> GetAsync(Action<RequestConfiguration<AggregationRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<ActualCostAggregation>> GetAsync(Action<RequestConfiguration<AggregationRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"400", DefinedError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<ActualCostAggregation>(requestInfo, ActualCostAggregation.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// Returns aggregations of all actual cost.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AggregationRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AggregationRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="AggregationRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AggregationRequestBuilder WithUrl(string rawUrl)
        {
            return new AggregationRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns aggregations of all actual cost.
        /// </summary>
        public class AggregationRequestBuilderGetQueryParameters 
        {
            /// <summary>The ID of the budget. Separate multiple IDs with commas. For example, ``filter[budgetId]=id1,id2``, or filter these items that are not linked to any budget  ``filter[budgetId]=blank``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BbudgetId%5D")]
            public string[]? FilterbudgetId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BbudgetId%5D")]
            public string[] FilterbudgetId { get; set; }
#endif
            /// <summary>The Contract ID. Separate multiple IDs with commas. For example, ``filter[contractId]=id1,id2``, or filter these items that are not linked to any contract  ``filter[contractId]=blank``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcontractId%5D")]
            public string[]? FiltercontractId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcontractId%5D")]
            public string[] FiltercontractId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class AggregationRequestBuilderGetRequestConfiguration : RequestConfiguration<AggregationRequestBuilderGetQueryParameters> 
        {
        }
    }
}

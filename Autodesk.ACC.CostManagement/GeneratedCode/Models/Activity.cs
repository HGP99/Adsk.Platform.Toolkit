// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class Activity : IAdditionalDataHolder, IParsable 
    {
        /// <summary>The actor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Activity_actor? Actor { get; set; }
#nullable restore
#else
        public Activity_actor Actor { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The generator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Generator { get; set; }
#nullable restore
#else
        public string Generator { get; set; }
#endif
        /// <summary>The object property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Activity_object? Object { get; set; }
#nullable restore
#else
        public Activity_object Object { get; set; }
#endif
        /// <summary>The published property</summary>
        public Date? Published { get; set; }
        /// <summary>The verb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Verb { get; set; }
#nullable restore
#else
        public string Verb { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Activity"/> and sets the default values.
        /// </summary>
        public Activity()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Activity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Activity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Activity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"actor", n => { Actor = n.GetObjectValue<Activity_actor>(Activity_actor.CreateFromDiscriminatorValue); } },
                {"generator", n => { Generator = n.GetStringValue(); } },
                {"object", n => { Object = n.GetObjectValue<Activity_object>(Activity_object.CreateFromDiscriminatorValue); } },
                {"published", n => { Published = n.GetDateValue(); } },
                {"verb", n => { Verb = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Activity_actor>("actor", Actor);
            writer.WriteStringValue("generator", Generator);
            writer.WriteObjectValue<Activity_object>("object", Object);
            writer.WriteDateValue("published", Published);
            writer.WriteStringValue("verb", Verb);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

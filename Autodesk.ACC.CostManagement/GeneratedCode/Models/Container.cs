// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class Container : IAdditionalDataHolder, IParsable 
    {
        /// <summary>The acmNamespace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcmNamespace { get; set; }
#nullable restore
#else
        public string AcmNamespace { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The containerId property</summary>
        public Guid? ContainerId { get; set; }
        /// <summary>The contextIdentifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Container_contextIdentifier? ContextIdentifier { get; set; }
#nullable restore
#else
        public Container_contextIdentifier ContextIdentifier { get; set; }
#endif
        /// <summary>The contextType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContextType { get; set; }
#nullable restore
#else
        public string ContextType { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>Unique identifier of a container.</summary>
        public Guid? Id { get; set; }
        /// <summary>The parentContainerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentContainerId { get; set; }
#nullable restore
#else
        public string ParentContainerId { get; set; }
#endif
        /// <summary>The projectName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectName { get; set; }
#nullable restore
#else
        public string ProjectName { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="Container"/> and sets the default values.
        /// </summary>
        public Container()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Container"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Container CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Container();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"acmNamespace", n => { AcmNamespace = n.GetStringValue(); } },
                {"containerId", n => { ContainerId = n.GetGuidValue(); } },
                {"contextIdentifier", n => { ContextIdentifier = n.GetObjectValue<Container_contextIdentifier>(Container_contextIdentifier.CreateFromDiscriminatorValue); } },
                {"contextType", n => { ContextType = n.GetStringValue(); } },
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"parentContainerId", n => { ParentContainerId = n.GetStringValue(); } },
                {"projectName", n => { ProjectName = n.GetStringValue(); } },
                {"updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("acmNamespace", AcmNamespace);
            writer.WriteGuidValue("containerId", ContainerId);
            writer.WriteObjectValue<Container_contextIdentifier>("contextIdentifier", ContextIdentifier);
            writer.WriteStringValue("contextType", ContextType);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("parentContainerId", ParentContainerId);
            writer.WriteStringValue("projectName", ProjectName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

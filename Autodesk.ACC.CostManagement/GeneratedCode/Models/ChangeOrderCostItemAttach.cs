// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class ChangeOrderCostItemAttach : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the change order to which the cost item will be attached.</summary>
        public Guid? ChangeOrderId { get; set; }
        /// <summary>The ID of the cost item to attach.</summary>
        public Guid? CostItemId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ChangeOrderCostItemAttach"/> and sets the default values.
        /// </summary>
        public ChangeOrderCostItemAttach()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ChangeOrderCostItemAttach"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChangeOrderCostItemAttach CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChangeOrderCostItemAttach();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"changeOrderId", n => { ChangeOrderId = n.GetGuidValue(); } },
                {"costItemId", n => { CostItemId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("changeOrderId", ChangeOrderId);
            writer.WriteGuidValue("costItemId", CostItemId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

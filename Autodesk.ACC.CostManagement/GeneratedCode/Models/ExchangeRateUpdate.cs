// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class ExchangeRateUpdate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Valid end date for this exchange rate setting.</summary>
        public Date? EndDate { get; set; }
        /// <summary>Exchange rate based on base currency. For example, 1 foreign currency = 0.7455 base currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>Foreign currency name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>Valid start date for this exchange rate setting.</summary>
        public Date? StartDate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ExchangeRateUpdate"/> and sets the default values.
        /// </summary>
        public ExchangeRateUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ExchangeRateUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExchangeRateUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExchangeRateUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"endDate", n => { EndDate = n.GetDateValue(); } },
                {"exchangeRate", n => { ExchangeRate = n.GetStringValue(); } },
                {"from", n => { From = n.GetStringValue(); } },
                {"startDate", n => { StartDate = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateValue("endDate", EndDate);
            writer.WriteStringValue("exchangeRate", ExchangeRate);
            writer.WriteStringValue("from", From);
            writer.WriteDateValue("startDate", StartDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

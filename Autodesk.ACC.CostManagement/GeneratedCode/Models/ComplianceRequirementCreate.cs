// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class ComplianceRequirementCreate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The object ID of the compliance requirement is associated to.</summary>
        public Guid? AssociationId { get; set; }
        /// <summary>The type of the compliance requirement is associated. Possible values: ``Contract``,``BudgetPayment``, ``Payment``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssociationType { get; set; }
#nullable restore
#else
        public string AssociationType { get; set; }
#endif
        /// <summary>Unique identifier of a related compliance requirement.</summary>
        public Guid? ComplianceDefinitionId { get; set; }
        /// <summary>The content property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ComplianceRequirementCreate_content>? Content { get; set; }
#nullable restore
#else
        public List<ComplianceRequirementCreate_content> Content { get; set; }
#endif
        /// <summary>The expiration date of compliance requirement.</summary>
        public DateTimeOffset? ExpirationDate { get; set; }
        /// <summary>The required of compliance requirement.</summary>
        public bool? Required { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ComplianceRequirementCreate"/> and sets the default values.
        /// </summary>
        public ComplianceRequirementCreate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ComplianceRequirementCreate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ComplianceRequirementCreate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ComplianceRequirementCreate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"associationId", n => { AssociationId = n.GetGuidValue(); } },
                {"associationType", n => { AssociationType = n.GetStringValue(); } },
                {"complianceDefinitionId", n => { ComplianceDefinitionId = n.GetGuidValue(); } },
                {"content", n => { Content = n.GetCollectionOfObjectValues<ComplianceRequirementCreate_content>(ComplianceRequirementCreate_content.CreateFromDiscriminatorValue)?.ToList(); } },
                {"expirationDate", n => { ExpirationDate = n.GetDateTimeOffsetValue(); } },
                {"required", n => { Required = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("associationId", AssociationId);
            writer.WriteStringValue("associationType", AssociationType);
            writer.WriteGuidValue("complianceDefinitionId", ComplianceDefinitionId);
            writer.WriteCollectionOfObjectValues<ComplianceRequirementCreate_content>("content", Content);
            writer.WriteDateTimeOffsetValue("expirationDate", ExpirationDate);
            writer.WriteBoolValue("required", Required);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

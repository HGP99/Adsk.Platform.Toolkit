// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EmailNotificationCreate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The object ID of the item with which the actions are associatedâ€”a budget, contract, or cost item for example.</summary>
        public Guid? AssociationId { get; set; }
        /// <summary>The type of the item is associated to. For example, ``Budget``, ``Contract``, ``CostItem``, ``FormInstance``, and ``Payment``, ``MainContract``, ``BudgetPayment``, ``Expense``, ``ExpenseItem``, ``OCO``, ``SCO`` in the coming release.</summary>
        public global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_associationType? AssociationType { get; set; }
        /// <summary>The attachments of the email.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_attachments> Attachments { get; set; }
#endif
        /// <summary>A flag to indicate whether this email should be carbon copy to sender or not.</summary>
        public bool? CopySender { get; set; }
        /// <summary>Document ID of the sent history.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentId { get; set; }
#nullable restore
#else
        public string DocumentId { get; set; }
#endif
        /// <summary>The greetings message of the email.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The ID of the user who will receive the notification. This is a project user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Recipient { get; set; }
#nullable restore
#else
        public UntypedNode Recipient { get; set; }
#endif
        /// <summary>The ID of the user who sent the notification. This is a project user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sender { get; set; }
#nullable restore
#else
        public string Sender { get; set; }
#endif
        /// <summary>The subject of the email.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate"/> and sets the default values.
        /// </summary>
        public EmailNotificationCreate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "associationId", n => { AssociationId = n.GetGuidValue(); } },
                { "associationType", n => { AssociationType = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_associationType>(); } },
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_attachments>(global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "copySender", n => { CopySender = n.GetBoolValue(); } },
                { "documentId", n => { DocumentId = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "recipient", n => { Recipient = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "sender", n => { Sender = n.GetStringValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("associationId", AssociationId);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_associationType>("associationType", AssociationType);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.CostManagement.Models.EmailNotificationCreate_attachments>("attachments", Attachments);
            writer.WriteBoolValue("copySender", CopySender);
            writer.WriteStringValue("documentId", DocumentId);
            writer.WriteStringValue("message", Message);
            writer.WriteObjectValue<UntypedNode>("recipient", Recipient);
            writer.WriteStringValue("sender", Sender);
            writer.WriteStringValue("subject", Subject);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

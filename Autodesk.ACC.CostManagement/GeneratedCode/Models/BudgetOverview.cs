// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class BudgetOverview : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Total amount of actual cost of the budget.</summary>
        public double? ActualCost { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of the budget that has been allocated to contracts.</summary>
        public double? AllocatedAmount { get; set; }
        /// <summary>The amount of the approved changes orders in the InScope.</summary>
        public double? ApprovedChangeOrderContingency { get; set; }
        /// <summary>The amount of the approved changes orders in the InScope.</summary>
        public double? ApprovedChangeOrdersInScope { get; set; }
        /// <summary>The amount of the approved changes orders in the OutOfScope`.</summary>
        public double? ApprovedChangeOrdersOutOfScope { get; set; }
        /// <summary>The amount of the approved cost payment application.</summary>
        public double? ApprovedCostPaymentApplication { get; set; }
        /// <summary>The amount of the approved expense.</summary>
        public double? ApprovedExpense { get; set; }
        /// <summary>The amount of the approved owner changes in the contingency.</summary>
        public double? ApprovedOwnerChangesContingency { get; set; }
        /// <summary>The amount of the approved owner changes in the OutOfScope.</summary>
        public double? ApprovedOwnerChangesOutOfScope { get; set; }
        /// <summary>Unique code compliant with the budget code template defined by the project admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The amount of the draft changes orders.</summary>
        public double? DraftChangeOrders { get; set; }
        /// <summary>The amount of the draft owner changes.</summary>
        public double? DraftOwnerChanges { get; set; }
        /// <summary>The amount of the forecast adjustment.</summary>
        public double? ForecastAdjustment { get; set; }
        /// <summary>The id of the budget or contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The internal adjustment of the budget.</summary>
        public double? InternalAdjustment { get; set; }
        /// <summary>Name of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The amount of the contract.</summary>
        public double? OrigCommitment { get; set; }
        /// <summary>The amount of the budget.</summary>
        public double? OriginalBudget { get; set; }
        /// <summary>The qty of the budget.</summary>
        public double? OriginalQty { get; set; }
        /// <summary>The amount of the pending changes orders in the Contingency.</summary>
        public double? PendingChangeOrdersContingency { get; set; }
        /// <summary>The amount of the pending changes orders in the InScope.</summary>
        public double? PendingChangeOrdersInScope { get; set; }
        /// <summary>The amount of the pending changes orders in the OutOfScope.</summary>
        public double? PendingChangeOrdersOutOfScope { get; set; }
        /// <summary>The amount of the pending cost payment application.</summary>
        public double? PendingCostPaymentApplication { get; set; }
        /// <summary>The amount of the  the pending expense.</summary>
        public double? PendingExpense { get; set; }
        /// <summary>The amount of the pre submitted owner changes in the Contingency.</summary>
        public double? PreSubmittedOwnerChangesContingency { get; set; }
        /// <summary>The amount of the pre submitted owner changes in the OutOfScope.</summary>
        public double? PreSubmittedOwnerChangesOutOfScope { get; set; }
        /// <summary>The amount of the reserves in the Contingency.</summary>
        public double? ReservesContingency { get; set; }
        /// <summary>The amount of the reserves in the InScope.</summary>
        public double? ReservesInScope { get; set; }
        /// <summary>The amount of the reserves in the OutOfScope.</summary>
        public double? ReservesOutOfScope { get; set; }
        /// <summary>The amount of the submitted owner changes in the Contingency.</summary>
        public double? SubmittedOwnerChangesContingency { get; set; }
        /// <summary>The amount of the submitted owner changes in the OutOfScope.</summary>
        public double? SubmittedOwnerChangesOutOfScope { get; set; }
        /// <summary>The amount of unallocated of the budget.</summary>
        public double? UnallocatedAmount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="BudgetOverview"/> and sets the default values.
        /// </summary>
        public BudgetOverview()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BudgetOverview"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BudgetOverview CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BudgetOverview();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"actualCost", n => { ActualCost = n.GetDoubleValue(); } },
                {"allocatedAmount", n => { AllocatedAmount = n.GetDoubleValue(); } },
                {"approvedChangeOrderContingency", n => { ApprovedChangeOrderContingency = n.GetDoubleValue(); } },
                {"approvedChangeOrdersInScope", n => { ApprovedChangeOrdersInScope = n.GetDoubleValue(); } },
                {"approvedChangeOrdersOutOfScope", n => { ApprovedChangeOrdersOutOfScope = n.GetDoubleValue(); } },
                {"approvedCostPaymentApplication", n => { ApprovedCostPaymentApplication = n.GetDoubleValue(); } },
                {"approvedExpense", n => { ApprovedExpense = n.GetDoubleValue(); } },
                {"approvedOwnerChangesContingency", n => { ApprovedOwnerChangesContingency = n.GetDoubleValue(); } },
                {"approvedOwnerChangesOutOfScope", n => { ApprovedOwnerChangesOutOfScope = n.GetDoubleValue(); } },
                {"code", n => { Code = n.GetStringValue(); } },
                {"draftChangeOrders", n => { DraftChangeOrders = n.GetDoubleValue(); } },
                {"draftOwnerChanges", n => { DraftOwnerChanges = n.GetDoubleValue(); } },
                {"forecastAdjustment", n => { ForecastAdjustment = n.GetDoubleValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"internalAdjustment", n => { InternalAdjustment = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"origCommitment", n => { OrigCommitment = n.GetDoubleValue(); } },
                {"originalBudget", n => { OriginalBudget = n.GetDoubleValue(); } },
                {"originalQty", n => { OriginalQty = n.GetDoubleValue(); } },
                {"pendingChangeOrdersContingency", n => { PendingChangeOrdersContingency = n.GetDoubleValue(); } },
                {"pendingChangeOrdersInScope", n => { PendingChangeOrdersInScope = n.GetDoubleValue(); } },
                {"pendingChangeOrdersOutOfScope", n => { PendingChangeOrdersOutOfScope = n.GetDoubleValue(); } },
                {"pendingCostPaymentApplication", n => { PendingCostPaymentApplication = n.GetDoubleValue(); } },
                {"pendingExpense", n => { PendingExpense = n.GetDoubleValue(); } },
                {"preSubmittedOwnerChangesContingency", n => { PreSubmittedOwnerChangesContingency = n.GetDoubleValue(); } },
                {"preSubmittedOwnerChangesOutOfScope", n => { PreSubmittedOwnerChangesOutOfScope = n.GetDoubleValue(); } },
                {"reservesContingency", n => { ReservesContingency = n.GetDoubleValue(); } },
                {"reservesInScope", n => { ReservesInScope = n.GetDoubleValue(); } },
                {"reservesOutOfScope", n => { ReservesOutOfScope = n.GetDoubleValue(); } },
                {"submittedOwnerChangesContingency", n => { SubmittedOwnerChangesContingency = n.GetDoubleValue(); } },
                {"submittedOwnerChangesOutOfScope", n => { SubmittedOwnerChangesOutOfScope = n.GetDoubleValue(); } },
                {"unallocatedAmount", n => { UnallocatedAmount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("actualCost", ActualCost);
            writer.WriteDoubleValue("allocatedAmount", AllocatedAmount);
            writer.WriteDoubleValue("approvedChangeOrderContingency", ApprovedChangeOrderContingency);
            writer.WriteDoubleValue("approvedChangeOrdersInScope", ApprovedChangeOrdersInScope);
            writer.WriteDoubleValue("approvedChangeOrdersOutOfScope", ApprovedChangeOrdersOutOfScope);
            writer.WriteDoubleValue("approvedCostPaymentApplication", ApprovedCostPaymentApplication);
            writer.WriteDoubleValue("approvedExpense", ApprovedExpense);
            writer.WriteDoubleValue("approvedOwnerChangesContingency", ApprovedOwnerChangesContingency);
            writer.WriteDoubleValue("approvedOwnerChangesOutOfScope", ApprovedOwnerChangesOutOfScope);
            writer.WriteStringValue("code", Code);
            writer.WriteDoubleValue("draftChangeOrders", DraftChangeOrders);
            writer.WriteDoubleValue("draftOwnerChanges", DraftOwnerChanges);
            writer.WriteDoubleValue("forecastAdjustment", ForecastAdjustment);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("internalAdjustment", InternalAdjustment);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("origCommitment", OrigCommitment);
            writer.WriteDoubleValue("originalBudget", OriginalBudget);
            writer.WriteDoubleValue("originalQty", OriginalQty);
            writer.WriteDoubleValue("pendingChangeOrdersContingency", PendingChangeOrdersContingency);
            writer.WriteDoubleValue("pendingChangeOrdersInScope", PendingChangeOrdersInScope);
            writer.WriteDoubleValue("pendingChangeOrdersOutOfScope", PendingChangeOrdersOutOfScope);
            writer.WriteDoubleValue("pendingCostPaymentApplication", PendingCostPaymentApplication);
            writer.WriteDoubleValue("pendingExpense", PendingExpense);
            writer.WriteDoubleValue("preSubmittedOwnerChangesContingency", PreSubmittedOwnerChangesContingency);
            writer.WriteDoubleValue("preSubmittedOwnerChangesOutOfScope", PreSubmittedOwnerChangesOutOfScope);
            writer.WriteDoubleValue("reservesContingency", ReservesContingency);
            writer.WriteDoubleValue("reservesInScope", ReservesInScope);
            writer.WriteDoubleValue("reservesOutOfScope", ReservesOutOfScope);
            writer.WriteDoubleValue("submittedOwnerChangesContingency", SubmittedOwnerChangesContingency);
            writer.WriteDoubleValue("submittedOwnerChangesOutOfScope", SubmittedOwnerChangesOutOfScope);
            writer.WriteDoubleValue("unallocatedAmount", UnallocatedAmount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

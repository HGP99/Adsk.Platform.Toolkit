// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Milestone : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The ID of the schedule activity from Autodesk Build.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActivityId { get; set; }
#nullable restore
#else
        public string ActivityId { get; set; }
#endif
        /// <summary>The planned start day of the item.</summary>
        public Date? ActualEndDate { get; set; }
        /// <summary>The actual start day of the item.</summary>
        public Date? ActualStartDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The timeline color in gantt chart for project milestone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The user who created the project milestone. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId { get; private set; }
#nullable restore
#else
        public string CreatorId { get; private set; }
#endif
        /// <summary>The duration days of the item.</summary>
        public double? DurationDays { get; set; }
        /// <summary>Unique identifier of the milestone.</summary>
        public Guid? Id { get; set; }
        /// <summary>The name of the project milestone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The ID of the parent milestone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentId { get; set; }
#nullable restore
#else
        public string ParentId { get; set; }
#endif
        /// <summary>The planned end day of the item.</summary>
        public Date? PlannedEndDate { get; set; }
        /// <summary>The planned start day of the item.</summary>
        public Date? PlannedStartDate { get; set; }
        /// <summary>The ID of the schedule from Autodesk Build.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScheduleId { get; set; }
#nullable restore
#else
        public string ScheduleId { get; set; }
#endif
        /// <summary>The sequence of the project milestone.</summary>
        public double? Sequence { get; set; }
        /// <summary>The ID of the schedule from Autodesk Build Schedule. Possible values: `Milestone&apos;, `Activity` and `Summary`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>The user who last update the project milestone. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedBy { get; private set; }
#nullable restore
#else
        public string UpdatedBy { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.Milestone"/> and sets the default values.
        /// </summary>
        public Milestone()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.Milestone"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.Milestone CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.Milestone();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activityId", n => { ActivityId = n.GetStringValue(); } },
                { "actualEndDate", n => { ActualEndDate = n.GetDateValue(); } },
                { "actualStartDate", n => { ActualStartDate = n.GetDateValue(); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "creatorId", n => { CreatorId = n.GetStringValue(); } },
                { "durationDays", n => { DurationDays = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "parentId", n => { ParentId = n.GetStringValue(); } },
                { "plannedEndDate", n => { PlannedEndDate = n.GetDateValue(); } },
                { "plannedStartDate", n => { PlannedStartDate = n.GetDateValue(); } },
                { "scheduleId", n => { ScheduleId = n.GetStringValue(); } },
                { "sequence", n => { Sequence = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "updatedBy", n => { UpdatedBy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activityId", ActivityId);
            writer.WriteDateValue("actualEndDate", ActualEndDate);
            writer.WriteDateValue("actualStartDate", ActualStartDate);
            writer.WriteStringValue("color", Color);
            writer.WriteDoubleValue("durationDays", DurationDays);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("parentId", ParentId);
            writer.WriteDateValue("plannedEndDate", PlannedEndDate);
            writer.WriteDateValue("plannedStartDate", PlannedStartDate);
            writer.WriteStringValue("scheduleId", ScheduleId);
            writer.WriteDoubleValue("sequence", Sequence);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

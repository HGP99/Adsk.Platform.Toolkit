// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class MainContractCreate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The actual completion date of the mainContract.</summary>
        public Date? ActualCompletionDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The architect company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArchitectCompanyId { get; set; }
#nullable restore
#else
        public string ArchitectCompanyId { get; set; }
#endif
        /// <summary>The architect contact id. This is the ID of a contact managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArchitectContactId { get; set; }
#nullable restore
#else
        public string ArchitectContactId { get; set; }
#endif
        /// <summary>The close date of the mainContract.</summary>
        public Date? CloseDate { get; set; }
        /// <summary>The code of the mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The contact of the mainContract. This is the ID of a contact managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>The general contractor company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractorCompanyId { get; set; }
#nullable restore
#else
        public string ContractorCompanyId { get; set; }
#endif
        /// <summary>The general contractor contact id. This is the ID of a contact managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractorContactId { get; set; }
#nullable restore
#else
        public string ContractorContactId { get; set; }
#endif
        /// <summary>Detailed description of a mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The executed date of the mainContract.</summary>
        public Date? ExecutedDate { get; set; }
        /// <summary>The ID of the item in its original external system. You can use this ID to track the source of truth or to look up the data in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>A message that explains the sync status of the ERP integration with the BIM 360 Cost module.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalMessage { get; set; }
#nullable restore
#else
        public string ExternalMessage { get; set; }
#endif
        /// <summary>The name of the external system. You can use this name to track the source of truth or to search in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalSystem { get; set; }
#nullable restore
#else
        public string ExternalSystem { get; set; }
#endif
        /// <summary>Indicate whether mainContract is default or not.</summary>
        public bool? IsDefault { get; set; }
        /// <summary>The name of the mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The notary company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NotaryCompanyId { get; set; }
#nullable restore
#else
        public string NotaryCompanyId { get; set; }
#endif
        /// <summary>The notary contact id. This is the ID of a contact managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NotaryContactId { get; set; }
#nullable restore
#else
        public string NotaryContactId { get; set; }
#endif
        /// <summary>Scope signed by all parties of the mainContract. This is a Draftjs formatted rich text (https://draftjs.org/).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The owner company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerCompanyId { get; set; }
#nullable restore
#else
        public string OwnerCompanyId { get; set; }
#endif
        /// <summary>The owner contact id. This is the ID of a contact managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerContactId { get; set; }
#nullable restore
#else
        public string OwnerContactId { get; set; }
#endif
        /// <summary>The planned completion date of the mainContract.</summary>
        public Date? PlannedCompletionDate { get; set; }
        /// <summary>Total retention percentage of the main contract amount.</summary>
        public double? RetentionCap { get; set; }
        /// <summary>Scope signed by all parties of the mainContract. This is a Draftjs formatted rich text (https://draftjs.org/).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScopeOfWork { get; set; }
#nullable restore
#else
        public string ScopeOfWork { get; set; }
#endif
        /// <summary>The start date of the mainContract.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The status of the mainContract. For example, closed, executed, review, signed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Type of the mainContract. For example, Fixed Price or Unit Price. Type is customizable by the project admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.MainContractCreate"/> and sets the default values.
        /// </summary>
        public MainContractCreate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.MainContractCreate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.MainContractCreate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.MainContractCreate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actualCompletionDate", n => { ActualCompletionDate = n.GetDateValue(); } },
                { "architectCompanyId", n => { ArchitectCompanyId = n.GetStringValue(); } },
                { "architectContactId", n => { ArchitectContactId = n.GetStringValue(); } },
                { "closeDate", n => { CloseDate = n.GetDateValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "contractorCompanyId", n => { ContractorCompanyId = n.GetStringValue(); } },
                { "contractorContactId", n => { ContractorContactId = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "executedDate", n => { ExecutedDate = n.GetDateValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "externalMessage", n => { ExternalMessage = n.GetStringValue(); } },
                { "externalSystem", n => { ExternalSystem = n.GetStringValue(); } },
                { "isDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "notaryCompanyId", n => { NotaryCompanyId = n.GetStringValue(); } },
                { "notaryContactId", n => { NotaryContactId = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "ownerCompanyId", n => { OwnerCompanyId = n.GetStringValue(); } },
                { "ownerContactId", n => { OwnerContactId = n.GetStringValue(); } },
                { "plannedCompletionDate", n => { PlannedCompletionDate = n.GetDateValue(); } },
                { "retentionCap", n => { RetentionCap = n.GetDoubleValue(); } },
                { "scopeOfWork", n => { ScopeOfWork = n.GetStringValue(); } },
                { "startDate", n => { StartDate = n.GetDateValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateValue("actualCompletionDate", ActualCompletionDate);
            writer.WriteStringValue("architectCompanyId", ArchitectCompanyId);
            writer.WriteStringValue("architectContactId", ArchitectContactId);
            writer.WriteDateValue("closeDate", CloseDate);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("contractorCompanyId", ContractorCompanyId);
            writer.WriteStringValue("contractorContactId", ContractorContactId);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("executedDate", ExecutedDate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("externalMessage", ExternalMessage);
            writer.WriteStringValue("externalSystem", ExternalSystem);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("notaryCompanyId", NotaryCompanyId);
            writer.WriteStringValue("notaryContactId", NotaryContactId);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("ownerCompanyId", OwnerCompanyId);
            writer.WriteStringValue("ownerContactId", OwnerContactId);
            writer.WriteDateValue("plannedCompletionDate", PlannedCompletionDate);
            writer.WriteDoubleValue("retentionCap", RetentionCap);
            writer.WriteStringValue("scopeOfWork", ScopeOfWork);
            writer.WriteDateValue("startDate", StartDate);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

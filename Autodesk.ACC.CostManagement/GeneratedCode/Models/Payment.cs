// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Payment : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggregate type of the payment. Possible values: `workCompleted`, `workCompletedPercentage`.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Payment_aggregateBy? AggregateBy { get; set; }
        /// <summary>The work completed of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>The total amount of approved change orders in this period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedChangeOrders { get; set; }
#nullable restore
#else
        public string ApprovedChangeOrders { get; set; }
#endif
        /// <summary>Foreign currency for approvedChangeOrders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovedChangeOrdersForeignCurrency { get; set; }
#nullable restore
#else
        public string ApprovedChangeOrdersForeignCurrency { get; set; }
#endif
        /// <summary>The object ID of the payment is associated to. For example ID of contract or mainContract.</summary>
        public Guid? AssociationId { get; set; }
        /// <summary>The type of object that the payment is associated to. For example, ``Contract`` and ``MainContract``.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Payment_associationType? AssociationType { get; set; }
        /// <summary>Unique identifier of the billing period ID.</summary>
        public Guid? BillingPeriodId { get; set; }
        /// <summary>The budget payment ID the cost payment is associated to. This is only valid for cost payments.</summary>
        public Guid? BudgetPaymentId { get; set; }
        /// <summary>The claimed work completed of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedAmount { get; set; }
#nullable restore
#else
        public string ClaimedAmount { get; set; }
#endif
        /// <summary>The retention of work completed of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompletedWorkRetention { get; set; }
#nullable restore
#else
        public string CompletedWorkRetention { get; set; }
#endif
        /// <summary>Foreign currency for completedWorkRetention.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompletedWorkRetentionForeignCurrency { get; set; }
#nullable restore
#else
        public string CompletedWorkRetentionForeignCurrency { get; set; }
#endif
        /// <summary>The original contract amount of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractAmount { get; set; }
#nullable restore
#else
        public string ContractAmount { get; set; }
#endif
        /// <summary>Foreign currency for contractAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string ContractAmountForeignCurrency { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The detail description of this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The end date of this payment.</summary>
        public Date? EndDate { get; set; }
        /// <summary>Exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>The date and time determines which distribution period this payment belongs to, after set status to Approved or Paid.</summary>
        public DateTimeOffset? ForecastDistributionAt { get; private set; }
        /// <summary>Indicate if this payment has comment.</summary>
        public bool? HasComment { get; set; }
        /// <summary>Unique identifier of the payment.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Lock state used by ERP integration, default value is ``null``.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Payment_integrationState? IntegrationState { get; set; }
        /// <summary>The date and time last locked this item.</summary>
        public DateTimeOffset? IntegrationStateChangedAt { get; set; }
        /// <summary>The user who last locked this item. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IntegrationStateChangedBy { get; set; }
#nullable restore
#else
        public string IntegrationStateChangedBy { get; set; }
#endif
        /// <summary>The main contract ID of the payment that is associated to.</summary>
        public Guid? MainContractId { get; set; }
        /// <summary>The amount of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilled { get; set; }
#nullable restore
#else
        public string MaterialsBilled { get; set; }
#endif
        /// <summary>The amount of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStore { get; set; }
#nullable restore
#else
        public string MaterialsOnStore { get; set; }
#endif
        /// <summary>The retention of material on site of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreRetention { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreRetention { get; set; }
#endif
        /// <summary>The name of this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The net amount that should be paid in this period, including work completed, material on site, retention and release.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetAmount { get; set; }
#nullable restore
#else
        public string NetAmount { get; set; }
#endif
        /// <summary>Foreign currency for netAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string NetAmountForeignCurrency { get; set; }
#endif
        /// <summary>The net change of materials on store of this period, which equals to `materialsOnStore` - `previousMaterialsOnStore`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetMaterialsOnStore { get; set; }
#nullable restore
#else
        public string NetMaterialsOnStore { get; set; }
#endif
        /// <summary>The net retention amount of this period, which equals to `completedWorkRetention` + `materialsOnStoreRetention` - `previousRetention`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetRetention { get; set; }
#nullable restore
#else
        public string NetRetention { get; set; }
#endif
        /// <summary>Draftjs formatted rich text(https://draftjs.org/)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The number of this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>The original amount of the payment, including contract amount and change orders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalAmount { get; set; }
#nullable restore
#else
        public string OriginalAmount { get; set; }
#endif
        /// <summary>Foreign currency for originalAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string OriginalAmountForeignCurrency { get; set; }
#endif
        /// <summary>The date and time when the expense is paid.</summary>
        public DateTimeOffset? PaidAt { get; set; }
        /// <summary>The total of work completed till previous payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousAmount { get; set; }
#nullable restore
#else
        public string PreviousAmount { get; set; }
#endif
        /// <summary>Foreign currency for previousAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousAmountForeignCurrency { get; set; }
#endif
        /// <summary>The total amount of previously approved change orders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousApprovedChangeOrders { get; set; }
#nullable restore
#else
        public string PreviousApprovedChangeOrders { get; set; }
#endif
        /// <summary>Foreign currency for previousApprovedChangeOrders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousApprovedChangeOrdersForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousApprovedChangeOrdersForeignCurrency { get; set; }
#endif
        /// <summary>The previous claimed work completed of the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedAmount { get; set; }
#nullable restore
#else
        public string PreviousClaimedAmount { get; set; }
#endif
        /// <summary>Foreign currency for previousClaimedAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousClaimedAmountForeignCurrency { get; set; }
#endif
        /// <summary>Cost Pay Application exchange rate for previous billing period. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousExchangeRate { get; set; }
#nullable restore
#else
        public string PreviousExchangeRate { get; set; }
#endif
        /// <summary>The amount of the material billed in last payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsBilled { get; set; }
#nullable restore
#else
        public string PreviousMaterialsBilled { get; set; }
#endif
        /// <summary>Foreign currency for previousMaterialsBilled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsBilledCurrency { get; set; }
#nullable restore
#else
        public string PreviousMaterialsBilledCurrency { get; set; }
#endif
        /// <summary>The amount of the material billed in last payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsOnStore { get; set; }
#nullable restore
#else
        public string PreviousMaterialsOnStore { get; set; }
#endif
        /// <summary>The total amount previously retained.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousRetention { get; set; }
#nullable restore
#else
        public string PreviousRetention { get; set; }
#endif
        /// <summary>Foreign currency for previousRetention.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousRetentionForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousRetentionForeignCurrency { get; set; }
#endif
        /// <summary>The start date of this payment.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The status of this payment.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Payment_status? Status { get; set; }
        /// <summary>The date and time when the payment is submitted.</summary>
        public DateTimeOffset? SubmittedAt { get; private set; }
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.Payment"/> and sets the default values.
        /// </summary>
        public Payment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.Payment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.Payment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.Payment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aggregateBy", n => { AggregateBy = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_aggregateBy>(); } },
                { "amount", n => { Amount = n.GetStringValue(); } },
                { "approvedChangeOrders", n => { ApprovedChangeOrders = n.GetStringValue(); } },
                { "approvedChangeOrdersForeignCurrency", n => { ApprovedChangeOrdersForeignCurrency = n.GetStringValue(); } },
                { "associationId", n => { AssociationId = n.GetGuidValue(); } },
                { "associationType", n => { AssociationType = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_associationType>(); } },
                { "billingPeriodId", n => { BillingPeriodId = n.GetGuidValue(); } },
                { "budgetPaymentId", n => { BudgetPaymentId = n.GetGuidValue(); } },
                { "claimedAmount", n => { ClaimedAmount = n.GetStringValue(); } },
                { "completedWorkRetention", n => { CompletedWorkRetention = n.GetStringValue(); } },
                { "completedWorkRetentionForeignCurrency", n => { CompletedWorkRetentionForeignCurrency = n.GetStringValue(); } },
                { "contractAmount", n => { ContractAmount = n.GetStringValue(); } },
                { "contractAmountForeignCurrency", n => { ContractAmountForeignCurrency = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "endDate", n => { EndDate = n.GetDateValue(); } },
                { "exchangeRate", n => { ExchangeRate = n.GetStringValue(); } },
                { "forecastDistributionAt", n => { ForecastDistributionAt = n.GetDateTimeOffsetValue(); } },
                { "hasComment", n => { HasComment = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "integrationState", n => { IntegrationState = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_integrationState>(); } },
                { "integrationStateChangedAt", n => { IntegrationStateChangedAt = n.GetDateTimeOffsetValue(); } },
                { "integrationStateChangedBy", n => { IntegrationStateChangedBy = n.GetStringValue(); } },
                { "mainContractId", n => { MainContractId = n.GetGuidValue(); } },
                { "materialsBilled", n => { MaterialsBilled = n.GetStringValue(); } },
                { "materialsOnStore", n => { MaterialsOnStore = n.GetStringValue(); } },
                { "materialsOnStoreRetention", n => { MaterialsOnStoreRetention = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "netAmount", n => { NetAmount = n.GetStringValue(); } },
                { "netAmountForeignCurrency", n => { NetAmountForeignCurrency = n.GetStringValue(); } },
                { "netMaterialsOnStore", n => { NetMaterialsOnStore = n.GetStringValue(); } },
                { "netRetention", n => { NetRetention = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "originalAmount", n => { OriginalAmount = n.GetStringValue(); } },
                { "originalAmountForeignCurrency", n => { OriginalAmountForeignCurrency = n.GetStringValue(); } },
                { "paidAt", n => { PaidAt = n.GetDateTimeOffsetValue(); } },
                { "previousAmount", n => { PreviousAmount = n.GetStringValue(); } },
                { "previousAmountForeignCurrency", n => { PreviousAmountForeignCurrency = n.GetStringValue(); } },
                { "previousApprovedChangeOrders", n => { PreviousApprovedChangeOrders = n.GetStringValue(); } },
                { "previousApprovedChangeOrdersForeignCurrency", n => { PreviousApprovedChangeOrdersForeignCurrency = n.GetStringValue(); } },
                { "previousClaimedAmount", n => { PreviousClaimedAmount = n.GetStringValue(); } },
                { "previousClaimedAmountForeignCurrency", n => { PreviousClaimedAmountForeignCurrency = n.GetStringValue(); } },
                { "previousExchangeRate", n => { PreviousExchangeRate = n.GetStringValue(); } },
                { "previousMaterialsBilled", n => { PreviousMaterialsBilled = n.GetStringValue(); } },
                { "previousMaterialsBilledCurrency", n => { PreviousMaterialsBilledCurrency = n.GetStringValue(); } },
                { "previousMaterialsOnStore", n => { PreviousMaterialsOnStore = n.GetStringValue(); } },
                { "previousRetention", n => { PreviousRetention = n.GetStringValue(); } },
                { "previousRetentionForeignCurrency", n => { PreviousRetentionForeignCurrency = n.GetStringValue(); } },
                { "startDate", n => { StartDate = n.GetDateValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_status>(); } },
                { "submittedAt", n => { SubmittedAt = n.GetDateTimeOffsetValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_aggregateBy>("aggregateBy", AggregateBy);
            writer.WriteStringValue("amount", Amount);
            writer.WriteStringValue("approvedChangeOrders", ApprovedChangeOrders);
            writer.WriteStringValue("approvedChangeOrdersForeignCurrency", ApprovedChangeOrdersForeignCurrency);
            writer.WriteGuidValue("associationId", AssociationId);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_associationType>("associationType", AssociationType);
            writer.WriteGuidValue("billingPeriodId", BillingPeriodId);
            writer.WriteGuidValue("budgetPaymentId", BudgetPaymentId);
            writer.WriteStringValue("claimedAmount", ClaimedAmount);
            writer.WriteStringValue("completedWorkRetention", CompletedWorkRetention);
            writer.WriteStringValue("completedWorkRetentionForeignCurrency", CompletedWorkRetentionForeignCurrency);
            writer.WriteStringValue("contractAmount", ContractAmount);
            writer.WriteStringValue("contractAmountForeignCurrency", ContractAmountForeignCurrency);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("endDate", EndDate);
            writer.WriteStringValue("exchangeRate", ExchangeRate);
            writer.WriteBoolValue("hasComment", HasComment);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_integrationState>("integrationState", IntegrationState);
            writer.WriteDateTimeOffsetValue("integrationStateChangedAt", IntegrationStateChangedAt);
            writer.WriteStringValue("integrationStateChangedBy", IntegrationStateChangedBy);
            writer.WriteGuidValue("mainContractId", MainContractId);
            writer.WriteStringValue("materialsBilled", MaterialsBilled);
            writer.WriteStringValue("materialsOnStore", MaterialsOnStore);
            writer.WriteStringValue("materialsOnStoreRetention", MaterialsOnStoreRetention);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("netAmount", NetAmount);
            writer.WriteStringValue("netAmountForeignCurrency", NetAmountForeignCurrency);
            writer.WriteStringValue("netMaterialsOnStore", NetMaterialsOnStore);
            writer.WriteStringValue("netRetention", NetRetention);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("number", Number);
            writer.WriteStringValue("originalAmount", OriginalAmount);
            writer.WriteStringValue("originalAmountForeignCurrency", OriginalAmountForeignCurrency);
            writer.WriteDateTimeOffsetValue("paidAt", PaidAt);
            writer.WriteStringValue("previousAmount", PreviousAmount);
            writer.WriteStringValue("previousAmountForeignCurrency", PreviousAmountForeignCurrency);
            writer.WriteStringValue("previousApprovedChangeOrders", PreviousApprovedChangeOrders);
            writer.WriteStringValue("previousApprovedChangeOrdersForeignCurrency", PreviousApprovedChangeOrdersForeignCurrency);
            writer.WriteStringValue("previousClaimedAmount", PreviousClaimedAmount);
            writer.WriteStringValue("previousClaimedAmountForeignCurrency", PreviousClaimedAmountForeignCurrency);
            writer.WriteStringValue("previousExchangeRate", PreviousExchangeRate);
            writer.WriteStringValue("previousMaterialsBilled", PreviousMaterialsBilled);
            writer.WriteStringValue("previousMaterialsBilledCurrency", PreviousMaterialsBilledCurrency);
            writer.WriteStringValue("previousMaterialsOnStore", PreviousMaterialsOnStore);
            writer.WriteStringValue("previousRetention", PreviousRetention);
            writer.WriteStringValue("previousRetentionForeignCurrency", PreviousRetentionForeignCurrency);
            writer.WriteDateValue("startDate", StartDate);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Payment_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

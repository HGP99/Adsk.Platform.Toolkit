// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class PaymentItem : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggregate type to budget Pay.</summary>
        public global::Autodesk.ACC.CostManagement.Models.PaymentItem_aggregateBy? AggregateBy { get; set; }
        /// <summary>The actual quantity of payment item in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>The object ID of the payment item is associated to.</summary>
        public Guid? AssociationId { get; set; }
        /// <summary>The object type of the payment item is associated to.</summary>
        public global::Autodesk.ACC.CostManagement.Models.PaymentItem_associationType? AssociationType { get; set; }
        /// <summary>ID of the Budget to which the payment item belongs.</summary>
        public Guid? BudgetId { get; set; }
        /// <summary>Indicate if this payment item can be deleted.</summary>
        public bool? CanDelete { get; set; }
        /// <summary>The user who made the change.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChangedBy { get; set; }
#nullable restore
#else
        public string ChangedBy { get; set; }
#endif
        /// <summary>The claimed work completed amount of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedAmount { get; set; }
#nullable restore
#else
        public string ClaimedAmount { get; set; }
#endif
        /// <summary>The claimed work completed qty of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedQuantity { get; set; }
#nullable restore
#else
        public string ClaimedQuantity { get; set; }
#endif
        /// <summary>The claimed work completed unit price of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedUnitPrice { get; set; }
#nullable restore
#else
        public string ClaimedUnitPrice { get; set; }
#endif
        /// <summary>The amount that is released in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompletedWorkReleased { get; set; }
#nullable restore
#else
        public string CompletedWorkReleased { get; set; }
#endif
        /// <summary>The percentage the total amount of work to be retained.</summary>
        public double? CompletedWorkRetentionPercent { get; set; }
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The user who created the payment item. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId { get; set; }
#nullable restore
#else
        public string CreatorId { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>Indicate if this payment item has comment.</summary>
        public bool? HasComment { get; set; }
        /// <summary>Unique identifier of the payment.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Indicate if this payment item should be exposed to owner. This is only for budget payment.</summary>
        public bool? IsPrivate { get; set; }
        /// <summary>The last user who made the review.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastReviewedBy { get; set; }
#nullable restore
#else
        public string LastReviewedBy { get; set; }
#endif
        /// <summary>The amount of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilled { get; set; }
#nullable restore
#else
        public string MaterialsBilled { get; set; }
#endif
        /// <summary>The quanity of the material currently billed.</summary>
        public double? MaterialsBilledQuantity { get; set; }
        /// <summary>The unit of meaure of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilledUnit { get; set; }
#nullable restore
#else
        public string MaterialsBilledUnit { get; set; }
#endif
        /// <summary>The unit price of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilledUnitPrice { get; set; }
#nullable restore
#else
        public string MaterialsBilledUnitPrice { get; set; }
#endif
        /// <summary>The amount of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStore { get; set; }
#nullable restore
#else
        public string MaterialsOnStore { get; set; }
#endif
        /// <summary>The quanity of the material currently on site.</summary>
        public double? MaterialsOnStoreQuantity { get; set; }
        /// <summary>The amount the material that is released in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreReleased { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreReleased { get; set; }
#endif
        /// <summary>The percentage the total amount of material to be retained.</summary>
        public double? MaterialsOnStoreRetentionPercent { get; set; }
        /// <summary>The unit of meaure of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreUnit { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreUnit { get; set; }
#endif
        /// <summary>The unit price of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreUnitPrice { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreUnitPrice { get; set; }
#endif
        /// <summary>The name of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The net amount that should be paid in this period, including work completed, material on site, retention and release.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetAmount { get; set; }
#nullable restore
#else
        public string NetAmount { get; set; }
#endif
        /// <summary>Foreign currency for netAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string NetAmountForeignCurrency { get; set; }
#endif
        /// <summary>The original amount of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalAmount { get; set; }
#nullable restore
#else
        public string OriginalAmount { get; set; }
#endif
        /// <summary>If this payment item came from Schedule of Value, the value is equal to Schedule of Value exchange rate; If this payment item came from SCO, the value is equal to SCO exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalExchangeRate { get; set; }
#nullable restore
#else
        public string OriginalExchangeRate { get; set; }
#endif
        /// <summary>The originalQuantity property</summary>
        public double? OriginalQuantity { get; set; }
        /// <summary>The original unit price of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalUnitPrice { get; set; }
#nullable restore
#else
        public string OriginalUnitPrice { get; set; }
#endif
        /// <summary>The ID of the parent item for sub items.</summary>
        public Guid? ParentId { get; set; }
        /// <summary>The ID of the payment the items belong to.</summary>
        public Guid? PaymentId { get; set; }
        /// <summary>The total amount that has been paid previously.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousAmount { get; set; }
#nullable restore
#else
        public string PreviousAmount { get; set; }
#endif
        /// <summary>Foreign currency for previousAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousAmountForeignCurrency { get; set; }
#endif
        /// <summary>The previous claimed work completed amount of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedAmount { get; set; }
#nullable restore
#else
        public string PreviousClaimedAmount { get; set; }
#endif
        /// <summary>The foreign currency for the previousClaimedAmount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedAmountForeignCurrency { get; set; }
#nullable restore
#else
        public string PreviousClaimedAmountForeignCurrency { get; set; }
#endif
        /// <summary>The previous claimed work completed qty of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedQuantity { get; set; }
#nullable restore
#else
        public string PreviousClaimedQuantity { get; set; }
#endif
        /// <summary>The previous claimed work completed unit price of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousClaimedUnitPrice { get; set; }
#nullable restore
#else
        public string PreviousClaimedUnitPrice { get; set; }
#endif
        /// <summary>Cost Pay Application exchange rate for previous billing period. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousExchangeRate { get; set; }
#nullable restore
#else
        public string PreviousExchangeRate { get; set; }
#endif
        /// <summary>The amount of the material billed in last payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsBilled { get; set; }
#nullable restore
#else
        public string PreviousMaterialsBilled { get; set; }
#endif
        /// <summary>The foreign currency for the previousMaterialsBilled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsBilledCurrency { get; set; }
#nullable restore
#else
        public string PreviousMaterialsBilledCurrency { get; set; }
#endif
        /// <summary>The amount of the material on site in last payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousMaterialsOnStore { get; set; }
#nullable restore
#else
        public string PreviousMaterialsOnStore { get; set; }
#endif
        /// <summary>The total quantity that has been paid previously.</summary>
        public double? PreviousQuantity { get; set; }
        /// <summary>The average unit price that has been paid previously.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousUnitPrice { get; set; }
#nullable restore
#else
        public string PreviousUnitPrice { get; set; }
#endif
        /// <summary>The actual quantity of payment item in this payment.</summary>
        public double? Quantity { get; set; }
        /// <summary>netAmountForeignCurrency / originalExchangeRate - netAmount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RealizedGainOrLoss { get; set; }
#nullable restore
#else
        public string RealizedGainOrLoss { get; set; }
#endif
        /// <summary>The status the item that is reviewed in this payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The unit of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>The actual quantity of payment item in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.PaymentItem"/> and sets the default values.
        /// </summary>
        public PaymentItem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.PaymentItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.PaymentItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.PaymentItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aggregateBy", n => { AggregateBy = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentItem_aggregateBy>(); } },
                { "amount", n => { Amount = n.GetStringValue(); } },
                { "associationId", n => { AssociationId = n.GetGuidValue(); } },
                { "associationType", n => { AssociationType = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentItem_associationType>(); } },
                { "budgetId", n => { BudgetId = n.GetGuidValue(); } },
                { "canDelete", n => { CanDelete = n.GetBoolValue(); } },
                { "changedBy", n => { ChangedBy = n.GetStringValue(); } },
                { "claimedAmount", n => { ClaimedAmount = n.GetStringValue(); } },
                { "claimedQuantity", n => { ClaimedQuantity = n.GetStringValue(); } },
                { "claimedUnitPrice", n => { ClaimedUnitPrice = n.GetStringValue(); } },
                { "completedWorkReleased", n => { CompletedWorkReleased = n.GetStringValue(); } },
                { "completedWorkRetentionPercent", n => { CompletedWorkRetentionPercent = n.GetDoubleValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "creatorId", n => { CreatorId = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "exchangeRate", n => { ExchangeRate = n.GetStringValue(); } },
                { "hasComment", n => { HasComment = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isPrivate", n => { IsPrivate = n.GetBoolValue(); } },
                { "lastReviewedBy", n => { LastReviewedBy = n.GetStringValue(); } },
                { "materialsBilled", n => { MaterialsBilled = n.GetStringValue(); } },
                { "materialsBilledQuantity", n => { MaterialsBilledQuantity = n.GetDoubleValue(); } },
                { "materialsBilledUnit", n => { MaterialsBilledUnit = n.GetStringValue(); } },
                { "materialsBilledUnitPrice", n => { MaterialsBilledUnitPrice = n.GetStringValue(); } },
                { "materialsOnStore", n => { MaterialsOnStore = n.GetStringValue(); } },
                { "materialsOnStoreQuantity", n => { MaterialsOnStoreQuantity = n.GetDoubleValue(); } },
                { "materialsOnStoreReleased", n => { MaterialsOnStoreReleased = n.GetStringValue(); } },
                { "materialsOnStoreRetentionPercent", n => { MaterialsOnStoreRetentionPercent = n.GetDoubleValue(); } },
                { "materialsOnStoreUnit", n => { MaterialsOnStoreUnit = n.GetStringValue(); } },
                { "materialsOnStoreUnitPrice", n => { MaterialsOnStoreUnitPrice = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "netAmount", n => { NetAmount = n.GetStringValue(); } },
                { "netAmountForeignCurrency", n => { NetAmountForeignCurrency = n.GetStringValue(); } },
                { "originalAmount", n => { OriginalAmount = n.GetStringValue(); } },
                { "originalExchangeRate", n => { OriginalExchangeRate = n.GetStringValue(); } },
                { "originalQuantity", n => { OriginalQuantity = n.GetDoubleValue(); } },
                { "originalUnitPrice", n => { OriginalUnitPrice = n.GetStringValue(); } },
                { "parentId", n => { ParentId = n.GetGuidValue(); } },
                { "paymentId", n => { PaymentId = n.GetGuidValue(); } },
                { "previousAmount", n => { PreviousAmount = n.GetStringValue(); } },
                { "previousAmountForeignCurrency", n => { PreviousAmountForeignCurrency = n.GetStringValue(); } },
                { "previousClaimedAmount", n => { PreviousClaimedAmount = n.GetStringValue(); } },
                { "previousClaimedAmountForeignCurrency", n => { PreviousClaimedAmountForeignCurrency = n.GetStringValue(); } },
                { "previousClaimedQuantity", n => { PreviousClaimedQuantity = n.GetStringValue(); } },
                { "previousClaimedUnitPrice", n => { PreviousClaimedUnitPrice = n.GetStringValue(); } },
                { "previousExchangeRate", n => { PreviousExchangeRate = n.GetStringValue(); } },
                { "previousMaterialsBilled", n => { PreviousMaterialsBilled = n.GetStringValue(); } },
                { "previousMaterialsBilledCurrency", n => { PreviousMaterialsBilledCurrency = n.GetStringValue(); } },
                { "previousMaterialsOnStore", n => { PreviousMaterialsOnStore = n.GetStringValue(); } },
                { "previousQuantity", n => { PreviousQuantity = n.GetDoubleValue(); } },
                { "previousUnitPrice", n => { PreviousUnitPrice = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "realizedGainOrLoss", n => { RealizedGainOrLoss = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "unit", n => { Unit = n.GetStringValue(); } },
                { "unitPrice", n => { UnitPrice = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentItem_aggregateBy>("aggregateBy", AggregateBy);
            writer.WriteStringValue("amount", Amount);
            writer.WriteGuidValue("associationId", AssociationId);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentItem_associationType>("associationType", AssociationType);
            writer.WriteGuidValue("budgetId", BudgetId);
            writer.WriteBoolValue("canDelete", CanDelete);
            writer.WriteStringValue("changedBy", ChangedBy);
            writer.WriteStringValue("claimedAmount", ClaimedAmount);
            writer.WriteStringValue("claimedQuantity", ClaimedQuantity);
            writer.WriteStringValue("claimedUnitPrice", ClaimedUnitPrice);
            writer.WriteStringValue("completedWorkReleased", CompletedWorkReleased);
            writer.WriteDoubleValue("completedWorkRetentionPercent", CompletedWorkRetentionPercent);
            writer.WriteStringValue("creatorId", CreatorId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("exchangeRate", ExchangeRate);
            writer.WriteBoolValue("hasComment", HasComment);
            writer.WriteBoolValue("isPrivate", IsPrivate);
            writer.WriteStringValue("lastReviewedBy", LastReviewedBy);
            writer.WriteStringValue("materialsBilled", MaterialsBilled);
            writer.WriteDoubleValue("materialsBilledQuantity", MaterialsBilledQuantity);
            writer.WriteStringValue("materialsBilledUnit", MaterialsBilledUnit);
            writer.WriteStringValue("materialsBilledUnitPrice", MaterialsBilledUnitPrice);
            writer.WriteStringValue("materialsOnStore", MaterialsOnStore);
            writer.WriteDoubleValue("materialsOnStoreQuantity", MaterialsOnStoreQuantity);
            writer.WriteStringValue("materialsOnStoreReleased", MaterialsOnStoreReleased);
            writer.WriteDoubleValue("materialsOnStoreRetentionPercent", MaterialsOnStoreRetentionPercent);
            writer.WriteStringValue("materialsOnStoreUnit", MaterialsOnStoreUnit);
            writer.WriteStringValue("materialsOnStoreUnitPrice", MaterialsOnStoreUnitPrice);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("netAmount", NetAmount);
            writer.WriteStringValue("netAmountForeignCurrency", NetAmountForeignCurrency);
            writer.WriteStringValue("originalAmount", OriginalAmount);
            writer.WriteStringValue("originalExchangeRate", OriginalExchangeRate);
            writer.WriteDoubleValue("originalQuantity", OriginalQuantity);
            writer.WriteStringValue("originalUnitPrice", OriginalUnitPrice);
            writer.WriteGuidValue("parentId", ParentId);
            writer.WriteGuidValue("paymentId", PaymentId);
            writer.WriteStringValue("previousAmount", PreviousAmount);
            writer.WriteStringValue("previousAmountForeignCurrency", PreviousAmountForeignCurrency);
            writer.WriteStringValue("previousClaimedAmount", PreviousClaimedAmount);
            writer.WriteStringValue("previousClaimedAmountForeignCurrency", PreviousClaimedAmountForeignCurrency);
            writer.WriteStringValue("previousClaimedQuantity", PreviousClaimedQuantity);
            writer.WriteStringValue("previousClaimedUnitPrice", PreviousClaimedUnitPrice);
            writer.WriteStringValue("previousExchangeRate", PreviousExchangeRate);
            writer.WriteStringValue("previousMaterialsBilled", PreviousMaterialsBilled);
            writer.WriteStringValue("previousMaterialsBilledCurrency", PreviousMaterialsBilledCurrency);
            writer.WriteStringValue("previousMaterialsOnStore", PreviousMaterialsOnStore);
            writer.WriteDoubleValue("previousQuantity", PreviousQuantity);
            writer.WriteStringValue("previousUnitPrice", PreviousUnitPrice);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteStringValue("realizedGainOrLoss", RealizedGainOrLoss);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

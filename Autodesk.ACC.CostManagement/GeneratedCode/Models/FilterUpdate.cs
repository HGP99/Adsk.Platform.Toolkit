// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class FilterUpdate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The columnsState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ColumnState>? ColumnsState { get; set; }
#nullable restore
#else
        public List<ColumnState> ColumnsState { get; set; }
#endif
        /// <summary>The filters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FilterExpression>? Filters { get; set; }
#nullable restore
#else
        public List<FilterExpression> Filters { get; set; }
#endif
        /// <summary>The default saved view.</summary>
        public bool? IsDefault { get; set; }
        /// <summary>The flag of saved view .</summary>
        public bool? IsPredefined { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The scope of filter to query.</summary>
        public FilterUpdate_scope? Scope { get; set; }
        /// <summary>The type property</summary>
        public FilterUpdate_type? Type { get; set; }
        /// <summary>The view state.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FilterUpdate_viewState? ViewState { get; set; }
#nullable restore
#else
        public FilterUpdate_viewState ViewState { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FilterUpdate"/> and sets the default values.
        /// </summary>
        public FilterUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FilterUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FilterUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FilterUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"columnsState", n => { ColumnsState = n.GetCollectionOfObjectValues<ColumnState>(ColumnState.CreateFromDiscriminatorValue)?.ToList(); } },
                {"filters", n => { Filters = n.GetCollectionOfObjectValues<FilterExpression>(FilterExpression.CreateFromDiscriminatorValue)?.ToList(); } },
                {"isDefault", n => { IsDefault = n.GetBoolValue(); } },
                {"isPredefined", n => { IsPredefined = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"scope", n => { Scope = n.GetEnumValue<FilterUpdate_scope>(); } },
                {"type", n => { Type = n.GetEnumValue<FilterUpdate_type>(); } },
                {"viewState", n => { ViewState = n.GetObjectValue<FilterUpdate_viewState>(FilterUpdate_viewState.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ColumnState>("columnsState", ColumnsState);
            writer.WriteCollectionOfObjectValues<FilterExpression>("filters", Filters);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteBoolValue("isPredefined", IsPredefined);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<FilterUpdate_scope>("scope", Scope);
            writer.WriteEnumValue<FilterUpdate_type>("type", Type);
            writer.WriteObjectValue<FilterUpdate_viewState>("viewState", ViewState);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class ActualCost : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of the actual cost.</summary>
        public double? Amount { get; set; }
        /// <summary>ID of the Budget to which the actual cost belongs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BudgetId { get; set; }
#nullable restore
#else
        public string BudgetId { get; set; }
#endif
        /// <summary>The object ID of the item with which the actions are associated a actual cost for example.</summary>
        public Guid? ContractId { get; set; }
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>Exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>The ID of the item in its original external system. You can use this ID to track the source of truth or to look up the data in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>A description about the integration: success, failure or error message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalMessage { get; set; }
#nullable restore
#else
        public string ExternalMessage { get; set; }
#endif
        /// <summary>The name of the external system. You can use this name to track the source of truth or to search in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalSystem { get; set; }
#nullable restore
#else
        public string ExternalSystem { get; set; }
#endif
        /// <summary>Total amount of the forecast cost to complete, equals to ``forecastFinalCost`` - ``actualCost``.</summary>
        public double? ForecastCostComplete { get; set; }
        /// <summary>Total amount of the project cost including forecast adjustments, equals to ``projectedCost`` + ``adjustmentsTotal``.</summary>
        public double? ForecastFinalCost { get; set; }
        /// <summary>Total amount of the forecast variance, equals to ``projectedBudget`` - ``forecastFinalCost``.</summary>
        public double? ForecastVariance { get; set; }
        /// <summary>ID of the actual cost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The date and time when the item was last updated.</summary>
        public DateTimeOffset? LastSyncTime { get; private set; }
        /// <summary>Name of the actual cost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Exchange rate get from contract exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalExchangeRate { get; set; }
#nullable restore
#else
        public string OriginalExchangeRate { get; set; }
#endif
        /// <summary>Total amount of the project budget including pending changes, equals to ``revised`` + ``pendingOwnerChanges``.</summary>
        public double? ProjectedBudget { get; set; }
        /// <summary>Total amount of the project cost. For a budget, it is equal to ``originalCommitment`` + ``approvedChangeOrders`` + ``pendingChangeOrders`` + ``reserves``. For a contract , it is equal to ``awarded`` + ``approvedChangeOrders`` + ``pendingChangeOrders`` + ``reserves``.</summary>
        public double? ProjectedCost { get; set; }
        /// <summary>Quantity of labor, material,... planned for a actual cost.</summary>
        public double? Quantity { get; set; }
        /// <summary>amount * exchangeRate / originalExchangeRate - amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RealizedGainOrLoss { get; set; }
#nullable restore
#else
        public string RealizedGainOrLoss { get; set; }
#endif
        /// <summary>Total amount of the approved budget from the owner, equals to ``originalAmount`` + ``internalAdjustment`` + ``approvedOwnerChanges``.</summary>
        public double? Revised { get; set; }
        /// <summary>The amount that has been approved by owner but not committed to the supplier: equals to ``approvedOwnerChanges`` - (``approvedChangeOrders`` - ``approvedInScopeChangeOrders``).</summary>
        public double? Uncommitted { get; set; }
        /// <summary>Unit of measures used in the actual cost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>Unit price of a actual cost.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>Total amount of the variance of a budget, equals to ``projectedBudget`` - ``projectedCost``.</summary>
        public double? VarianceTotal { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.ActualCost"/> and sets the default values.
        /// </summary>
        public ActualCost()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.ActualCost"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.ActualCost CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.ActualCost();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "budgetId", n => { BudgetId = n.GetStringValue(); } },
                { "contractId", n => { ContractId = n.GetGuidValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "exchangeRate", n => { ExchangeRate = n.GetStringValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "externalMessage", n => { ExternalMessage = n.GetStringValue(); } },
                { "externalSystem", n => { ExternalSystem = n.GetStringValue(); } },
                { "forecastCostComplete", n => { ForecastCostComplete = n.GetDoubleValue(); } },
                { "forecastFinalCost", n => { ForecastFinalCost = n.GetDoubleValue(); } },
                { "forecastVariance", n => { ForecastVariance = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "lastSyncTime", n => { LastSyncTime = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originalExchangeRate", n => { OriginalExchangeRate = n.GetStringValue(); } },
                { "projectedBudget", n => { ProjectedBudget = n.GetDoubleValue(); } },
                { "projectedCost", n => { ProjectedCost = n.GetDoubleValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "realizedGainOrLoss", n => { RealizedGainOrLoss = n.GetStringValue(); } },
                { "revised", n => { Revised = n.GetDoubleValue(); } },
                { "uncommitted", n => { Uncommitted = n.GetDoubleValue(); } },
                { "unit", n => { Unit = n.GetStringValue(); } },
                { "unitPrice", n => { UnitPrice = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "varianceTotal", n => { VarianceTotal = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("budgetId", BudgetId);
            writer.WriteGuidValue("contractId", ContractId);
            writer.WriteStringValue("exchangeRate", ExchangeRate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("externalMessage", ExternalMessage);
            writer.WriteStringValue("externalSystem", ExternalSystem);
            writer.WriteDoubleValue("forecastCostComplete", ForecastCostComplete);
            writer.WriteDoubleValue("forecastFinalCost", ForecastFinalCost);
            writer.WriteDoubleValue("forecastVariance", ForecastVariance);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originalExchangeRate", OriginalExchangeRate);
            writer.WriteDoubleValue("projectedBudget", ProjectedBudget);
            writer.WriteDoubleValue("projectedCost", ProjectedCost);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteStringValue("realizedGainOrLoss", RealizedGainOrLoss);
            writer.WriteDoubleValue("revised", Revised);
            writer.WriteDoubleValue("uncommitted", Uncommitted);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteDoubleValue("varianceTotal", VarianceTotal);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

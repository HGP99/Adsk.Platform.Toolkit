// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class ContractSync : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of contracts to be synced</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContractSync_current? Current { get; set; }
#nullable restore
#else
        public ContractSync_current Current { get; set; }
#endif
        /// <summary>A list of contracts to be deleted</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContractSync_deleted? Deleted { get; set; }
#nullable restore
#else
        public ContractSync_deleted Deleted { get; set; }
#endif
        /// <summary>Whether there are more contracts to sync.</summary>
        public bool? MoreData { get; set; }
        /// <summary>The token to send in the next sync request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextSyncToken { get; set; }
#nullable restore
#else
        public string NextSyncToken { get; set; }
#endif
        /// <summary>An optional param. if overwrite is returned, clients should delete all local copies of data in the project. Further syncing will then start from scratch.</summary>
        public bool? Overwrite { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ContractSync"/> and sets the default values.
        /// </summary>
        public ContractSync()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ContractSync"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ContractSync CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ContractSync();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"current", n => { Current = n.GetObjectValue<ContractSync_current>(ContractSync_current.CreateFromDiscriminatorValue); } },
                {"deleted", n => { Deleted = n.GetObjectValue<ContractSync_deleted>(ContractSync_deleted.CreateFromDiscriminatorValue); } },
                {"moreData", n => { MoreData = n.GetBoolValue(); } },
                {"nextSyncToken", n => { NextSyncToken = n.GetStringValue(); } },
                {"overwrite", n => { Overwrite = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ContractSync_current>("current", Current);
            writer.WriteObjectValue<ContractSync_deleted>("deleted", Deleted);
            writer.WriteBoolValue("moreData", MoreData);
            writer.WriteStringValue("nextSyncToken", NextSyncToken);
            writer.WriteBoolValue("overwrite", Overwrite);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

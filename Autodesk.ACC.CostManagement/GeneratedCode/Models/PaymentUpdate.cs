// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class PaymentUpdate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggregate type of the payment. Possible values: `workCompleted`, `workCompletedPercentage`.</summary>
        public global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_aggregateBy? AggregateBy { get; set; }
        /// <summary>The budget payment ID the cost payment is associated to.</summary>
        public Guid? BudgetPaymentId { get; set; }
        /// <summary>The detail description of this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Exchange rate. Default value is ``1``, if multi-currency is not enabled, it will also be ``1``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>The date and time determines which distribution period this payment belongs to, after set status to Approved or Paid.</summary>
        public DateTimeOffset? ForecastDistributionAt { get; private set; }
        /// <summary>Unique identifier of the payment.</summary>
        public Guid? Id { get; set; }
        /// <summary>Lock state used by ERP integration, default value is ``null``.</summary>
        public global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_integrationState? IntegrationState { get; set; }
        /// <summary>The name of this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Draftjs formatted rich text(https://draftjs.org/)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The date and time when the expense is paid.</summary>
        public DateTimeOffset? PaidAt { get; set; }
        /// <summary>The date and time when the payment is submitted.</summary>
        public DateTimeOffset? SubmittedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.PaymentUpdate"/> and sets the default values.
        /// </summary>
        public PaymentUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.PaymentUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.PaymentUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.PaymentUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aggregateBy", n => { AggregateBy = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_aggregateBy>(); } },
                { "budgetPaymentId", n => { BudgetPaymentId = n.GetGuidValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "exchangeRate", n => { ExchangeRate = n.GetStringValue(); } },
                { "forecastDistributionAt", n => { ForecastDistributionAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "integrationState", n => { IntegrationState = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_integrationState>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "paidAt", n => { PaidAt = n.GetDateTimeOffsetValue(); } },
                { "submittedAt", n => { SubmittedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_aggregateBy>("aggregateBy", AggregateBy);
            writer.WriteGuidValue("budgetPaymentId", BudgetPaymentId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("exchangeRate", ExchangeRate);
            writer.WriteGuidValue("id", Id);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.PaymentUpdate_integrationState>("integrationState", IntegrationState);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("note", Note);
            writer.WriteDateTimeOffsetValue("paidAt", PaidAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

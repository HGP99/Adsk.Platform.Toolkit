// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class TimeSheet : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The user who made the last change to the time sheet log. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChangedBy { get; private set; }
#nullable restore
#else
        public string ChangedBy { get; private set; }
#endif
        /// <summary>The unique identifier of the container to which the time sheet log belongs.</summary>
        public Guid? ContainerId { get; private set; }
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The user who created the time sheet log. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId { get; private set; }
#nullable restore
#else
        public string CreatorId { get; private set; }
#endif
        /// <summary>The end day of the time sheet log. Behaved as the logged date of the tracked input and output.</summary>
        public Date? EndDate { get; set; }
        /// <summary>The unique identifier of a time sheet log.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The input quantity of the time sheet log.</summary>
        public double? InputQuantity { get; set; }
        /// <summary>The output quantity of the time sheet log.</summary>
        public double? OutputQuantity { get; set; }
        /// <summary>The start day of the time sheet log.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The unique identifier of the tracking item instance to which the time sheet log belongs.</summary>
        public Guid? TrackingItemInstanceId { get; set; }
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="TimeSheet"/> and sets the default values.
        /// </summary>
        public TimeSheet()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TimeSheet"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeSheet CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeSheet();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"changedBy", n => { ChangedBy = n.GetStringValue(); } },
                {"containerId", n => { ContainerId = n.GetGuidValue(); } },
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"creatorId", n => { CreatorId = n.GetStringValue(); } },
                {"endDate", n => { EndDate = n.GetDateValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"inputQuantity", n => { InputQuantity = n.GetDoubleValue(); } },
                {"outputQuantity", n => { OutputQuantity = n.GetDoubleValue(); } },
                {"startDate", n => { StartDate = n.GetDateValue(); } },
                {"trackingItemInstanceId", n => { TrackingItemInstanceId = n.GetGuidValue(); } },
                {"updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateValue("endDate", EndDate);
            writer.WriteDoubleValue("inputQuantity", InputQuantity);
            writer.WriteDoubleValue("outputQuantity", OutputQuantity);
            writer.WriteDateValue("startDate", StartDate);
            writer.WriteGuidValue("trackingItemInstanceId", TrackingItemInstanceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

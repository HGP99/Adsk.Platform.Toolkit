// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    /// <summary>
    /// The segment composing the budget code. For example, ``Job Number``, ``CSI``, ``Cost Type``.
    /// </summary>
    public class SegmentCreate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The delimiter that follows the segment. Possible values are: ``none``, ``space``, ``point``, ``hyphen``, ``underscore``, ``tab``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Delimiter { get; set; }
#nullable restore
#else
        public string Delimiter { get; set; }
#endif
        /// <summary>The number of characters allowed in the segment.</summary>
        public double? Length { get; set; }
        /// <summary>The name of the budget code template.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The order of the segment in the budget code template.</summary>
        public double? Position { get; set; }
        /// <summary>A code sample for the segment used to demonstrate how the segment looks when displayed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SampleCode { get; set; }
#nullable restore
#else
        public string SampleCode { get; set; }
#endif
        /// <summary>The segment type. Possible values: ``code``, ``column``, or ``info``. Code segments are displayed as part of the budget code. Column segments are displayed in a separate column. Info segments are not displayed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="SegmentCreate"/> and sets the default values.
        /// </summary>
        public SegmentCreate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SegmentCreate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SegmentCreate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SegmentCreate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"delimiter", n => { Delimiter = n.GetStringValue(); } },
                {"length", n => { Length = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"position", n => { Position = n.GetDoubleValue(); } },
                {"sampleCode", n => { SampleCode = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("delimiter", Delimiter);
            writer.WriteDoubleValue("length", Length);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("position", Position);
            writer.WriteStringValue("sampleCode", SampleCode);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

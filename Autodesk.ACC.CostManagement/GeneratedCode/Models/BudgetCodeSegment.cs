// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class BudgetCodeSegment : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifier of the budget code segment.</summary>
        public Guid? Id { get; set; }
        /// <summary>Unique identifier of the segment.</summary>
        public Guid? SegmentId { get; set; }
        /// <summary>The code used in a segment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Autodesk.ACC.CostManagement.Models.SegmentValue? SegmentValue { get; set; }
#nullable restore
#else
        public Autodesk.ACC.CostManagement.Models.SegmentValue SegmentValue { get; set; }
#endif
        /// <summary>Unique identifier of the segment value.</summary>
        public Guid? SegmentValueId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="BudgetCodeSegment"/> and sets the default values.
        /// </summary>
        public BudgetCodeSegment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BudgetCodeSegment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BudgetCodeSegment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BudgetCodeSegment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"id", n => { Id = n.GetGuidValue(); } },
                {"segmentId", n => { SegmentId = n.GetGuidValue(); } },
                {"segmentValue", n => { SegmentValue = n.GetObjectValue<Autodesk.ACC.CostManagement.Models.SegmentValue>(Autodesk.ACC.CostManagement.Models.SegmentValue.CreateFromDiscriminatorValue); } },
                {"segmentValueId", n => { SegmentValueId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("id", Id);
            writer.WriteGuidValue("segmentId", SegmentId);
            writer.WriteObjectValue<Autodesk.ACC.CostManagement.Models.SegmentValue>("segmentValue", SegmentValue);
            writer.WriteGuidValue("segmentValueId", SegmentValueId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class BudgetUpdate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Total amount of actual cost of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActualCost { get; set; }
#nullable restore
#else
        public string ActualCost { get; set; }
#endif
        /// <summary>The planned start day of the item.</summary>
        public Date? ActualEndDate { get; set; }
        /// <summary>Actual quantity of labor, material,... planned for a budget.</summary>
        public double? ActualQuantity { get; set; }
        /// <summary>The actual start day of the item.</summary>
        public Date? ActualStartDate { get; set; }
        /// <summary>Actual unit price of a budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActualUnitPrice { get; set; }
#nullable restore
#else
        public string ActualUnitPrice { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique code compliant with the budget code template defined by the project admin. Ignored if ``segmentCodeMap`` is defined.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Detailed description of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The duration days of the item.</summary>
        public double? DurationDays { get; set; }
        /// <summary>The input quantity planned for the budget.</summary>
        public double? InputQuantity { get; set; }
        /// <summary>Lock state used by ERP integration, default value is ``null``.</summary>
        public BudgetUpdate_integrationState? IntegrationState { get; set; }
        /// <summary>The IDs of the locations have been selected and parents of selected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? LocationPaths { get; set; }
#nullable restore
#else
        public List<Guid?> LocationPaths { get; set; }
#endif
        /// <summary>The IDs of the locations have been selected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Locations { get; set; }
#nullable restore
#else
        public List<Guid?> Locations { get; set; }
#endif
        /// <summary>The locked budget item field. You can lock the budget item&apos;s amount (``originalAmount``), quantity (``quantity``), or unit cost (``unitPrice``) when calculating a budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockedField { get; set; }
#nullable restore
#else
        public string LockedField { get; set; }
#endif
        /// <summary>The ID of the milestone that the budget is linked to.</summary>
        public Guid? MilestoneId { get; set; }
        /// <summary>Name of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The planned end day of the item.</summary>
        public Date? PlannedEndDate { get; set; }
        /// <summary>The planned start day of the item.</summary>
        public Date? PlannedStartDate { get; set; }
        /// <summary>Quantity of labor, material,... planned for a budget.</summary>
        public double? Quantity { get; set; }
        /// <summary>Map of budget code segments to be used in the budget code, required when updating root budget code with variable length segment. Key is the budget code segment ID, value is the code for the segment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BudgetUpdate_segmentCodeMap? SegmentCodeMap { get; set; }
#nullable restore
#else
        public BudgetUpdate_segmentCodeMap SegmentCodeMap { get; set; }
#endif
        /// <summary>Unit of measures used in the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>Unit price of a budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="BudgetUpdate"/> and sets the default values.
        /// </summary>
        public BudgetUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BudgetUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BudgetUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BudgetUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"actualCost", n => { ActualCost = n.GetStringValue(); } },
                {"actualEndDate", n => { ActualEndDate = n.GetDateValue(); } },
                {"actualQuantity", n => { ActualQuantity = n.GetDoubleValue(); } },
                {"actualStartDate", n => { ActualStartDate = n.GetDateValue(); } },
                {"actualUnitPrice", n => { ActualUnitPrice = n.GetStringValue(); } },
                {"code", n => { Code = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"durationDays", n => { DurationDays = n.GetDoubleValue(); } },
                {"inputQuantity", n => { InputQuantity = n.GetDoubleValue(); } },
                {"integrationState", n => { IntegrationState = n.GetEnumValue<BudgetUpdate_integrationState>(); } },
                {"locationPaths", n => { LocationPaths = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"locations", n => { Locations = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"lockedField", n => { LockedField = n.GetStringValue(); } },
                {"milestoneId", n => { MilestoneId = n.GetGuidValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"plannedEndDate", n => { PlannedEndDate = n.GetDateValue(); } },
                {"plannedStartDate", n => { PlannedStartDate = n.GetDateValue(); } },
                {"quantity", n => { Quantity = n.GetDoubleValue(); } },
                {"segmentCodeMap", n => { SegmentCodeMap = n.GetObjectValue<BudgetUpdate_segmentCodeMap>(BudgetUpdate_segmentCodeMap.CreateFromDiscriminatorValue); } },
                {"unit", n => { Unit = n.GetStringValue(); } },
                {"unitPrice", n => { UnitPrice = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("actualCost", ActualCost);
            writer.WriteDateValue("actualEndDate", ActualEndDate);
            writer.WriteDoubleValue("actualQuantity", ActualQuantity);
            writer.WriteDateValue("actualStartDate", ActualStartDate);
            writer.WriteStringValue("actualUnitPrice", ActualUnitPrice);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("description", Description);
            writer.WriteDoubleValue("durationDays", DurationDays);
            writer.WriteDoubleValue("inputQuantity", InputQuantity);
            writer.WriteEnumValue<BudgetUpdate_integrationState>("integrationState", IntegrationState);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("locationPaths", LocationPaths);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("locations", Locations);
            writer.WriteStringValue("lockedField", LockedField);
            writer.WriteGuidValue("milestoneId", MilestoneId);
            writer.WriteStringValue("name", Name);
            writer.WriteDateValue("plannedEndDate", PlannedEndDate);
            writer.WriteDateValue("plannedStartDate", PlannedStartDate);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteObjectValue<BudgetUpdate_segmentCodeMap>("segmentCodeMap", SegmentCodeMap);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

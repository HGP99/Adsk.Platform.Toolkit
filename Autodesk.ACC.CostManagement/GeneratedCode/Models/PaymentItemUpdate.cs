// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class PaymentItemUpdate : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggregate type to budget Pay.</summary>
        public PaymentItemUpdate_aggregateBy? AggregateBy { get; set; }
        /// <summary>The actual amount of payment item in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>The claimed work completed amount of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedAmount { get; set; }
#nullable restore
#else
        public string ClaimedAmount { get; set; }
#endif
        /// <summary>The percentage of the claimed work completed in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedPercentage { get; set; }
#nullable restore
#else
        public string ClaimedPercentage { get; set; }
#endif
        /// <summary>The claimed work completed qty of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedQuantity { get; set; }
#nullable restore
#else
        public string ClaimedQuantity { get; set; }
#endif
        /// <summary>The claimed work completed unit price of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaimedUnitPrice { get; set; }
#nullable restore
#else
        public string ClaimedUnitPrice { get; set; }
#endif
        /// <summary>The amount that is released in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompletedWorkReleased { get; set; }
#nullable restore
#else
        public string CompletedWorkReleased { get; set; }
#endif
        /// <summary>The percentage the total amount of work to be retained.</summary>
        public double? CompletedWorkRetentionPercent { get; set; }
        /// <summary>The description of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The locked payment item field. You can lock the payment item&apos;s amount (``originalAmount``), quantity (``quantity``), or unit cost (``unitPrice``) when calculating a payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockedField { get; set; }
#nullable restore
#else
        public string LockedField { get; set; }
#endif
        /// <summary>The amount of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilled { get; set; }
#nullable restore
#else
        public string MaterialsBilled { get; set; }
#endif
        /// <summary>The quantity of the material currently billed.</summary>
        public double? MaterialsBilledQuantity { get; set; }
        /// <summary>The unit of measure of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilledUnit { get; set; }
#nullable restore
#else
        public string MaterialsBilledUnit { get; set; }
#endif
        /// <summary>The unit price of the material currently billed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsBilledUnitPrice { get; set; }
#nullable restore
#else
        public string MaterialsBilledUnitPrice { get; set; }
#endif
        /// <summary>The amount of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStore { get; set; }
#nullable restore
#else
        public string MaterialsOnStore { get; set; }
#endif
        /// <summary>The quantity of the material currently on site.</summary>
        public double? MaterialsOnStoreQuantity { get; set; }
        /// <summary>The amount the material that is released in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreReleased { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreReleased { get; set; }
#endif
        /// <summary>The percentage the total amount of material to be retained.</summary>
        public double? MaterialsOnStoreRetentionPercent { get; set; }
        /// <summary>The unit of measure of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreUnit { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreUnit { get; set; }
#endif
        /// <summary>The unit price of the material currently on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaterialsOnStoreUnitPrice { get; set; }
#nullable restore
#else
        public string MaterialsOnStoreUnitPrice { get; set; }
#endif
        /// <summary>The name of the payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The percentage of the work completed in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Percentage { get; set; }
#nullable restore
#else
        public string Percentage { get; set; }
#endif
        /// <summary>The actual quantity of payment item in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Quantity { get; set; }
#nullable restore
#else
        public string Quantity { get; set; }
#endif
        /// <summary>The status the item that is reviewed in this payment item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The actual unit price of payment item in this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PaymentItemUpdate"/> and sets the default values.
        /// </summary>
        public PaymentItemUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PaymentItemUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PaymentItemUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PaymentItemUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"aggregateBy", n => { AggregateBy = n.GetEnumValue<PaymentItemUpdate_aggregateBy>(); } },
                {"amount", n => { Amount = n.GetStringValue(); } },
                {"claimedAmount", n => { ClaimedAmount = n.GetStringValue(); } },
                {"claimedPercentage", n => { ClaimedPercentage = n.GetStringValue(); } },
                {"claimedQuantity", n => { ClaimedQuantity = n.GetStringValue(); } },
                {"claimedUnitPrice", n => { ClaimedUnitPrice = n.GetStringValue(); } },
                {"completedWorkReleased", n => { CompletedWorkReleased = n.GetStringValue(); } },
                {"completedWorkRetentionPercent", n => { CompletedWorkRetentionPercent = n.GetDoubleValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"lockedField", n => { LockedField = n.GetStringValue(); } },
                {"materialsBilled", n => { MaterialsBilled = n.GetStringValue(); } },
                {"materialsBilledQuantity", n => { MaterialsBilledQuantity = n.GetDoubleValue(); } },
                {"materialsBilledUnit", n => { MaterialsBilledUnit = n.GetStringValue(); } },
                {"materialsBilledUnitPrice", n => { MaterialsBilledUnitPrice = n.GetStringValue(); } },
                {"materialsOnStore", n => { MaterialsOnStore = n.GetStringValue(); } },
                {"materialsOnStoreQuantity", n => { MaterialsOnStoreQuantity = n.GetDoubleValue(); } },
                {"materialsOnStoreReleased", n => { MaterialsOnStoreReleased = n.GetStringValue(); } },
                {"materialsOnStoreRetentionPercent", n => { MaterialsOnStoreRetentionPercent = n.GetDoubleValue(); } },
                {"materialsOnStoreUnit", n => { MaterialsOnStoreUnit = n.GetStringValue(); } },
                {"materialsOnStoreUnitPrice", n => { MaterialsOnStoreUnitPrice = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"percentage", n => { Percentage = n.GetStringValue(); } },
                {"quantity", n => { Quantity = n.GetStringValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"unitPrice", n => { UnitPrice = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<PaymentItemUpdate_aggregateBy>("aggregateBy", AggregateBy);
            writer.WriteStringValue("amount", Amount);
            writer.WriteStringValue("claimedAmount", ClaimedAmount);
            writer.WriteStringValue("claimedPercentage", ClaimedPercentage);
            writer.WriteStringValue("claimedQuantity", ClaimedQuantity);
            writer.WriteStringValue("claimedUnitPrice", ClaimedUnitPrice);
            writer.WriteStringValue("completedWorkReleased", CompletedWorkReleased);
            writer.WriteDoubleValue("completedWorkRetentionPercent", CompletedWorkRetentionPercent);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("lockedField", LockedField);
            writer.WriteStringValue("materialsBilled", MaterialsBilled);
            writer.WriteDoubleValue("materialsBilledQuantity", MaterialsBilledQuantity);
            writer.WriteStringValue("materialsBilledUnit", MaterialsBilledUnit);
            writer.WriteStringValue("materialsBilledUnitPrice", MaterialsBilledUnitPrice);
            writer.WriteStringValue("materialsOnStore", MaterialsOnStore);
            writer.WriteDoubleValue("materialsOnStoreQuantity", MaterialsOnStoreQuantity);
            writer.WriteStringValue("materialsOnStoreReleased", MaterialsOnStoreReleased);
            writer.WriteDoubleValue("materialsOnStoreRetentionPercent", MaterialsOnStoreRetentionPercent);
            writer.WriteStringValue("materialsOnStoreUnit", MaterialsOnStoreUnit);
            writer.WriteStringValue("materialsOnStoreUnitPrice", MaterialsOnStoreUnitPrice);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("percentage", Percentage);
            writer.WriteStringValue("quantity", Quantity);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

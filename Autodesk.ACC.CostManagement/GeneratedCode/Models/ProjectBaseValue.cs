// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProjectBaseValue : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The containerId property</summary>
        public Guid? ContainerId { get; set; }
        /// <summary>The total amount of the approved owner changes in project.</summary>
        public double? TotalApprovedOwnerChanges { get; set; }
        /// <summary>The total amount of the contract awarded in project.</summary>
        public double? TotalAwardedContract { get; set; }
        /// <summary>The total amount of the budget in project.</summary>
        public double? TotalOriginalBudget { get; set; }
        /// <summary>The total amount of the pre submitted owner changes in project.</summary>
        public double? TotalPreSubmittedOwnerChanges { get; set; }
        /// <summary>The total amount of the submitted owner changes in project.</summary>
        public double? TotalSubmittedOwnerChanges { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.ProjectBaseValue"/> and sets the default values.
        /// </summary>
        public ProjectBaseValue()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.ProjectBaseValue"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.ProjectBaseValue CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.ProjectBaseValue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "containerId", n => { ContainerId = n.GetGuidValue(); } },
                { "totalApprovedOwnerChanges", n => { TotalApprovedOwnerChanges = n.GetDoubleValue(); } },
                { "totalAwardedContract", n => { TotalAwardedContract = n.GetDoubleValue(); } },
                { "totalOriginalBudget", n => { TotalOriginalBudget = n.GetDoubleValue(); } },
                { "totalPreSubmittedOwnerChanges", n => { TotalPreSubmittedOwnerChanges = n.GetDoubleValue(); } },
                { "totalSubmittedOwnerChanges", n => { TotalSubmittedOwnerChanges = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("containerId", ContainerId);
            writer.WriteDoubleValue("totalApprovedOwnerChanges", TotalApprovedOwnerChanges);
            writer.WriteDoubleValue("totalAwardedContract", TotalAwardedContract);
            writer.WriteDoubleValue("totalOriginalBudget", TotalOriginalBudget);
            writer.WriteDoubleValue("totalPreSubmittedOwnerChanges", TotalPreSubmittedOwnerChanges);
            writer.WriteDoubleValue("totalSubmittedOwnerChanges", TotalSubmittedOwnerChanges);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

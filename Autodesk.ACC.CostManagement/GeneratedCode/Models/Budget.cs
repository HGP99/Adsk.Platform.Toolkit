// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.CostManagement.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Budget : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Total amount of actual cost of the budget.</summary>
        public double? ActualCost { get; set; }
        /// <summary>The planned start day of the item.</summary>
        public Date? ActualEndDate { get; set; }
        /// <summary>Total of the actual quantity of labor, material,... for the budget.</summary>
        public double? ActualQuantity { get; set; }
        /// <summary>The actual start day of the item.</summary>
        public Date? ActualStartDate { get; set; }
        /// <summary>Average unit price for the actual cost of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActualUnitPrice { get; set; }
#nullable restore
#else
        public string ActualUnitPrice { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total amount of changes committed to the supplier.</summary>
        public double? ApprovedChangeOrders { get; set; }
        /// <summary>Total amount of in-scope changes committed to the supplier.</summary>
        public double? ApprovedInScopeChangeOrders { get; set; }
        /// <summary>Total amount of changes approved by the owner</summary>
        public double? ApprovedOwnerChanges { get; set; }
        /// <summary>Budget code template and budget segment codes used in the budget. Not applicable for sub-budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.CostManagement.Models.Budget_budgetCode? BudgetCode { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.CostManagement.Models.Budget_budgetCode BudgetCode { get; set; }
#endif
        /// <summary>Unique code compliant with the budget code template defined by the project admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was created, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The detail description of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The duration days of the item.</summary>
        public double? DurationDays { get; set; }
        /// <summary>The ID of the item in its original external system. You can use this ID to track the source of truth or to look up the data in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>A description about the integration: success, failure or error message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalMessage { get; set; }
#nullable restore
#else
        public string ExternalMessage { get; set; }
#endif
        /// <summary>The name of the external system. You can use this name to track the source of truth or to search in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalSystem { get; set; }
#nullable restore
#else
        public string ExternalSystem { get; set; }
#endif
        /// <summary>Total amount of the forecast cost to complete, equals to ``forecastFinalCost`` - ``actualCost``.</summary>
        public double? ForecastCostComplete { get; set; }
        /// <summary>Total amount of the project cost including forecast adjustments, equals to ``projectedCost`` + ``adjustmentsTotal``.</summary>
        public double? ForecastFinalCost { get; set; }
        /// <summary>Total amount of the forecast variance, equals to ``projectedBudget`` - ``forecastFinalCost``.</summary>
        public double? ForecastVariance { get; set; }
        /// <summary>Unique identifier of the budget.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The input quantity planned for the budget.</summary>
        public double? InputQuantity { get; set; }
        /// <summary>Lock state used by ERP integration, default value is ``null``.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Budget_integrationState? IntegrationState { get; set; }
        /// <summary>The date and time last locked this item.</summary>
        public DateTimeOffset? IntegrationStateChangedAt { get; set; }
        /// <summary>The user who last locked this item. This is the ID of a user managed by BIM 360 Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IntegrationStateChangedBy { get; set; }
#nullable restore
#else
        public string IntegrationStateChangedBy { get; set; }
#endif
        /// <summary>Amount of internal transfers between budgets</summary>
        public double? InternalAdjustment { get; set; }
        /// <summary>The date and time when the item was last updated.</summary>
        public DateTimeOffset? LastSyncTime { get; private set; }
        /// <summary>The IDs of the locations have been selected and parents of selected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? LocationPaths { get; set; }
#nullable restore
#else
        public List<Guid?> LocationPaths { get; set; }
#endif
        /// <summary>The IDs of the locations have been selected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Locations { get; set; }
#nullable restore
#else
        public List<Guid?> Locations { get; set; }
#endif
        /// <summary>ID of the Main Contract to which the budget belongs.</summary>
        public Guid? MainContractId { get; private set; }
        /// <summary>The ID of the milestone that the budget is linked to.</summary>
        public Guid? MilestoneId { get; set; }
        /// <summary>The name of the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Original amount of the budget, equals to ``quantity`` * ``unitPrice``</summary>
        public double? OriginalAmount { get; set; }
        /// <summary>The original amount committed in the supplier contract.</summary>
        public double? OriginalCommitment { get; set; }
        /// <summary>ID of a parent budget, ``null`` for root budgets.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentId { get; set; }
#nullable restore
#else
        public string ParentId { get; set; }
#endif
        /// <summary>Total amount of changes not committed to the supplier.</summary>
        public double? PendingChangeOrders { get; set; }
        /// <summary>Total amount of changes waiting for the approval by the owner</summary>
        public double? PendingOwnerChanges { get; set; }
        /// <summary>The planned end day of the item.</summary>
        public Date? PlannedEndDate { get; set; }
        /// <summary>The planned start day of the item.</summary>
        public Date? PlannedStartDate { get; set; }
        /// <summary>Total amount of the project budget including pending changes, equals to ``revised`` + ``pendingOwnerChanges``.</summary>
        public double? ProjectedBudget { get; set; }
        /// <summary>Total amount of the project cost. For a budget, it is equal to ``originalCommitment`` + ``approvedChangeOrders`` + ``pendingChangeOrders`` + ``reserves``. For a contract , it is equal to ``awarded`` + ``approvedChangeOrders`` + ``pendingChangeOrders`` + ``reserves``.</summary>
        public double? ProjectedCost { get; set; }
        /// <summary>The quantity of labor, material,... planned for the budget.</summary>
        public double? Quantity { get; set; }
        /// <summary>The ratio of the quantity the resources used on the budget.</summary>
        public double? Ratio { get; set; }
        /// <summary>Total amount of changes under estimation.</summary>
        public double? Reserves { get; set; }
        /// <summary>Total amount of the approved budget from the owner, equals to ``originalAmount`` + ``internalAdjustment`` + ``approvedOwnerChanges``.</summary>
        public double? Revised { get; set; }
        /// <summary>The scope of the budget. Possible values are ``budgetOnly`` and ``budgetAndCost``.</summary>
        public global::Autodesk.ACC.CostManagement.Models.Budget_scope? Scope { get; set; }
        /// <summary>The sub-budget in the root budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? SubItems { get; set; }
#nullable restore
#else
        public UntypedNode SubItems { get; set; }
#endif
        /// <summary>The amount that has been approved by owner but not committed to the supplier: equals to ``approvedOwnerChanges`` - (``approvedChangeOrders`` - ``approvedInScopeChangeOrders``).</summary>
        public double? Uncommitted { get; set; }
        /// <summary>Unit of measures used in the budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Unit { get; set; }
#nullable restore
#else
        public string Unit { get; set; }
#endif
        /// <summary>Unit price of a budget.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>The timestamp of the date and time the item was updated, in the following format: YYYY-MM-DDThh:mm:ss.sz.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>Total amount of the variance of a budget, equals to ``projectedBudget`` - ``projectedCost``.</summary>
        public double? VarianceTotal { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.CostManagement.Models.Budget"/> and sets the default values.
        /// </summary>
        public Budget()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.CostManagement.Models.Budget"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.CostManagement.Models.Budget CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.CostManagement.Models.Budget();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actualCost", n => { ActualCost = n.GetDoubleValue(); } },
                { "actualEndDate", n => { ActualEndDate = n.GetDateValue(); } },
                { "actualQuantity", n => { ActualQuantity = n.GetDoubleValue(); } },
                { "actualStartDate", n => { ActualStartDate = n.GetDateValue(); } },
                { "actualUnitPrice", n => { ActualUnitPrice = n.GetStringValue(); } },
                { "approvedChangeOrders", n => { ApprovedChangeOrders = n.GetDoubleValue(); } },
                { "approvedInScopeChangeOrders", n => { ApprovedInScopeChangeOrders = n.GetDoubleValue(); } },
                { "approvedOwnerChanges", n => { ApprovedOwnerChanges = n.GetDoubleValue(); } },
                { "budgetCode", n => { BudgetCode = n.GetObjectValue<global::Autodesk.ACC.CostManagement.Models.Budget_budgetCode>(global::Autodesk.ACC.CostManagement.Models.Budget_budgetCode.CreateFromDiscriminatorValue); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "durationDays", n => { DurationDays = n.GetDoubleValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "externalMessage", n => { ExternalMessage = n.GetStringValue(); } },
                { "externalSystem", n => { ExternalSystem = n.GetStringValue(); } },
                { "forecastCostComplete", n => { ForecastCostComplete = n.GetDoubleValue(); } },
                { "forecastFinalCost", n => { ForecastFinalCost = n.GetDoubleValue(); } },
                { "forecastVariance", n => { ForecastVariance = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "inputQuantity", n => { InputQuantity = n.GetDoubleValue(); } },
                { "integrationState", n => { IntegrationState = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Budget_integrationState>(); } },
                { "integrationStateChangedAt", n => { IntegrationStateChangedAt = n.GetDateTimeOffsetValue(); } },
                { "integrationStateChangedBy", n => { IntegrationStateChangedBy = n.GetStringValue(); } },
                { "internalAdjustment", n => { InternalAdjustment = n.GetDoubleValue(); } },
                { "lastSyncTime", n => { LastSyncTime = n.GetDateTimeOffsetValue(); } },
                { "locationPaths", n => { LocationPaths = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "locations", n => { Locations = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "mainContractId", n => { MainContractId = n.GetGuidValue(); } },
                { "milestoneId", n => { MilestoneId = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originalAmount", n => { OriginalAmount = n.GetDoubleValue(); } },
                { "originalCommitment", n => { OriginalCommitment = n.GetDoubleValue(); } },
                { "parentId", n => { ParentId = n.GetStringValue(); } },
                { "pendingChangeOrders", n => { PendingChangeOrders = n.GetDoubleValue(); } },
                { "pendingOwnerChanges", n => { PendingOwnerChanges = n.GetDoubleValue(); } },
                { "plannedEndDate", n => { PlannedEndDate = n.GetDateValue(); } },
                { "plannedStartDate", n => { PlannedStartDate = n.GetDateValue(); } },
                { "projectedBudget", n => { ProjectedBudget = n.GetDoubleValue(); } },
                { "projectedCost", n => { ProjectedCost = n.GetDoubleValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "ratio", n => { Ratio = n.GetDoubleValue(); } },
                { "reserves", n => { Reserves = n.GetDoubleValue(); } },
                { "revised", n => { Revised = n.GetDoubleValue(); } },
                { "scope", n => { Scope = n.GetEnumValue<global::Autodesk.ACC.CostManagement.Models.Budget_scope>(); } },
                { "subItems", n => { SubItems = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "uncommitted", n => { Uncommitted = n.GetDoubleValue(); } },
                { "unit", n => { Unit = n.GetStringValue(); } },
                { "unitPrice", n => { UnitPrice = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "varianceTotal", n => { VarianceTotal = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("actualCost", ActualCost);
            writer.WriteDateValue("actualEndDate", ActualEndDate);
            writer.WriteDoubleValue("actualQuantity", ActualQuantity);
            writer.WriteDateValue("actualStartDate", ActualStartDate);
            writer.WriteStringValue("actualUnitPrice", ActualUnitPrice);
            writer.WriteDoubleValue("approvedChangeOrders", ApprovedChangeOrders);
            writer.WriteDoubleValue("approvedInScopeChangeOrders", ApprovedInScopeChangeOrders);
            writer.WriteDoubleValue("approvedOwnerChanges", ApprovedOwnerChanges);
            writer.WriteObjectValue<global::Autodesk.ACC.CostManagement.Models.Budget_budgetCode>("budgetCode", BudgetCode);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("description", Description);
            writer.WriteDoubleValue("durationDays", DurationDays);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("externalMessage", ExternalMessage);
            writer.WriteStringValue("externalSystem", ExternalSystem);
            writer.WriteDoubleValue("forecastCostComplete", ForecastCostComplete);
            writer.WriteDoubleValue("forecastFinalCost", ForecastFinalCost);
            writer.WriteDoubleValue("forecastVariance", ForecastVariance);
            writer.WriteDoubleValue("inputQuantity", InputQuantity);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Budget_integrationState>("integrationState", IntegrationState);
            writer.WriteDateTimeOffsetValue("integrationStateChangedAt", IntegrationStateChangedAt);
            writer.WriteStringValue("integrationStateChangedBy", IntegrationStateChangedBy);
            writer.WriteDoubleValue("internalAdjustment", InternalAdjustment);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("locationPaths", LocationPaths);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("locations", Locations);
            writer.WriteGuidValue("milestoneId", MilestoneId);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("originalAmount", OriginalAmount);
            writer.WriteDoubleValue("originalCommitment", OriginalCommitment);
            writer.WriteStringValue("parentId", ParentId);
            writer.WriteDoubleValue("pendingChangeOrders", PendingChangeOrders);
            writer.WriteDoubleValue("pendingOwnerChanges", PendingOwnerChanges);
            writer.WriteDateValue("plannedEndDate", PlannedEndDate);
            writer.WriteDateValue("plannedStartDate", PlannedStartDate);
            writer.WriteDoubleValue("projectedBudget", ProjectedBudget);
            writer.WriteDoubleValue("projectedCost", ProjectedCost);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteDoubleValue("ratio", Ratio);
            writer.WriteDoubleValue("reserves", Reserves);
            writer.WriteDoubleValue("revised", Revised);
            writer.WriteEnumValue<global::Autodesk.ACC.CostManagement.Models.Budget_scope>("scope", Scope);
            writer.WriteObjectValue<UntypedNode>("subItems", SubItems);
            writer.WriteDoubleValue("uncommitted", Uncommitted);
            writer.WriteStringValue("unit", Unit);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteDoubleValue("varianceTotal", VarianceTotal);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

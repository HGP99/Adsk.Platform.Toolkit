// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class MainContract : IAdditionalDataHolder, IParsable 
    {
        /// <summary>The actual completion date of the mainContract.</summary>
        public Date? ActualCompletionDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total amount of the mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; private set; }
#nullable restore
#else
        public string Amount { get; private set; }
#endif
        /// <summary>The user who made the last change to the mainContract. This is the ID of a user managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChangedBy { get; private set; }
#nullable restore
#else
        public string ChangedBy { get; private set; }
#endif
        /// <summary>The close date of the mainContract.</summary>
        public Date? CloseDate { get; set; }
        /// <summary>The code of the mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Default contact of the supplier. This is the ID of a user managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>The general contractor company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractorCompanyId { get; set; }
#nullable restore
#else
        public string ContractorCompanyId { get; set; }
#endif
        /// <summary>The date and time when the mainContract was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The user who created the mainContract. This is the ID of a user managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId { get; private set; }
#nullable restore
#else
        public string CreatorId { get; private set; }
#endif
        /// <summary>Detailed description of a mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The executed date of the mainContract.</summary>
        public Date? ExecutedDate { get; set; }
        /// <summary>The ID of the item in its original external system. You can use this ID to track the source of truth or to look up the data in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>A description about the integration: success, failure or error message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalMessage { get; set; }
#nullable restore
#else
        public string ExternalMessage { get; set; }
#endif
        /// <summary>The name of the external system. You can use this name to track the source of truth or to search in an integrated system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalSystem { get; set; }
#nullable restore
#else
        public string ExternalSystem { get; set; }
#endif
        /// <summary>Unique identifier of the mainContract. If not present, the system will generate one automatically.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Indicate whether mainContract is default or not.</summary>
        public bool? IsDefault { get; set; }
        /// <summary>The date and time when the item was last updated.</summary>
        public DateTimeOffset? LastSyncTime { get; private set; }
        /// <summary>The name of the mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Note to the mainContract. This is a Draftjs formatted rich text (https://draftjs.org/).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The owner company id. This is the ID of a company managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerCompanyId { get; set; }
#nullable restore
#else
        public string OwnerCompanyId { get; set; }
#endif
        /// <summary>The total amount of mainContract that has been paid previously.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Paid { get; private set; }
#nullable restore
#else
        public string Paid { get; private set; }
#endif
        /// <summary>The payment due days of the main contract.</summary>
        public int? PaymentDue { get; set; }
        /// <summary>The payment due days relative to date of the main contract.</summary>
        public MainContract_paymentDueType? PaymentDueType { get; set; }
        /// <summary>The planned completion date of the mainContract.</summary>
        public Date? PlannedCompletionDate { get; set; }
        /// <summary>Total retention percentage of the main contract amount.</summary>
        public double? RetentionCap { get; set; }
        /// <summary>Scope signed by all parties of the mainContract. This is a Draftjs formatted rich text (https://draftjs.org/).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScopeOfWork { get; set; }
#nullable restore
#else
        public string ScopeOfWork { get; set; }
#endif
        /// <summary>The user who signed the mainContract. This is the ID of a user managed by BIM360/ACC Admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SignedBy { get; set; }
#nullable restore
#else
        public string SignedBy { get; set; }
#endif
        /// <summary>The start date of the mainContract.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The status of this mainContract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Type of the mainContract. For example, Fixed Price or Unit Price. Type is customizable by the project admin.</summary>
        public MainContract_type? Type { get; set; }
        /// <summary>The total of the amount that are approved but not paid.</summary>
        public int? UnReceived { get; set; }
        /// <summary>The date and time when the mainContract was last updated.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="MainContract"/> and sets the default values.
        /// </summary>
        public MainContract()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="MainContract"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MainContract CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MainContract();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"actualCompletionDate", n => { ActualCompletionDate = n.GetDateValue(); } },
                {"amount", n => { Amount = n.GetStringValue(); } },
                {"changedBy", n => { ChangedBy = n.GetStringValue(); } },
                {"closeDate", n => { CloseDate = n.GetDateValue(); } },
                {"code", n => { Code = n.GetStringValue(); } },
                {"contactId", n => { ContactId = n.GetStringValue(); } },
                {"contractorCompanyId", n => { ContractorCompanyId = n.GetStringValue(); } },
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"creatorId", n => { CreatorId = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"executedDate", n => { ExecutedDate = n.GetDateValue(); } },
                {"externalId", n => { ExternalId = n.GetStringValue(); } },
                {"externalMessage", n => { ExternalMessage = n.GetStringValue(); } },
                {"externalSystem", n => { ExternalSystem = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isDefault", n => { IsDefault = n.GetBoolValue(); } },
                {"lastSyncTime", n => { LastSyncTime = n.GetDateTimeOffsetValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"note", n => { Note = n.GetStringValue(); } },
                {"ownerCompanyId", n => { OwnerCompanyId = n.GetStringValue(); } },
                {"paid", n => { Paid = n.GetStringValue(); } },
                {"paymentDue", n => { PaymentDue = n.GetIntValue(); } },
                {"paymentDueType", n => { PaymentDueType = n.GetEnumValue<MainContract_paymentDueType>(); } },
                {"plannedCompletionDate", n => { PlannedCompletionDate = n.GetDateValue(); } },
                {"retentionCap", n => { RetentionCap = n.GetDoubleValue(); } },
                {"scopeOfWork", n => { ScopeOfWork = n.GetStringValue(); } },
                {"signedBy", n => { SignedBy = n.GetStringValue(); } },
                {"startDate", n => { StartDate = n.GetDateValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<MainContract_type>(); } },
                {"unReceived", n => { UnReceived = n.GetIntValue(); } },
                {"updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateValue("actualCompletionDate", ActualCompletionDate);
            writer.WriteDateValue("closeDate", CloseDate);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("contractorCompanyId", ContractorCompanyId);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("executedDate", ExecutedDate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("externalMessage", ExternalMessage);
            writer.WriteStringValue("externalSystem", ExternalSystem);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("ownerCompanyId", OwnerCompanyId);
            writer.WriteIntValue("paymentDue", PaymentDue);
            writer.WriteEnumValue<MainContract_paymentDueType>("paymentDueType", PaymentDueType);
            writer.WriteDateValue("plannedCompletionDate", PlannedCompletionDate);
            writer.WriteDoubleValue("retentionCap", RetentionCap);
            writer.WriteStringValue("scopeOfWork", ScopeOfWork);
            writer.WriteStringValue("signedBy", SignedBy);
            writer.WriteDateValue("startDate", StartDate);
            writer.WriteStringValue("status", Status);
            writer.WriteEnumValue<MainContract_type>("type", Type);
            writer.WriteIntValue("unReceived", UnReceived);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

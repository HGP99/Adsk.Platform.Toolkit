// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.CostManagement.Models {
    public class PropertyDefinition : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A true/false flag to indicate whether this is a pre-defined attribute or not.</summary>
        public bool? BuiltIn { get; set; }
        /// <summary>The module name: Budget, Contract, PCO, or CostItem, RCO. This is deprecated in favor of associationId and associationType.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>Default value of the attribute definition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultValue { get; set; }
#nullable restore
#else
        public string DefaultValue { get; set; }
#endif
        /// <summary>A true/false flag to indicate whether this attribute should be shown in the BIM 360 Cost Management or generated documents by default.</summary>
        public bool? DefaultVisibility { get; set; }
        /// <summary>Unique identifier (UUID) of the attribute definition.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Name of a attribute definition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>List of items for an ``options`` type attribute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Options { get; set; }
#nullable restore
#else
        public UntypedNode Options { get; set; }
#endif
        /// <summary>The position of the attribute definition as displayed in BIM 360 Cost Management.</summary>
        public double? Position { get; set; }
        /// <summary>Type of the attribute definition.</summary>
        public PropertyDefinition_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="PropertyDefinition"/> and sets the default values.
        /// </summary>
        public PropertyDefinition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PropertyDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PropertyDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PropertyDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"builtIn", n => { BuiltIn = n.GetBoolValue(); } },
                {"category", n => { Category = n.GetStringValue(); } },
                {"defaultValue", n => { DefaultValue = n.GetStringValue(); } },
                {"defaultVisibility", n => { DefaultVisibility = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"options", n => { Options = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                {"position", n => { Position = n.GetDoubleValue(); } },
                {"type", n => { Type = n.GetEnumValue<PropertyDefinition_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("builtIn", BuiltIn);
            writer.WriteStringValue("category", Category);
            writer.WriteStringValue("defaultValue", DefaultValue);
            writer.WriteBoolValue("defaultVisibility", DefaultVisibility);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<UntypedNode>("options", Options);
            writer.WriteDoubleValue("position", Position);
            writer.WriteEnumValue<PropertyDefinition_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

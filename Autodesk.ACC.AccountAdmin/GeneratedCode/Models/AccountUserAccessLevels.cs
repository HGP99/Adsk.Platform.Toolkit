// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.AccountAdmin.Models {
    /// <summary>
    /// Flags indicating the users access levels in the account
    /// </summary>
    public class AccountUserAccessLevels : IParsable {
        /// <summary>Indicates the user is an account admin in the account</summary>
        public bool? AccountAdmin { get; set; }
        /// <summary>Indicates the user is a project admin for at least 1 active acsUnified project in the account</summary>
        public bool? AcsProjectAdmin { get; set; }
        /// <summary>Indicates the user is an executive in the account</summary>
        public bool? Executive { get; set; }
        /// <summary>Indicates the user has been added to the member directory for the account but is not an admin or executive and is not participating in any active projects</summary>
        public bool? NoAccess { get; private set; }
        /// <summary>Indicates the user is a project admin for at least 1 active project</summary>
        public bool? ProjectAdmin { get; private set; }
        /// <summary>Indicates the user is participating in at least 1 active project in which they are not an admin</summary>
        public bool? ProjectMember { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AccountUserAccessLevels CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AccountUserAccessLevels();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accountAdmin", n => { AccountAdmin = n.GetBoolValue(); } },
                {"acsProjectAdmin", n => { AcsProjectAdmin = n.GetBoolValue(); } },
                {"executive", n => { Executive = n.GetBoolValue(); } },
                {"noAccess", n => { NoAccess = n.GetBoolValue(); } },
                {"projectAdmin", n => { ProjectAdmin = n.GetBoolValue(); } },
                {"projectMember", n => { ProjectMember = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accountAdmin", AccountAdmin);
            writer.WriteBoolValue("acsProjectAdmin", AcsProjectAdmin);
            writer.WriteBoolValue("executive", Executive);
        }
    }
}

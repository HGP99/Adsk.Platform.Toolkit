// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Projects : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The url of the icon related to this service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The key of the product. Valid values are `assets`, `autoSpecs`, `build`, `capitalPlanning`, `cost`, `costManagement`, `designCollaboration`, `docs`, `documentManagement`, `field`, `fieldManagement`, `financials`, `glue`, `workshopxr`, `insight`, `modelCoordination`, `plan`, `projectAdministration`, `projectHome`, `projectManagement`, `quantification`, `takeoff`.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Projects_key? Key { get; set; }
        /// <summary>The language for the project. Only valid on the `field` service.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Projects_language? Language { get; set; }
        /// <summary>The name for the product.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The status of the product in the project. Valid values are `activating`, `activationFailed`, `active`, `available`, `deactivating`, `deactivationFailed` and `inactive`.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Projects_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Models.Projects"/> and sets the default values.
        /// </summary>
        public Projects()
        {
            Language = global::Autodesk.ACC.AccountAdmin.Models.Projects_language.En;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Models.Projects"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Models.Projects CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Models.Projects();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "icon", n => { Icon = n.GetStringValue(); } },
                { "key", n => { Key = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_key>(); } },
                { "language", n => { Language = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_language>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("icon", Icon);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_key>("key", Key);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_language>("language", Language);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Projects_status>("status", Status);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Models
{
    /// <summary>
    /// Project user information.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ProjectUserResponse : global::Autodesk.ACC.AccountAdmin.Models.BaseUser, IParsable
    {
        /// <summary>Flags indicating the users access levels in the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_accessLevels? AccessLevels { get; private set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_accessLevels AccessLevels { get; private set; }
#endif
        /// <summary>The timestamp of when this user was first given access to any service on this project.</summary>
        public DateTimeOffset? AddedOn { get; private set; }
        /// <summary>The identifier of the company the user is representing in the project. This identifier does not apply to classic glue, plan, and field</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? CompanyId { get; set; }
#nullable restore
#else
        public UntypedNode CompanyId { get; set; }
#endif
        /// <summary>The products property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.AccountAdmin.Models.Users>? Products { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.AccountAdmin.Models.Users> Products { get; set; }
#endif
        /// <summary>The list of role ids the user belongs to in the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? RoleIds { get; set; }
#nullable restore
#else
        public List<Guid?> RoleIds { get; set; }
#endif
        /// <summary>Flags indicating which services the user can access.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_services>? Services { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_services> Services { get; set; }
#endif
        /// <summary>The status of this user on the account.  Valid values are `active`, `pending`, `disabled`, and `deleted`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; private set; }
#nullable restore
#else
        public string Status { get; private set; }
#endif
        /// <summary>The timestamp when the project user was last updated.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessLevels", n => { AccessLevels = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_accessLevels>(global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_accessLevels.CreateFromDiscriminatorValue); } },
                { "addedOn", n => { AddedOn = n.GetDateTimeOffsetValue(); } },
                { "companyId", n => { CompanyId = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "products", n => { Products = n.GetCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Users>(global::Autodesk.ACC.AccountAdmin.Models.Users.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleIds", n => { RoleIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "services", n => { Services = n.GetCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_services>(global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_services.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<UntypedNode>("companyId", CompanyId);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Users>("products", Products);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("roleIds", RoleIds);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.ProjectUserResponse_services>("services", Services);
        }
    }
}

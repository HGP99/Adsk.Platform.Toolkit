// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.AccountAdmin.Models {
    /// <summary>
    /// Company attributes used for both project and account companies.
    /// </summary>
    public class BaseCompany : IParsable {
        /// <summary>The identifier of the account this company is associated with.</summary>
        public Guid? AccountId { get; private set; }
        /// <summary>The company addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Address>? Addresses { get; set; }
#nullable restore
#else
        public List<Address> Addresses { get; set; }
#endif
        /// <summary>The timestamp when this company was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The description of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ERP Partner Company ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErpId { get; set; }
#nullable restore
#else
        public string ErpId { get; set; }
#endif
        /// <summary>Id of the company.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The URL of the image associated to the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; private set; }
#nullable restore
#else
        public string ImageUrl { get; private set; }
#endif
        /// <summary>The name of the company. The company name should be unique under an account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The status of the company.</summary>
        public BaseCompany_status? Status { get; private set; }
        /// <summary>The Tax ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxId { get; set; }
#nullable restore
#else
        public string TaxId { get; set; }
#endif
        /// <summary>Trade or company type based on specialization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Trade { get; set; }
#nullable restore
#else
        public string Trade { get; set; }
#endif
        /// <summary>The timestamp when this company was last updated. This will only reflect changes to the company fields and not changes to any resources in the company.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>The URL of the company website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebsiteUrl { get; set; }
#nullable restore
#else
        public string WebsiteUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new baseCompany and sets the default values.
        /// </summary>
        public BaseCompany() {
            Status = BaseCompany_status.Active;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BaseCompany CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BaseCompany();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accountId", n => { AccountId = n.GetGuidValue(); } },
                {"addresses", n => { Addresses = n.GetCollectionOfObjectValues<Address>(Address.CreateFromDiscriminatorValue)?.ToList(); } },
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"erpId", n => { ErpId = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"status", n => { Status = n.GetEnumValue<BaseCompany_status>(); } },
                {"taxId", n => { TaxId = n.GetStringValue(); } },
                {"trade", n => { Trade = n.GetStringValue(); } },
                {"updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                {"websiteUrl", n => { WebsiteUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Address>("addresses", Addresses);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("erpId", ErpId);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("taxId", TaxId);
            writer.WriteStringValue("trade", Trade);
            writer.WriteStringValue("websiteUrl", WebsiteUrl);
        }
    }
}

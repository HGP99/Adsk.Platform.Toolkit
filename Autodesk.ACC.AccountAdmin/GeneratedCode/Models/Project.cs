// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Models
{
    /// <summary>
    /// Project information.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Project : IParsable
    {
        /// <summary>The identifier of the account this project is associated with.</summary>
        public Guid? AccountId { get; private set; }
        /// <summary>The address line 1 for this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? AddressLine1 { get; set; }
#nullable restore
#else
        public UntypedNode AddressLine1 { get; set; }
#endif
        /// <summary>The address line 2 for this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? AddressLine2 { get; set; }
#nullable restore
#else
        public UntypedNode AddressLine2 { get; set; }
#endif
        /// <summary>This is the Autodesk identifier of the permissions group to which all admin users on the project belong.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? AdminGroupId { get; private set; }
#nullable restore
#else
        public UntypedNode AdminGroupId { get; private set; }
#endif
        /// <summary>The identifier of the business unit this project is associated with.</summary>
        public Guid? BusinessUnitId { get; set; }
        /// <summary>The city in which this project is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? City { get; set; }
#nullable restore
#else
        public UntypedNode City { get; set; }
#endif
        /// <summary>Indicates total number of companies for this project</summary>
        public int? CompanyCount { get; set; }
        /// <summary>The construction type of this project.  Provided is a predefined list of preferred values however any value will be accepted. Predefined values are `New Construction` and `Renovation`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConstructionType { get; set; }
#nullable restore
#else
        public string ConstructionType { get; set; }
#endif
        /// <summary>The contract type of this project.  Provided is a predefined list of preferred values however any value will be accepted. Predefined values are `Cost Plus`, `Guaranteed Maximum Price`, `Incentive`, `Lump Sum` and `Unit Price`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractType { get; set; }
#nullable restore
#else
        public string ContractType { get; set; }
#endif
        /// <summary>The country in which this project is located. Only valid country names and ISO 3166-1 alpha-2 codes will be accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Country { get; set; }
#nullable restore
#else
        public UntypedNode Country { get; set; }
#endif
        /// <summary>The timestamp when this project was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The current phase of this project.  Provided is a predefined list of preferred values however any value will be accepted. Predefined values are `Concept`, `Design`, `Bidding`, `Planning`, `Preconstruction`, `Construction`, `Commissioning`, `Warranty`, `Complete`, `Facility Management`, `Operation`, `Strategic Definition`, `Preparation and Brief`, `Concept Design`, `Developed Design`, `Technical Design`, `Construction`, `Handover and Close Out` and `In Use`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? CurrentPhase { get; set; }
#nullable restore
#else
        public UntypedNode CurrentPhase { get; set; }
#endif
        /// <summary>The delivery method of this project.  Provided is a predefined list of preferred values however any value will be accepted. Predefined values are `Construction Management (CM) at Risk`, `Design-Bid`, `Design-Bid-Build`, `Design-Build-Operate` and `IPD`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryMethod { get; set; }
#nullable restore
#else
        public string DeliveryMethod { get; set; }
#endif
        /// <summary>The estimated end date for this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? EndDate { get; set; }
#nullable restore
#else
        public UntypedNode EndDate { get; set; }
#endif
        /// <summary>The internally generated identifier for this project.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The url of the project image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; private set; }
#nullable restore
#else
        public string ImageUrl { get; private set; }
#endif
        /// <summary>Indicates if this project is an ACS unified project or a BIM360 project. ReadOnly when updating a project. Defaults as false when creating a project.</summary>
        public bool? IsAcsUnified { get; set; }
        /// <summary>An externally defined identifier for this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNumber { get; set; }
#nullable restore
#else
        public string JobNumber { get; set; }
#endif
        /// <summary>The timestamp of the last time someone logged into this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? LastSignIn { get; private set; }
#nullable restore
#else
        public UntypedNode LastSignIn { get; private set; }
#endif
        /// <summary>The latitude of this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Latitude { get; set; }
#nullable restore
#else
        public UntypedNode Latitude { get; set; }
#endif
        /// <summary>The longitude of this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Longitude { get; set; }
#nullable restore
#else
        public UntypedNode Longitude { get; set; }
#endif
        /// <summary>Indicates total number of members for this project</summary>
        public int? MemberCount { get; set; }
        /// <summary>This is the Autodesk identifier of the permissions group to which all users on the project belong.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? MemberGroupId { get; private set; }
#nullable restore
#else
        public UntypedNode MemberGroupId { get; private set; }
#endif
        /// <summary>The name of this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Indicates what product platform this project belongs to. Readonly when updating a project.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Project_platform? Platform { get; set; }
        /// <summary>The zip or postal code in which this project is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? PostalCode { get; set; }
#nullable restore
#else
        public UntypedNode PostalCode { get; set; }
#endif
        /// <summary>The list of products on this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.AccountAdmin.Models.Projects>? Products { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.AccountAdmin.Models.Projects> Products { get; set; }
#endif
        /// <summary>The size of this project.  When updating the project size both the `value` and `unit` are required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.Models.Project_projectSize? ProjectSize { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.Models.Project_projectSize ProjectSize { get; set; }
#endif
        /// <summary>The value of this project.  When updating the project value both the `value` and `currency` are required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.Models.Project_projectValue? ProjectValue { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.Models.Project_projectValue ProjectValue { get; set; }
#endif
        /// <summary>The list of services on this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.AccountAdmin.Models.Project_services>? Services { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.AccountAdmin.Models.Project_services> Services { get; set; }
#endif
        /// <summary>Indicates total number of sheets for this project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? SheetCount { get; set; }
#nullable restore
#else
        public UntypedNode SheetCount { get; set; }
#endif
        /// <summary>The estimated start date for this project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? StartDate { get; set; }
#nullable restore
#else
        public UntypedNode StartDate { get; set; }
#endif
        /// <summary>The state or province in which this project is located. Only valid state/province names and ISO 3166-1 alpha-2 codes will be accepted. The provided state or province must exist in the country of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? StateOrProvince { get; set; }
#nullable restore
#else
        public UntypedNode StateOrProvince { get; set; }
#endif
        /// <summary>The status of this project.  Valid values are `active`, `pending`, `archived` and `suspended`.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Project_status? Status { get; set; }
        /// <summary>The url of the project thumbnail image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailImageUrl { get; private set; }
#nullable restore
#else
        public string ThumbnailImageUrl { get; private set; }
#endif
        /// <summary>The time zone in which this project is located.</summary>
        public global::Autodesk.ACC.AccountAdmin.Models.Project_timezone? Timezone { get; set; }
        /// <summary>The type of project.  Provided is a predefined list of preferred values however any value will be accepted.  Predefined values are `Convention Center`, `Data Center`, `Hotel / Motel`, `Office`, `Parking Structure / Garage`, `Performing Arts`, `Restaurant`, `Retail`, `Stadium / Arena`, `Theme Park`, `Warehouse (non-manufacturing)`, `Assisted Living / Nursing Home`, `Hospital`, `Medical Laboratory`, `Medical Office`, `OutPatient Surgery Center`, `Court House`, `Dormitory`, `Education Facility`, `Government Building`, `Library`, `Military Facility`, `Museum`, `Prison / Correctional Facility`, `Recreation Building`, `Religious Building`, `Research Facility / Laboratory`, `Multi-Family Housing`, `Single-Family Housing`, `Airport`, `Bridge`, `Canal / Waterway`, `Dams / Flood Control / Reservoirs`, `Harbor / River Development`, `Rail`, `Seaport`, `Streets / Roads / Highways`, `Transportation Building`, `Tunnel`, `Waste Water / Sewers`, `Water Supply`, `Manufacturing / Factory`, `Mining Facility`, `Oil &amp; Gas`, `Plant`, `Power Plant`, `Solar Farm`, `Utilities`, `Wind Farm`, `Demonstration Project`, `Template Project` and `Training Project`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The timestamp when this project was last updated.  This will only reflect changes to the project fields and not changes to any resources in the project.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Models.Project"/> and sets the default values.
        /// </summary>
        public Project()
        {
            Status = global::Autodesk.ACC.AccountAdmin.Models.Project_status.Active;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Models.Project"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Models.Project CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Models.Project();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetGuidValue(); } },
                { "addressLine1", n => { AddressLine1 = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "addressLine2", n => { AddressLine2 = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "adminGroupId", n => { AdminGroupId = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "businessUnitId", n => { BusinessUnitId = n.GetGuidValue(); } },
                { "city", n => { City = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "companyCount", n => { CompanyCount = n.GetIntValue(); } },
                { "constructionType", n => { ConstructionType = n.GetStringValue(); } },
                { "contractType", n => { ContractType = n.GetStringValue(); } },
                { "country", n => { Country = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currentPhase", n => { CurrentPhase = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "deliveryMethod", n => { DeliveryMethod = n.GetStringValue(); } },
                { "endDate", n => { EndDate = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "isAcsUnified", n => { IsAcsUnified = n.GetBoolValue(); } },
                { "jobNumber", n => { JobNumber = n.GetStringValue(); } },
                { "lastSignIn", n => { LastSignIn = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "latitude", n => { Latitude = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "longitude", n => { Longitude = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "memberCount", n => { MemberCount = n.GetIntValue(); } },
                { "memberGroupId", n => { MemberGroupId = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_platform>(); } },
                { "postalCode", n => { PostalCode = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "products", n => { Products = n.GetCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Projects>(global::Autodesk.ACC.AccountAdmin.Models.Projects.CreateFromDiscriminatorValue)?.AsList(); } },
                { "projectSize", n => { ProjectSize = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.Models.Project_projectSize>(global::Autodesk.ACC.AccountAdmin.Models.Project_projectSize.CreateFromDiscriminatorValue); } },
                { "projectValue", n => { ProjectValue = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.Models.Project_projectValue>(global::Autodesk.ACC.AccountAdmin.Models.Project_projectValue.CreateFromDiscriminatorValue); } },
                { "services", n => { Services = n.GetCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Project_services>(global::Autodesk.ACC.AccountAdmin.Models.Project_services.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sheetCount", n => { SheetCount = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "startDate", n => { StartDate = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "stateOrProvince", n => { StateOrProvince = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_status>(); } },
                { "thumbnailImageUrl", n => { ThumbnailImageUrl = n.GetStringValue(); } },
                { "timezone", n => { Timezone = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_timezone>(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("addressLine1", AddressLine1);
            writer.WriteObjectValue<UntypedNode>("addressLine2", AddressLine2);
            writer.WriteGuidValue("businessUnitId", BusinessUnitId);
            writer.WriteObjectValue<UntypedNode>("city", City);
            writer.WriteIntValue("companyCount", CompanyCount);
            writer.WriteStringValue("constructionType", ConstructionType);
            writer.WriteStringValue("contractType", ContractType);
            writer.WriteObjectValue<UntypedNode>("country", Country);
            writer.WriteObjectValue<UntypedNode>("currentPhase", CurrentPhase);
            writer.WriteStringValue("deliveryMethod", DeliveryMethod);
            writer.WriteObjectValue<UntypedNode>("endDate", EndDate);
            writer.WriteBoolValue("isAcsUnified", IsAcsUnified);
            writer.WriteStringValue("jobNumber", JobNumber);
            writer.WriteObjectValue<UntypedNode>("latitude", Latitude);
            writer.WriteObjectValue<UntypedNode>("longitude", Longitude);
            writer.WriteIntValue("memberCount", MemberCount);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_platform>("platform", Platform);
            writer.WriteObjectValue<UntypedNode>("postalCode", PostalCode);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Projects>("products", Products);
            writer.WriteObjectValue<global::Autodesk.ACC.AccountAdmin.Models.Project_projectSize>("projectSize", ProjectSize);
            writer.WriteObjectValue<global::Autodesk.ACC.AccountAdmin.Models.Project_projectValue>("projectValue", ProjectValue);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Models.Project_services>("services", Services);
            writer.WriteObjectValue<UntypedNode>("sheetCount", SheetCount);
            writer.WriteObjectValue<UntypedNode>("startDate", StartDate);
            writer.WriteObjectValue<UntypedNode>("stateOrProvince", StateOrProvince);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_status>("status", Status);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Models.Project_timezone>("timezone", Timezone);
            writer.WriteStringValue("type", Type);
        }
    }
}

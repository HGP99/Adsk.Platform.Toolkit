// <auto-generated/>
using Autodesk.ACC.AccountAdmin.Models;
using Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.AccountAdmin.Projects.Item.Users {
    /// <summary>
    /// Builds and executes requests for operations under \projects\{projectId}\users
    /// </summary>
    public class UsersRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the Autodesk.ACC.AccountAdmin.projects.item.users.item collection</summary>
        /// <param name="position">The ID of the user. You can use either the user ID (``id``) or the autodesk ID (``autodeskId``).</param>
        public WithUserItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("userId", position);
            return new WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new UsersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/users{?filter%5Bproducts%5D*,limit*,offset*,filter%5Bname%5D*,filter%5Bemail%5D*,filter%5BaccessLevels%5D*,filter%5BcompanyId%5D*,filter%5BautodeskId%5D*,filter%5Bid%5D*,filter%5BroleId%5D*,filter%5BmemberGroupId%5D*,filter%5BserviceNames%5D*,filter%5Bstatus%5D*,filterTextMatch*,sort*,fields*,orFilters*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new UsersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/users{?filter%5Bproducts%5D*,limit*,offset*,filter%5Bname%5D*,filter%5Bemail%5D*,filter%5BaccessLevels%5D*,filter%5BcompanyId%5D*,filter%5BautodeskId%5D*,filter%5Bid%5D*,filter%5BroleId%5D*,filter%5BmemberGroupId%5D*,filter%5BserviceNames%5D*,filter%5Bstatus%5D*,filterTextMatch*,sort*,fields*,orFilters*}", rawUrl) {
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UsersGetResponse?> GetAsUsersGetResponseAsync(Action<UsersRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UsersGetResponse> GetAsUsersGetResponseAsync(Action<UsersRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidationError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"406", Error.CreateFromDiscriminatorValue},
                {"409", ValidationError.CreateFromDiscriminatorValue},
                {"410", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UsersGetResponse>(requestInfo, UsersGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsUsersGetResponse instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UsersResponse?> GetAsync(Action<UsersRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UsersResponse> GetAsync(Action<UsersRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidationError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"406", Error.CreateFromDiscriminatorValue},
                {"409", ValidationError.CreateFromDiscriminatorValue},
                {"410", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UsersResponse>(requestInfo, UsersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UsersPostResponse?> PostAsUsersPostResponseAsync(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UsersPostResponse> PostAsUsersPostResponseAsync(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidationError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"409", ValidationError.CreateFromDiscriminatorValue},
                {"410", Error.CreateFromDiscriminatorValue},
                {"412", Error.CreateFromDiscriminatorValue},
                {"415", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UsersPostResponse>(requestInfo, UsersPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsUsersPostResponse instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UsersResponse?> PostAsync(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<UsersResponse> PostAsync(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidationError.CreateFromDiscriminatorValue},
                {"401", Error.CreateFromDiscriminatorValue},
                {"403", Error.CreateFromDiscriminatorValue},
                {"404", Error.CreateFromDiscriminatorValue},
                {"409", ValidationError.CreateFromDiscriminatorValue},
                {"410", Error.CreateFromDiscriminatorValue},
                {"412", Error.CreateFromDiscriminatorValue},
                {"415", Error.CreateFromDiscriminatorValue},
                {"500", Error.CreateFromDiscriminatorValue},
                {"503", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<UsersResponse>(requestInfo, UsersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<UsersRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<UsersRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null) {
                var requestConfig = new UsersRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Private Use - Add a user to a project.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(UsersPostRequestBody body, Action<UsersRequestBuilderPostRequestConfiguration> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation {
                HttpMethod = Method.POST,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            if (requestConfiguration != null) {
                var requestConfig = new UsersRequestBuilderPostRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public UsersRequestBuilder WithUrl(string rawUrl) {
            return new UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves information about all the users in a project. To get information about all the users in an account, see `GET accounts/users &lt;/en/docs/bim360/v1/reference/http/users-GET/&gt;`_.
        /// </summary>
        public class UsersRequestBuilderGetQueryParameters {
            /// <summary>List of fields to return in the response.  Defaults to all fields.  Valid list of fields are `name`, `email`, `firstName`, `lastName`, `autodeskId`, `analyticsId`, `addressLine1`, `addressLine2`, `city`, `stateOrProvince`, `postalCode`, `country`, `imageUrl`, `phone`, `jobTitle`, `industry`, `aboutMe`, `companyId`, `accessLevels`, `roleIds`, `services`, `status`, `addedOn` and `products`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string[] Fields { get; set; }
#endif
            /// <summary>Filter project users by access level.  Possible values are ``accountAdmin``, ``projectAdmin`` and ``executive``.  For example ``filter[accessLevels]=accountAdmin,executive``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BaccessLevels%5D")]
            public string[]? FilteraccessLevels { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BaccessLevels%5D")]
            public string[] FilteraccessLevels { get; set; }
#endif
            /// <summary>Filter project users by one or several Autodesk ids.  For example ``filter[autodeskId]=LR3JVSFPDEAB, ...``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BautodeskId%5D")]
            public string[]? FilterautodeskId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BautodeskId%5D")]
            public string[] FilterautodeskId { get; set; }
#endif
            /// <summary>Filter project users by company id or `` for null values. For example ``filter[companyId]=003e1a66-6775-4045-b3cc-cf0e614ff7b5` or filter[companyId]=`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcompanyId%5D")]
            public string? FiltercompanyId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcompanyId%5D")]
            public string FiltercompanyId { get; set; }
#endif
            /// <summary>Filter project users by email.  Can be a partial match based on the value of `filterTextMatch` provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bemail%5D")]
            public string? Filteremail { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bemail%5D")]
            public string Filteremail { get; set; }
#endif
            /// <summary>Filter project users by one or several ids.  For example ``filter[id]=883e1a66-6775-4045-b3cc-cf0e614ff7b5, ..., ...``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[]? Filterid { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[] Filterid { get; set; }
#endif
            /// <summary>Filter project users who are members of the list of Autodesk groups.  For example ``filter[memberGroupId]=3456542``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BmemberGroupId%5D")]
            public string[]? FiltermemberGroupId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BmemberGroupId%5D")]
            public string[] FiltermemberGroupId { get; set; }
#endif
            /// <summary>Filter project users by name.  Can be a partial match based on the value of `filterTextMatch` provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bname%5D")]
            public string? Filtername { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bname%5D")]
            public string Filtername { get; set; }
#endif
            /// <summary>Filter resource by provided list of products.  Valid values are `assets`, `build`, `capitalPlanning`, `cost`, `costManagement`, `designCollaboration`, `docs`, `documentManagement`, `field`, `fieldManagement`, `financials`, `glue`,`workshopxr`, `insight`, `modelCoordination`, `plan`, `projectAdministration`, `projectManagement`, `quantification`, and `takeoff`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bproducts%5D")]
            public string[]? Filterproducts { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bproducts%5D")]
            public string[] Filterproducts { get; set; }
#endif
            /// <summary>Filter project users by role id.  For example ``filter[roleId]=883e1a66-6775-4045-b3cc-cf0e614ff7b5``.</summary>
            [QueryParameter("filter%5BroleId%5D")]
            public Guid? FilterroleId { get; set; }
            /// <summary>Filter project users by the services they have access to.  Valid values are ``costManagement``, ``designCollaboration``, ``documentManagement``, ``fieldManagement``, ``assets``,  ``workshopxr``,``insight``, ``modelCoordination``, ``projectAdministration``, ``projectManagement``, ``field``, ``glue`` and ``plan``.  For example ``filter[serviceNames]=glue,plan,sheets``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BserviceNames%5D")]
            public string[]? FilterserviceNames { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BserviceNames%5D")]
            public string[] FilterserviceNames { get; set; }
#endif
            /// <summary>Filter project users by their status.  Valid values are `active`, `pending`, `disabled` and `deleted`. Defaults to `active`, `pending` and `disabled`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bstatus%5D")]
            public string[]? Filterstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bstatus%5D")]
            public string[] Filterstatus { get; set; }
#endif
            /// <summary>When filtering on a text based field this indicates how to do the matching.  Valid values are ``contains``, ``startsWith``, ``endsWith`` and ``equals``.  Default is ``contains``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filterTextMatch")]
            public string? FilterTextMatch { get; set; }
#nullable restore
#else
            [QueryParameter("filterTextMatch")]
            public string FilterTextMatch { get; set; }
#endif
            /// <summary>The maximum number of records to return in a single request. Possible range: 1-200. Default Can be a number between 1 and 200.  Default value: 20.  If a number greater than 200 is provided 200 will be returned.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The number of records to skip before returning the result records.  Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>List of filtered fields to apply an &quot;or&quot; operator. Valid list of fields are `id`, `name`, `email`, `autodeskId`, `status` and `accessLevels`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orFilters")]
            public string[]? OrFilters { get; set; }
#nullable restore
#else
            [QueryParameter("orFilters")]
            public string[] OrFilters { get; set; }
#endif
            /// <summary>The list of fields to sort by.  When multiple fields are listed the later property is used to sort the resources where the previous fields have the same value. Each property can be followed by a direction modifier of either ascending (``asc``) or descending (``desc``).  Possible values: ``name``, ``email``, ``firstName``, ``lastName``, ``addressLine1``, ``addressLine2``, ``city``, ``stateOrProvince``, ``postalCode``, ``country`` and ``addedOn``.  Default sort is ``name``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class UsersRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public UsersRequestBuilderGetQueryParameters QueryParameters { get; set; } = new UsersRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new usersRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public UsersRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class UsersRequestBuilderPostRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new usersRequestBuilderPostRequestConfiguration and sets the default values.
            /// </summary>
            public UsersRequestBuilderPostRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item {
    /// <summary>
    /// Flags indicating the users access levels in the account.
    /// </summary>
    public class WithUserPatchRequestBody_accessLevels : IParsable {
        /// <summary>Indicates the user is an account admin in the account.</summary>
        public bool? AccountAdmin { get; set; }
        /// <summary>Indicates the user is an executive in the account.</summary>
        public bool? Executive { get; set; }
        /// <summary>Indicates the user is a project admin for the project.</summary>
        public bool? ProjectAdmin { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WithUserPatchRequestBody_accessLevels CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WithUserPatchRequestBody_accessLevels();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accountAdmin", n => { AccountAdmin = n.GetBoolValue(); } },
                {"executive", n => { Executive = n.GetBoolValue(); } },
                {"projectAdmin", n => { ProjectAdmin = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accountAdmin", AccountAdmin);
            writer.WriteBoolValue("executive", Executive);
            writer.WriteBoolValue("projectAdmin", ProjectAdmin);
        }
    }
}

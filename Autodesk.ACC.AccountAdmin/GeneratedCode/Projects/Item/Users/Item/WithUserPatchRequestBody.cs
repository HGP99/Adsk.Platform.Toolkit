// <auto-generated/>
using Autodesk.ACC.AccountAdmin.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.AccountAdmin.Projects.Item.Users.Item {
    public class WithUserPatchRequestBody : BaseUser, IParsable {
        /// <summary>Flags indicating the users access levels in the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WithUserPatchRequestBody_accessLevels? AccessLevels { get; private set; }
#nullable restore
#else
        public WithUserPatchRequestBody_accessLevels AccessLevels { get; private set; }
#endif
        /// <summary>The products property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WithUser>? Products { get; set; }
#nullable restore
#else
        public List<WithUser> Products { get; set; }
#endif
        /// <summary>The list of role ids the user belongs to in the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? RoleIds { get; set; }
#nullable restore
#else
        public List<Guid?> RoleIds { get; set; }
#endif
        /// <summary>Flags indicating which services the user can access.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WithUserPatchRequestBody_services>? Services { get; set; }
#nullable restore
#else
        public List<WithUserPatchRequestBody_services> Services { get; set; }
#endif
        /// <summary>The status of this user on the account.  Valid values are `active`, `pending`, `disabled`, and `deleted`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; private set; }
#nullable restore
#else
        public string Status { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new WithUserPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WithUserPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"accessLevels", n => { AccessLevels = n.GetObjectValue<WithUserPatchRequestBody_accessLevels>(WithUserPatchRequestBody_accessLevels.CreateFromDiscriminatorValue); } },
                {"products", n => { Products = n.GetCollectionOfObjectValues<WithUser>(WithUser.CreateFromDiscriminatorValue)?.ToList(); } },
                {"roleIds", n => { RoleIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"services", n => { Services = n.GetCollectionOfObjectValues<WithUserPatchRequestBody_services>(WithUserPatchRequestBody_services.CreateFromDiscriminatorValue)?.ToList(); } },
                {"status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<WithUser>("products", Products);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("roleIds", RoleIds);
            writer.WriteCollectionOfObjectValues<WithUserPatchRequestBody_services>("services", Services);
        }
    }
}

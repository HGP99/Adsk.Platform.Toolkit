// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.Issues.Models
{
    /// <summary>
    /// Information about the individual viewable.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IssueDefinition_linkedDocuments_details : IParsable
    {
        /// <summary>An external identifier of the element the pushpin is associated with in the viewable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The ID of the element the pushpin is associated with in the viewable.</summary>
        public int? ObjectId { get; set; }
        /// <summary>The position of the pushpin in the viewable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position? Position { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position Position { get; set; }
#endif
        /// <summary>The individual viewable associated with the issue (pushpin). This is relevant for both individual 2D sheets and views within a 3D model, and individual PDF sheets within a multi-sheet PDF file. It is only relevant if the issue is associated with a file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewable? Viewable { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewable Viewable { get; set; }
#endif
        /// <summary>The viewer state at the time the pushpin was created. Maximum length: 2,500,000 characters. You can get the viewer state object by calling ViewerState.getState(). To restore the viewer instance use ViewerState.restoreState(). See the `Viewer API documentation https://developer.autodesk.com/en/docs/viewer/v2/reference/javascript/viewerstate/`_ for more details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewerState? ViewerState { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewerState ViewerState { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "objectId", n => { ObjectId = n.GetIntValue(); } },
                { "position", n => { Position = n.GetObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position>(global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position.CreateFromDiscriminatorValue); } },
                { "viewable", n => { Viewable = n.GetObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewable>(global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewable.CreateFromDiscriminatorValue); } },
                { "viewerState", n => { ViewerState = n.GetObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewerState>(global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewerState.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteIntValue("objectId", ObjectId);
            writer.WriteObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position>("position", Position);
            writer.WriteObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewable>("viewable", Viewable);
            writer.WriteObjectValue<global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_viewerState>("viewerState", ViewerState);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.Issues.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UsersMeDefinition : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The canManageTemplates property</summary>
        public bool? CanManageTemplates { get; set; }
        /// <summary>The user&apos;s Autodesk ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>States whether the current logged in user is a system admin.</summary>
        public bool? IsProjectAdmin { get; set; }
        /// <summary>The issues property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.Issues.Models.UsersMeDefinition_issues? Issues { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.Issues.Models.UsersMeDefinition_issues Issues { get; set; }
#endif
        /// <summary>The permission level of the user. Each permission level corresponds to a combination of values in the response. For example, a combination of ``read`` and ``create`` in the response, corresponds to a *Create for other companies* permission level.Note that if a user with *Create for my company* permissions attempts to assign a user from a another company to the issue, it will return an error. In addition, the user can both create and view issues for their own company. You can also verify a user&apos;s assignment permissions by checking the ``permittedActions`` or ``permissionLevels`` attributes.- Create for my company: ``create``- Create for other companies: ``create``, ``read``- Manage issues: ``create``, ``read``, ``write``Possible values: ``create``, ``read``, ``write``.For more details about the permission levels, see `Issues Permissions &lt;https://help.autodesk.com/view/BUILD/ENU/?guid=Issues_Permissions&gt;`_.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_permissionLevels?>? PermissionLevels { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_permissionLevels?> PermissionLevels { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.UsersMeDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.Issues.Models.UsersMeDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.Issues.Models.UsersMeDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "canManageTemplates", n => { CanManageTemplates = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isProjectAdmin", n => { IsProjectAdmin = n.GetBoolValue(); } },
                { "issues", n => { Issues = n.GetObjectValue<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_issues>(global::Autodesk.ACC.Issues.Models.UsersMeDefinition_issues.CreateFromDiscriminatorValue); } },
                { "permissionLevels", n => { PermissionLevels = n.GetCollectionOfEnumValues<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_permissionLevels>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("canManageTemplates", CanManageTemplates);
            writer.WriteBoolValue("isProjectAdmin", IsProjectAdmin);
            writer.WriteObjectValue<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_issues>("issues", Issues);
            writer.WriteCollectionOfEnumValues<global::Autodesk.ACC.Issues.Models.UsersMeDefinition_permissionLevels>("permissionLevels", PermissionLevels);
        }
    }
}
#pragma warning restore CS0618

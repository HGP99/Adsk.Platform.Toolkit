// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.Issues.Models
{
    /// <summary>
    /// The position of the pushpin in the viewable.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IssueDefinition_linkedDocuments_details_position : IParsable
    {
        /// <summary>The x-value of the position in the viewable.</summary>
        public double? X { get; set; }
        /// <summary>The y-value of the position in the viewable.</summary>
        public double? Y { get; set; }
        /// <summary>The z-value of the position in the viewable. This value is only relevant for 3D views.</summary>
        public double? Z { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.Issues.Models.IssueDefinition_linkedDocuments_details_position();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "x", n => { X = n.GetDoubleValue(); } },
                { "y", n => { Y = n.GetDoubleValue(); } },
                { "z", n => { Z = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("x", X);
            writer.WriteDoubleValue("y", Y);
            writer.WriteDoubleValue("z", Z);
        }
    }
}
#pragma warning restore CS0618

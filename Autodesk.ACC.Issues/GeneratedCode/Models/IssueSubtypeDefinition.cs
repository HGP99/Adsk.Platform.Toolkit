// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.Issues.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IssueSubtypeDefinition : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>3 chars pin label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The date and time the issue was created, in ISO8601 format.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The unique identifier of the user who created the issue type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; private set; }
#nullable restore
#else
        public string CreatedBy { get; private set; }
#endif
        /// <summary>The date and time the issue type was deleted, in ISO8601 format.</summary>
        public DateTimeOffset? DeletedAt { get; private set; }
        /// <summary>The unique identifier of the user who deleted the issue type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeletedBy { get; private set; }
#nullable restore
#else
        public string DeletedBy { get; private set; }
#endif
        /// <summary>The fieldsMetadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.Issues.Models.FieldsMetadataDefinition>? FieldsMetadata { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.Issues.Models.FieldsMetadataDefinition> FieldsMetadata { get; set; }
#endif
        /// <summary>The ID of the issue subtype.</summary>
        public Guid? Id { get; private set; }
        /// <summary>Stated whether the issue subtype is active.</summary>
        public bool? IsActive { get; set; }
        /// <summary>The isReadOnly property</summary>
        public bool? IsReadOnly { get; private set; }
        /// <summary>The ID of the parent issue type.</summary>
        public Guid? IssueTypeId { get; private set; }
        /// <summary>The orderIndex property</summary>
        public int? OrderIndex { get; private set; }
        /// <summary>Not applicable.A list of permitted actions on this specific item. ``change_order`` is not applicable.Possible Values: ``edit``, ``delete``, ``change_order``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedActions?>? PermittedActions { get; private set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedActions?> PermittedActions { get; private set; }
#endif
        /// <summary>Not applicable.A list of permitted actions the user is allowed to make in regards to issue subtypes. If the permittedActions property include the &apos;edit&apos;, then this will be the list of attributes that are allowed to be updated.Possible Values: ``title``, ``isActive``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedAttributes?>? PermittedAttributes { get; private set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedAttributes?> PermittedAttributes { get; private set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The date and time the issue type was updated, in ISO8601 format.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>The unique identifier of the user who updated the issue type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedBy { get; private set; }
#nullable restore
#else
        public string UpdatedBy { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "createdBy", n => { CreatedBy = n.GetStringValue(); } },
                { "deletedAt", n => { DeletedAt = n.GetDateTimeOffsetValue(); } },
                { "deletedBy", n => { DeletedBy = n.GetStringValue(); } },
                { "fieldsMetadata", n => { FieldsMetadata = n.GetCollectionOfObjectValues<global::Autodesk.ACC.Issues.Models.FieldsMetadataDefinition>(global::Autodesk.ACC.Issues.Models.FieldsMetadataDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isActive", n => { IsActive = n.GetBoolValue(); } },
                { "isReadOnly", n => { IsReadOnly = n.GetBoolValue(); } },
                { "issueTypeId", n => { IssueTypeId = n.GetGuidValue(); } },
                { "orderIndex", n => { OrderIndex = n.GetIntValue(); } },
                { "permittedActions", n => { PermittedActions = n.GetCollectionOfEnumValues<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedActions>()?.AsList(); } },
                { "permittedAttributes", n => { PermittedAttributes = n.GetCollectionOfEnumValues<global::Autodesk.ACC.Issues.Models.IssueSubtypeDefinition_permittedAttributes>()?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "updatedBy", n => { UpdatedBy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.Issues.Models.FieldsMetadataDefinition>("fieldsMetadata", FieldsMetadata);
            writer.WriteBoolValue("isActive", IsActive);
            writer.WriteStringValue("title", Title);
        }
    }
}
#pragma warning restore CS0618

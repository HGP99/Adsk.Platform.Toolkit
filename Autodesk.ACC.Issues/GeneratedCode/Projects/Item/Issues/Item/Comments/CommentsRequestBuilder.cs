// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.Issues.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{projectId}\issues\{issueId}\comments
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CommentsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/issues/{issueId}/comments{?limit*,offset*,sortBy}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/issues/{issueId}/comments{?limit*,offset*,sortBy}", rawUrl)
        {
        }
        /// <summary>
        /// Get all the comments for a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsGetResponse?> GetAsCommentsGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsGetResponse> GetAsCommentsGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsGetResponse>(requestInfo, global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all the comments for a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCommentsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsResponse?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsResponse> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsResponse>(requestInfo, global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new comment under a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.CommentDefinition"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.Issues.Models.CommentDefinition?> PostAsync(global::Autodesk.ACC.Issues.Models.CreateCommentDefinition body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.Issues.Models.CommentDefinition> PostAsync(global::Autodesk.ACC.Issues.Models.CreateCommentDefinition body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.Issues.Models.CommentDefinition>(requestInfo, global::Autodesk.ACC.Issues.Models.CommentDefinition.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all the comments for a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new comment under a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.Issues.Models.CreateCommentDefinition body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.Issues.Models.CreateCommentDefinition body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get all the comments for a specific issue... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CommentsRequestBuilderGetQueryParameters 
        {
            /// <summary>Add ``limit=20`` to limit the results count (together with the offset to support pagination).</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Add ``offset=20`` to get partial results (together with the limit to support pagination).</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>Sort issue comments by specified fields. Separate multiple values with commas. To sort in descending order add a ``-`` (minus sign) before the sort criteria. For example: ``sortBy=createdAt,-updatedAt``. Possible values: ``createdAt``, ``updatedAt``, ``createdBy``.</summary>
            [Obsolete("This property is deprecated, use SortByAsGetSortByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string[]? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string[] SortBy { get; set; }
#endif
            /// <summary>Sort issue comments by specified fields. Separate multiple values with commas. To sort in descending order add a ``-`` (minus sign) before the sort criteria. For example: ``sortBy=createdAt,-updatedAt``. Possible values: ``createdAt``, ``updatedAt``, ``createdBy``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.GetSortByQueryParameterType[]? SortByAsGetSortByQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.GetSortByQueryParameterType[] SortByAsGetSortByQueryParameterType { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CommentsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.Comments.CommentsRequestBuilder.CommentsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CommentsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

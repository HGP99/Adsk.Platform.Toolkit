// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.Issues.Models;
using Autodesk.ACC.Issues.Projects.Item.Issues.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.Issues.Projects.Item.Issues
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{projectId}\issues
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IssuesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.ACC.Issues.projects.item.issues.item collection</summary>
        /// <param name="position">The unique identifier of the issue.</param>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder"/></returns>
        public global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("issueId", position);
                return new global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Autodesk.ACC.Issues.projects.item.issues.item collection</summary>
        /// <param name="position">The unique identifier of the issue.</param>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("issueId", position);
                return new global::Autodesk.ACC.Issues.Projects.Item.Issues.Item.WithIssueItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssuesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/issues{?fields,filter%5BassignedToType%5D*,filter%5BassignedTo%5D,filter%5BclosedAt%5D*,filter%5BclosedBy%5D,filter%5BcreatedAt%5D*,filter%5BcreatedBy%5D,filter%5BcustomAttributes%5D,filter%5BdisplayId%5D*,filter%5BdueDate%5D*,filter%5Bid%5D,filter%5BissueSubtypeId%5D,filter%5BissueTypeId%5D,filter%5BlinkedDocumentUrn%5D,filter%5BlocationId%5D,filter%5Bpublished%5D*,filter%5BrootCauseId%5D,filter%5Bsearch%5D*,filter%5BstartDate%5D*,filter%5Bstatus%5D*,filter%5BsubLocationId%5D,filter%5BupdatedAt%5D*,filter%5BupdatedBy%5D,filter%5Bvalid%5D*,filter%5Bviewable%5D*,limit*,offset*,sortBy}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssuesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{projectId}/issues{?fields,filter%5BassignedToType%5D*,filter%5BassignedTo%5D,filter%5BclosedAt%5D*,filter%5BclosedBy%5D,filter%5BcreatedAt%5D*,filter%5BcreatedBy%5D,filter%5BcustomAttributes%5D,filter%5BdisplayId%5D*,filter%5BdueDate%5D*,filter%5Bid%5D,filter%5BissueSubtypeId%5D,filter%5BissueTypeId%5D,filter%5BlinkedDocumentUrn%5D,filter%5BlocationId%5D,filter%5Bpublished%5D*,filter%5BrootCauseId%5D,filter%5Bsearch%5D*,filter%5BstartDate%5D*,filter%5Bstatus%5D*,filter%5BsubLocationId%5D,filter%5BupdatedAt%5D*,filter%5BupdatedBy%5D,filter%5Bvalid%5D*,filter%5Bviewable%5D*,limit*,offset*,sortBy}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves information about all the issues in a project, including details about their associated comments and attachments.We support retrieving file-related (pushpin) issues. However, we do not currently support retrieving sheet-related issues from the ACC Build Sheets tool... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.IssuesDefinition"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.Issues.Models.IssuesDefinition?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder.IssuesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.Issues.Models.IssuesDefinition> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder.IssuesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.Issues.Models.IssuesDefinition>(requestInfo, global::Autodesk.ACC.Issues.Models.IssuesDefinition.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Adds an issue to a project.To verify whether a user can create issues for a specific project, call `GET users/me &lt;/en/docs/acc/v1/reference/http/issues-me-GET&gt;`_.To verify whether a user can create issues for a specific project, call GET users/me and verify that the ``issues`` section includes the ``new`` object.You can add references to objects, such as photos and documents. Note that we currently only support directly uploading objects to ACC Docs. You cannot directly upload other objects such as photos and documents unless you upload them to ACC Docs as a file. See the `Add References To Issues &lt;/en/docs/acc/v1/tutorials/issues/add-references-to-issues&gt;`_tutorial for more details.We support retrieving file-related (pushpin) issues. However, we do not currently support retrieving sheet-related issues from the ACC Build Sheets tool... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Models.GetIssueDefinition"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition">When receiving a 409 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.Issues.Models.GetIssueDefinition?> PostAsync(global::Autodesk.ACC.Issues.Models.CreateIssueDefinition body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.Issues.Models.GetIssueDefinition> PostAsync(global::Autodesk.ACC.Issues.Models.CreateIssueDefinition body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ACC.Issues.Models.ErrorResponseDefinition.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.Issues.Models.GetIssueDefinition>(requestInfo, global::Autodesk.ACC.Issues.Models.GetIssueDefinition.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves information about all the issues in a project, including details about their associated comments and attachments.We support retrieving file-related (pushpin) issues. However, we do not currently support retrieving sheet-related issues from the ACC Build Sheets tool... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder.IssuesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder.IssuesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Adds an issue to a project.To verify whether a user can create issues for a specific project, call `GET users/me &lt;/en/docs/acc/v1/reference/http/issues-me-GET&gt;`_.To verify whether a user can create issues for a specific project, call GET users/me and verify that the ``issues`` section includes the ``new`` object.You can add references to objects, such as photos and documents. Note that we currently only support directly uploading objects to ACC Docs. You cannot directly upload other objects such as photos and documents unless you upload them to ACC Docs as a file. See the `Add References To Issues &lt;/en/docs/acc/v1/tutorials/issues/add-references-to-issues&gt;`_tutorial for more details.We support retrieving file-related (pushpin) issues. However, we do not currently support retrieving sheet-related issues from the ACC Build Sheets tool... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.Issues.Models.CreateIssueDefinition body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.Issues.Models.CreateIssueDefinition body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves information about all the issues in a project, including details about their associated comments and attachments.We support retrieving file-related (pushpin) issues. However, we do not currently support retrieving sheet-related issues from the ACC Build Sheets tool... include:: ../../../../_snippets/not-backward-compatible.rst
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssuesRequestBuilderGetQueryParameters 
        {
            /// <summary>Return only specific fields in issue object. Separate multiple values with commas. Fields which will be returned in any case: ``id``, ``title``, ``status``, ``issueTypeId``. Possible values: ``id``, ``displayId``, ``title``, ``description``, ``issueTypeId``, ``issueSubtypeId``, ``status``, ``assignedTo``, ``assignedToType``, ``dueDate``, ``startDate``, ``locationId``, ``locationDetails``, ``rootCauseTitle``, ``rootCauseId``, ``permittedStatuses``, ``permittedAttributes``, ``permittedActions``, ``published``, ``commentCount``, ``openedBy``, ``openedAt``, ``closedBy``, ``closedAt``, ``createdBy``, ``createdAt``, ``updatedBy``, ``updatedAt``, ``customAttributes``.</summary>
            [Obsolete("This property is deprecated, use FieldsAsGetFieldsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string[] Fields { get; set; }
#endif
            /// <summary>Return only specific fields in issue object. Separate multiple values with commas. Fields which will be returned in any case: ``id``, ``title``, ``status``, ``issueTypeId``. Possible values: ``id``, ``displayId``, ``title``, ``description``, ``issueTypeId``, ``issueSubtypeId``, ``status``, ``assignedTo``, ``assignedToType``, ``dueDate``, ``startDate``, ``locationId``, ``locationDetails``, ``rootCauseTitle``, ``rootCauseId``, ``permittedStatuses``, ``permittedAttributes``, ``permittedActions``, ``published``, ``commentCount``, ``openedBy``, ``openedAt``, ``closedBy``, ``closedAt``, ``createdBy``, ``createdAt``, ``updatedBy``, ``updatedAt``, ``customAttributes``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.GetFieldsQueryParameterType[]? FieldsAsGetFieldsQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.GetFieldsQueryParameterType[] FieldsAsGetFieldsQueryParameterType { get; set; }
#endif
            /// <summary>Filter issues by the unique Autodesk ID of the User/Company/Role identifier of the current assignee of this issue. Separate multiple values with commas. For Example: ``A3RGM375QTZ7``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BassignedTo%5D")]
            public string[]? FilterassignedTo { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BassignedTo%5D")]
            public string[] FilterassignedTo { get; set; }
#endif
            /// <summary>Filter issues by the type of the current assignee of this issue. Separate multiple values with commas. Possible values: Possible values: ``user``, ``company``, ``role``, ``null``. For Example: ``user``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BassignedToType%5D")]
            public string? FilterassignedToType { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BassignedToType%5D")]
            public string FilterassignedToType { get; set; }
#endif
            /// <summary>Filter issues closed at the specified date and time, in one of the following URL-encoded formats: YYYY-MM-DDThh:mm:ss.sz or YYYY-MM-DD. Separate multiple values with commas. We support the following filtering options:  - Date range: e.g., ``2022-03-02..2022-03-03`` or ``2022-02-28T22:00:00.000Z..2022-03-28T22:00:00.000Z``- Specific day: e.g., ``2022-03-02`` or ``2022-02-28T22:00:00.000Z``- Specific start date: e.g.,  ``2022-03-02..`` or ``2022-02-28T22:00:00.000Z..``- Specific end date: e.g., ``..2022-03-02`` or ``..2022-02-28T22:00:00.000Z``For more details, see `JSON API Filtering &lt;http://jsonapi.org/format/#fetching-filtering&gt;`_.</summary>
            [QueryParameter("filter%5BclosedAt%5D")]
            public DateTimeOffset? FilterclosedAt { get; set; }
            /// <summary>Filter issues by the unique identifier of the user who closed the issue. Separate multiple values with commas. For Example: ``A3RGM375QTZ7``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BclosedBy%5D")]
            public string[]? FilterclosedBy { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BclosedBy%5D")]
            public string[] FilterclosedBy { get; set; }
#endif
            /// <summary>Filter issues created at the specified date and time, in one of the following URL-encoded formats: YYYY-MM-DDThh:mm:ss.sz or YYYY-MM-DD. Separate multiple values with commas. We support the following filtering options:- Date range: e.g., ``2022-03-02..2022-03-03`` or ``2022-02-28T22:00:00.000Z..2022-03-28T22:00:00.000Z``- Specific day: e.g., ``2022-03-02`` or ``2022-02-28T22:00:00.000Z``- Specific start date: e.g.,  ``2022-03-02..`` or ``2022-02-28T22:00:00.000Z..``- Specific end date: e.g., ``..2022-03-02`` or ``..2022-02-28T22:00:00.000Z``For more details, see `JSON API Filtering &lt;http://jsonapi.org/format/#fetching-filtering&gt;`_.</summary>
            [QueryParameter("filter%5BcreatedAt%5D")]
            public DateTimeOffset? FiltercreatedAt { get; set; }
            /// <summary>Filter issues by the unique identifier of the user who created the issue. Separate multiple values with commas. For Example: ``A3RGM375QTZ7``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcreatedBy%5D")]
            public string[]? FiltercreatedBy { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcreatedBy%5D")]
            public string[] FiltercreatedBy { get; set; }
#endif
            /// <summary>Filter issues by the custom attributes. Each custom attribute filter should be defined by it&apos;s uuid. For example: ``filter[customAttributes][f227d940-ae9b-4722-9297-389f4411f010]=1,2,3``. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BcustomAttributes%5D")]
            public string[]? FiltercustomAttributes { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BcustomAttributes%5D")]
            public string[] FiltercustomAttributes { get; set; }
#endif
            /// <summary>Filter issues by the chronological user-friendly identifier. Separate multiple values with commas.</summary>
            [QueryParameter("filter%5BdisplayId%5D")]
            public int? FilterdisplayId { get; set; }
            /// <summary>Filter issues by due date, in one of the following URL-encoded format: YYYY-MM-DD. Separate multiple values with commas. We support the following filtering options:- Date range: e.g., ``2022-03-02..2022-03-03``- Specific day: e.g., ``2022-03-02``- Specific start date: e.g.,  ``2022-03-02..``- Specific end date: e.g., ``..2022-03-02``For more details, see `JSON API Filtering &lt;http://jsonapi.org/format/#fetching-filtering&gt;`_.</summary>
            [QueryParameter("filter%5BdueDate%5D")]
            public Date? FilterdueDate { get; set; }
            /// <summary>Filter issues by the unique issue ID. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[]? Filterid { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bid%5D")]
            public Guid?[] Filterid { get; set; }
#endif
            /// <summary>Filter issues by the unique identifier of the type of the issue. Note that the API name for type is ``subtype``. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BissueSubtypeId%5D")]
            public Guid?[]? FilterissueSubtypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BissueSubtypeId%5D")]
            public Guid?[] FilterissueSubtypeId { get; set; }
#endif
            /// <summary>Filter issues by the unique identifier of the category of the issue. Note that the API name for category is ``type``.  Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BissueTypeId%5D")]
            public Guid?[]? FilterissueTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BissueTypeId%5D")]
            public Guid?[] FilterissueTypeId { get; set; }
#endif
            /// <summary>Retrieves pushpin issues associated with the specified files. We support all file types that are compatible with the Files tool. You need to specify the URL-encoded file item IDs. To find the file item IDs, use the `Data Management &lt;en/docs/data/v2/developers_guide/overview/&gt;`_ API. Note that you need to specify the 3D model item ID, which retrieves all pushpins associated with all 2D sheets and views associated with the 3D model. Similarly, if you specify a specific PDF file it retrieves all the pushpin issues associated with all the PDF file pages. We do not currently support retrieving pushpin issues associated with a specific 2D sheet or view.By default, it returns pushpins for the latest version of the file. To retrieve pushpins for a specific version of a file together with pushpins for all previous versions of the specified file version, specify the version number, in the following format: ``@[version-number]``.For example, ``filter[linkedDocument]=urn%3Aadsk.wipprod%3Adm.lineage%3AtFbo9zuDTW-nPh45gnM4gA@2``. Separate multiple values with commas.Note that we do not currently support filtering sheets from the ACC Build Sheets tool.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BlinkedDocumentUrn%5D")]
            public string[]? FilterlinkedDocumentUrn { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BlinkedDocumentUrn%5D")]
            public string[] FilterlinkedDocumentUrn { get; set; }
#endif
            /// <summary>Retrieves issues associated with the specified location but not the location&apos;s sublocations. To also retrieve issues that relate to the locations&apos;s sublocations use the ``sublocationId`` filter. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BlocationId%5D")]
            public Guid?[]? FilterlocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BlocationId%5D")]
            public Guid?[] FilterlocationId { get; set; }
#endif
            /// <summary>Filter issues by published status (true/false). Default value: ``undefined`` (meaning both published and unpublished issues will return).</summary>
            [QueryParameter("filter%5Bpublished%5D")]
            public bool? Filterpublished { get; set; }
            /// <summary>Filter issues by the unique identifier of the type of root cause for the issue. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BrootCauseId%5D")]
            public Guid?[]? FilterrootCauseId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BrootCauseId%5D")]
            public Guid?[] FilterrootCauseId { get; set; }
#endif
            /// <summary>Filter issues using &apos;search&apos; criteria. this will filter both title and issues display ID. For example, use filter[search]=300</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bsearch%5D")]
            public string? Filtersearch { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bsearch%5D")]
            public string Filtersearch { get; set; }
#endif
            /// <summary>Filter issues by start date, in one of the following URL-encoded format: YYYY-MM-DD. Separate multiple values with commas. We support the following filtering options:- Date range: e.g., ``2022-03-02..2022-03-03``- Specific day: e.g., ``2022-03-02``- Specific start date: e.g.,  ``2022-03-02..``- Specific end date: e.g., ``..2022-03-02``For more details, see `JSON API Filtering &lt;http://jsonapi.org/format/#fetching-filtering&gt;`_.</summary>
            [QueryParameter("filter%5BstartDate%5D")]
            public Date? FilterstartDate { get; set; }
            /// <summary>Filter issues by their status. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bstatus%5D")]
            public string? Filterstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bstatus%5D")]
            public string Filterstatus { get; set; }
#endif
            /// <summary>Retrieves issues associated with the specified unique LBS (Location Breakdown Structure) identifier, as well as issues associated with the sub locations of the LBS identifier. Separate multiple values with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BsubLocationId%5D")]
            public Guid?[]? FiltersubLocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BsubLocationId%5D")]
            public Guid?[] FiltersubLocationId { get; set; }
#endif
            /// <summary>Filter issues updated at the specified date and time, in one of the following URL-encoded formats: YYYY-MM-DDThh:mm:ss.sz or YYYY-MM-DD. Separate multiple values with commas. We support the following filtering options:- Date range: e.g., ``2022-03-02..2022-03-03`` or ``2022-02-28T22:00:00.000Z..2022-03-28T22:00:00.000Z``- Specific day: e.g., ``2022-03-02`` or ``2022-02-28T22:00:00.000Z``- Specific start date: e.g.,  ``2022-03-02..`` or ``2022-02-28T22:00:00.000Z..``- Specific end date: e.g., ``..2022-03-02`` or ``..2022-02-28T22:00:00.000Z``For more details, see `JSON API Filtering &lt;http://jsonapi.org/format/#fetching-filtering&gt;`_.</summary>
            [QueryParameter("filter%5BupdatedAt%5D")]
            public DateTimeOffset? FilterupdatedAt { get; set; }
            /// <summary>Filter issues by the unique identifier of the user who updated the issue. Separate multiple values with commas. For Example: ``A3RGM375QTZ7``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BupdatedBy%5D")]
            public string[]? FilterupdatedBy { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BupdatedBy%5D")]
            public string[] FilterupdatedBy { get; set; }
#endif
            /// <summary>Only return valid issues (=no empty type/subtype). Default value: ``undefined`` (meaning will return both valid &amp; invalid issues).</summary>
            [QueryParameter("filter%5Bvalid%5D")]
            public bool? Filtervalid { get; set; }
            /// <summary>JSON-encoded string: array of viewable criteria filters. Each viewable criteria is an object of type {viewableId, guid, name}. Must be provided only with linkedDocumentUrn filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bviewable%5D")]
            public string? Filterviewable { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bviewable%5D")]
            public string Filterviewable { get; set; }
#endif
            /// <summary>Return specified number of issues. Acceptable values are 1-100. Default value: ``100``.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Return issues starting from the specified offset number. Default value: ``0``.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>Sort issues by specified fields. Separate multiple values with commas. To sort in descending order add a ``-`` (minus sign) before the sort criteria. Possible values: ``displayId``, ``title``, ``description``, ``status``, ``assignedTo``, ``assignedToType``, ``dueDate``, ``locationDetails``, ``published``, ``closedBy``, ``closedAt``, ``createdBy``, ``createdAt``, ``updatedAt``, ``issueSubType``, ``issueType``, ``customAttributes``, ``startDate``, ``rootCause``. For example: ``sortBy=status,-displayId,-dueDate,customAttributes[5c07cbe2-256a-48f1-b35b-2e5e00914104]``.</summary>
            [Obsolete("This property is deprecated, use SortByAsGetSortByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string[]? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string[] SortBy { get; set; }
#endif
            /// <summary>Sort issues by specified fields. Separate multiple values with commas. To sort in descending order add a ``-`` (minus sign) before the sort criteria. Possible values: ``displayId``, ``title``, ``description``, ``status``, ``assignedTo``, ``assignedToType``, ``dueDate``, ``locationDetails``, ``published``, ``closedBy``, ``closedAt``, ``createdBy``, ``createdAt``, ``updatedAt``, ``issueSubType``, ``issueType``, ``customAttributes``, ``startDate``, ``rootCause``. For example: ``sortBy=status,-displayId,-dueDate,customAttributes[5c07cbe2-256a-48f1-b35b-2e5e00914104]``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.GetSortByQueryParameterType[]? SortByAsGetSortByQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public global::Autodesk.ACC.Issues.Projects.Item.Issues.GetSortByQueryParameterType[] SortByAsGetSortByQueryParameterType { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssuesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ACC.Issues.Projects.Item.Issues.IssuesRequestBuilder.IssuesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssuesRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ModelDerivative.Designdata.Item.Manifest.Item.Signedcookies {
    public class SignedcookiesGetResponse : IParsable 
    {
        /// <summary>The content type of the derivative/file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>The calculated ETag hash of the derivative/file, if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Etag { get; set; }
#nullable restore
#else
        public string Etag { get; set; }
#endif
        /// <summary>The 13-digit epoch time stamp indicating when the signed cookies expire.</summary>
        public double? Expiration { get; set; }
        /// <summary>The size of the derivative/file, in bytes.</summary>
        public double? Size { get; set; }
        /// <summary>The download URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SignedcookiesGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SignedcookiesGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SignedcookiesGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"content-type", n => { ContentType = n.GetStringValue(); } },
                {"etag", n => { Etag = n.GetStringValue(); } },
                {"expiration", n => { Expiration = n.GetDoubleValue(); } },
                {"size", n => { Size = n.GetDoubleValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("content-type", ContentType);
            writer.WriteStringValue("etag", Etag);
            writer.WriteDoubleValue("expiration", Expiration);
            writer.WriteDoubleValue("size", Size);
            writer.WriteStringValue("url", Url);
        }
    }
}

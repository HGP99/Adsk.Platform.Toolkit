// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ModelDerivative.Designdata.Item.Manifest.Item;
using Autodesk.ModelDerivative.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ModelDerivative.Designdata.Item.Manifest
{
    /// <summary>
    /// Builds and executes requests for operations under \designdata\{urn}\manifest
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ManifestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.ModelDerivative.designdata.item.manifest.item collection</summary>
        /// <param name="position">The URL-encoded URN of the derivatives. The URN is retrieved from the GET {urn}/manifest endpoint.</param>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.Item.WithDerivativeUrnItemRequestBuilder"/></returns>
        public global::Autodesk.ModelDerivative.Designdata.Item.Manifest.Item.WithDerivativeUrnItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("derivativeUrn", position);
                return new global::Autodesk.ModelDerivative.Designdata.Item.Manifest.Item.WithDerivativeUrnItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ManifestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/manifest", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ManifestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/manifest", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the manifest and all its translated output files (derivatives). However, it does not delete the design source file.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestDeleteResponse?> DeleteAsManifestDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestDeleteResponse> DeleteAsManifestDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ModelDerivative.Models.Manifest400Error.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ModelDerivative.Models.Manifest401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ModelDerivative.Models.Manifest403Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ModelDerivative.Models.Manifest404Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ModelDerivative.Models.Manifest500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestDeleteResponse>(requestInfo, global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the manifest and all its translated output files (derivatives). However, it does not delete the design source file.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest500Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsManifestDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestResponse?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestResponse> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ModelDerivative.Models.Manifest400Error.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ModelDerivative.Models.Manifest401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ModelDerivative.Models.Manifest403Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ModelDerivative.Models.Manifest404Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ModelDerivative.Models.Manifest500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestResponse>(requestInfo, global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the manifest for the source design specified by the urn URI parameter. The manifest is a list containing information about the derivatives generated while translating a source file. The manifest contains information such as the URNs of the derivatives, the translation status of each derivative, and much more.The URNs of the derivatives are used to download the generated derivatives by calling the GET /{urn}/manifest/{derivativeurn} endpoint.Note: You cannot download 3D SVF2 derivatives.The statuses are used to check whether the translation of the requested output files is complete. The output files produced by a translation job may complete at different times. Therefore, each output file can have a different status.The first time you translate a source design, the Model Derivative service creates a manifest for that source design. Thereafter, every time you translate that source design, the Model Derivative service updates that manifest. It does not create a new manifest each time you initiate a translation job, even if you are translating to a different format.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Models.Manifest"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.Manifest500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ModelDerivative.Models.Manifest?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ModelDerivative.Models.Manifest> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ModelDerivative.Models.Manifest400Error.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ModelDerivative.Models.Manifest401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ModelDerivative.Models.Manifest403Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ModelDerivative.Models.Manifest404Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ModelDerivative.Models.Manifest500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ModelDerivative.Models.Manifest>(requestInfo, global::Autodesk.ModelDerivative.Models.Manifest.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the manifest and all its translated output files (derivatives). However, it does not delete the design source file.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieves the manifest for the source design specified by the urn URI parameter. The manifest is a list containing information about the derivatives generated while translating a source file. The manifest contains information such as the URNs of the derivatives, the translation status of each derivative, and much more.The URNs of the derivatives are used to download the generated derivatives by calling the GET /{urn}/manifest/{derivativeurn} endpoint.Note: You cannot download 3D SVF2 derivatives.The statuses are used to check whether the translation of the requested output files is complete. The output files produced by a translation job may complete at different times. Therefore, each output file can have a different status.The first time you translate a source design, the Model Derivative service creates a manifest for that source design. Thereafter, every time you translate that source design, the Model Derivative service updates that manifest. It does not create a new manifest each time you initiate a translation job, even if you are translating to a different format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ModelDerivative.Designdata.Item.Manifest.ManifestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ManifestRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ManifestRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

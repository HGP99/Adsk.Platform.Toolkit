// <auto-generated/>
using Autodesk.ModelDerivative.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties
{
    /// <summary>
    /// Builds and executes requests for operations under \designdata\{urn}\metadata\{modelGuid}\properties
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class PropertiesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PropertiesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/metadata/{modelGuid}/properties{?forceget*,objectid*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PropertiesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/metadata/{modelGuid}/properties{?forceget*,objectid*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of properties of objects contained in the model view specified by the modelGuid URI parameter. This request returns all properties for all objects by default. However, you can use the objectid query string parameter to return all properties of a specified object.Properties are returned as a flat list ordered, by their objectid. The objectid is a non-persistent ID assigned to an object when a design file is translated to the SVF or SVF2 format. This means that:A design file must be translated to SVF or SVF2 before you can retrieve properties.The objectid of an object can change if the design is translated to SVF or SVF2 again. If you require a persistent ID to reference an object, use `externalId`.**Note**: Before you call this endpoint:Use the `GET {urn}/metadata` endpoint.Obtain the ID of the model view (Viewable) you want to check.Use the ID you obtained as the `modelGuid` URI parameter.**Note**: `POST {urn}/metadata/{modelGuid}/properties:query` provides greater flexibility to retrieve only the properties you are interested in. What’s more the response is paginated. So, when the number of properties returned is large, it can getz you the results faster.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Models.AllProperties"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties406Error">When receiving a 406 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties409Error">When receiving a 409 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties413Error">When receiving a 413 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.AllProperties500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ModelDerivative.Models.AllProperties?> GetAsync(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder.PropertiesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ModelDerivative.Models.AllProperties> GetAsync(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder.PropertiesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ModelDerivative.Models.AllProperties400Error.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ModelDerivative.Models.AllProperties401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ModelDerivative.Models.AllProperties403Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ModelDerivative.Models.AllProperties404Error.CreateFromDiscriminatorValue },
                { "406", global::Autodesk.ModelDerivative.Models.AllProperties406Error.CreateFromDiscriminatorValue },
                { "409", global::Autodesk.ModelDerivative.Models.AllProperties409Error.CreateFromDiscriminatorValue },
                { "413", global::Autodesk.ModelDerivative.Models.AllProperties413Error.CreateFromDiscriminatorValue },
                { "429", global::Autodesk.ModelDerivative.Models.AllProperties429Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ModelDerivative.Models.AllProperties500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ModelDerivative.Models.AllProperties>(requestInfo, global::Autodesk.ModelDerivative.Models.AllProperties.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of properties of objects contained in the model view specified by the modelGuid URI parameter. This request returns all properties for all objects by default. However, you can use the objectid query string parameter to return all properties of a specified object.Properties are returned as a flat list ordered, by their objectid. The objectid is a non-persistent ID assigned to an object when a design file is translated to the SVF or SVF2 format. This means that:A design file must be translated to SVF or SVF2 before you can retrieve properties.The objectid of an object can change if the design is translated to SVF or SVF2 again. If you require a persistent ID to reference an object, use `externalId`.**Note**: Before you call this endpoint:Use the `GET {urn}/metadata` endpoint.Obtain the ID of the model view (Viewable) you want to check.Use the ID you obtained as the `modelGuid` URI parameter.**Note**: `POST {urn}/metadata/{modelGuid}/properties:query` provides greater flexibility to retrieve only the properties you are interested in. What’s more the response is paginated. So, when the number of properties returned is large, it can getz you the results faster.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder.PropertiesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder.PropertiesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of properties of objects contained in the model view specified by the modelGuid URI parameter. This request returns all properties for all objects by default. However, you can use the objectid query string parameter to return all properties of a specified object.Properties are returned as a flat list ordered, by their objectid. The objectid is a non-persistent ID assigned to an object when a design file is translated to the SVF or SVF2 format. This means that:A design file must be translated to SVF or SVF2 before you can retrieve properties.The objectid of an object can change if the design is translated to SVF or SVF2 again. If you require a persistent ID to reference an object, use `externalId`.**Note**: Before you call this endpoint:Use the `GET {urn}/metadata` endpoint.Obtain the ID of the model view (Viewable) you want to check.Use the ID you obtained as the `modelGuid` URI parameter.**Note**: `POST {urn}/metadata/{modelGuid}/properties:query` provides greater flexibility to retrieve only the properties you are interested in. What’s more the response is paginated. So, when the number of properties returned is large, it can getz you the results faster.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class PropertiesRequestBuilderGetQueryParameters 
        {
            /// <summary>true: Forcibly gets large resources even if they exceed the expected maximum size (20 MB). If the resource is larger than 800 MB, the server behaves as though forceget is false. In such a case, use the objectid query string parameter to download resources by Object ID one object at a time. Alternatively, you can use POST {urn}/metadata/{modelGuid}/properties:query to fetch only the properties you are interested in. false: (Default) Does not get resources if they exceed the expected maximum size (20 MB).</summary>
            [QueryParameter("forceget")]
            public bool? Forceget { get; set; }
            /// <summary>he Object ID of the object you want to query properties for.  If objectid is omitted, the server returns properties for all objects.</summary>
            [QueryParameter("objectid")]
            public int? Objectid { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class PropertiesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.Properties.PropertiesRequestBuilder.PropertiesRequestBuilderGetQueryParameters>
        {
        }
    }
}

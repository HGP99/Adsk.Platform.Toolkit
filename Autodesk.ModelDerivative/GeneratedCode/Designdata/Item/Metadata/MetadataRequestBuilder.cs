// <auto-generated/>
using Autodesk.ModelDerivative.Designdata.Item.Metadata.Item;
using Autodesk.ModelDerivative.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ModelDerivative.Designdata.Item.Metadata
{
    /// <summary>
    /// Builds and executes requests for operations under \designdata\{urn}\metadata
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class MetadataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Autodesk.ModelDerivative.designdata.item.metadata.item collection</summary>
        /// <param name="position">Unique model view ID. Call GET {urn}/metadata to get the ID</param>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.WithModelGuItemRequestBuilder"/></returns>
        public global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.WithModelGuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("modelGuid", position);
                return new global::Autodesk.ModelDerivative.Designdata.Item.Metadata.Item.WithModelGuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MetadataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/metadata{?urn*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MetadataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/designdata/{urn}/metadata{?urn*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of model views (Viewables) in the source design specified by the `urn` URI parameter. It also returns the ID that uniquely identifies the model view. You can use this ID with other metadata endpoints to obtain information about the objects within model view.Most design applications like Fusion 360 and Inventor contain only one model view per design. However, some applications like Revit allow multiple model views (e.g., HVAC, architecture, perspective) per design.**Note:** You can retrieve metadata only from an input file that has been translated to SVF or SVF2.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Models.ModelViews"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.ModelViews400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.ModelViews401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.ModelViews403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.ModelViews404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Autodesk.ModelDerivative.Models.ModelViews500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ModelDerivative.Models.ModelViews?> GetAsync(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder.MetadataRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ModelDerivative.Models.ModelViews> GetAsync(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder.MetadataRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Autodesk.ModelDerivative.Models.ModelViews400Error.CreateFromDiscriminatorValue },
                { "401", global::Autodesk.ModelDerivative.Models.ModelViews401Error.CreateFromDiscriminatorValue },
                { "403", global::Autodesk.ModelDerivative.Models.ModelViews403Error.CreateFromDiscriminatorValue },
                { "404", global::Autodesk.ModelDerivative.Models.ModelViews404Error.CreateFromDiscriminatorValue },
                { "500", global::Autodesk.ModelDerivative.Models.ModelViews500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Autodesk.ModelDerivative.Models.ModelViews>(requestInfo, global::Autodesk.ModelDerivative.Models.ModelViews.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of model views (Viewables) in the source design specified by the `urn` URI parameter. It also returns the ID that uniquely identifies the model view. You can use this ID with other metadata endpoints to obtain information about the objects within model view.Most design applications like Fusion 360 and Inventor contain only one model view per design. However, some applications like Revit allow multiple model views (e.g., HVAC, architecture, perspective) per design.**Note:** You can retrieve metadata only from an input file that has been translated to SVF or SVF2.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder.MetadataRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder.MetadataRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of model views (Viewables) in the source design specified by the `urn` URI parameter. It also returns the ID that uniquely identifies the model view. You can use this ID with other metadata endpoints to obtain information about the objects within model view.Most design applications like Fusion 360 and Inventor contain only one model view per design. However, some applications like Revit allow multiple model views (e.g., HVAC, architecture, perspective) per design.**Note:** You can retrieve metadata only from an input file that has been translated to SVF or SVF2.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class MetadataRequestBuilderGetQueryParameters 
        {
            /// <summary>The Base64 (URL Safe) encoded design URN</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("urn")]
            public string? Urn { get; set; }
#nullable restore
#else
            [QueryParameter("urn")]
            public string Urn { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class MetadataRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ModelDerivative.Designdata.Item.Metadata.MetadataRequestBuilder.MetadataRequestBuilderGetQueryParameters>
        {
        }
    }
}

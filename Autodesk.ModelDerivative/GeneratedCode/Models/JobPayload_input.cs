// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ModelDerivative.Models
{
    /// <summary>
    /// Group of inputs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class JobPayload_input : IParsable
    {
        /// <summary>- true - Instructs the server to check for references and download all referenced files. If the design consists of multiple files (as with Autodesk Inventor assemblies) the translation fails if this attribute is not set to true.- false - (Default) Does not check for any references.</summary>
        public bool? CheckReferences { get; set; }
        /// <summary>Set this to `true` if the source file is compressed. If set to `true`, you need to define the `rootFilename`.</summary>
        public bool? CompressedUrn { get; set; }
        /// <summary>The root filename of the compressed file. Mandatory if the `compressedUrn` is set to `true`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootFilename { get; set; }
#nullable restore
#else
        public string RootFilename { get; set; }
#endif
        /// <summary>The design URN; returned when uploading the file to Forge The URN needs to be [Base64 (URL Safe) encoded](https://developer.autodesk.com/en/docs/model-derivative/v2/reference/http/job-POST/#id3).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Urn { get; set; }
#nullable restore
#else
        public string Urn { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ModelDerivative.Models.JobPayload_input"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ModelDerivative.Models.JobPayload_input CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ModelDerivative.Models.JobPayload_input();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "checkReferences", n => { CheckReferences = n.GetBoolValue(); } },
                { "compressedUrn", n => { CompressedUrn = n.GetBoolValue(); } },
                { "rootFilename", n => { RootFilename = n.GetStringValue(); } },
                { "urn", n => { Urn = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("checkReferences", CheckReferences);
            writer.WriteBoolValue("compressedUrn", CompressedUrn);
            writer.WriteStringValue("rootFilename", RootFilename);
            writer.WriteStringValue("urn", Urn);
        }
    }
}

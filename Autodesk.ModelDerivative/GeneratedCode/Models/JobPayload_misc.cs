// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ModelDerivative.Models {
    public class JobPayload_misc : IParsable 
    {
        /// <summary>The workflow id created for a webhook, used to listen to Model Derivative events. It needs to be no more than 36 chars, and only ASCII, decimal and hyphen are accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Workflow { get; set; }
#nullable restore
#else
        public string Workflow { get; set; }
#endif
        /// <summary>A user-defined JSON object, which you can use to set some custom workflow information. It needs to be less than 1KB and will be ignored if misc.workflow parameter is not set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobPayload_misc_workflowAttribute? WorkflowAttribute { get; set; }
#nullable restore
#else
        public JobPayload_misc_workflowAttribute WorkflowAttribute { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="JobPayload_misc"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobPayload_misc CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobPayload_misc();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"workflow", n => { Workflow = n.GetStringValue(); } },
                {"workflowAttribute", n => { WorkflowAttribute = n.GetObjectValue<JobPayload_misc_workflowAttribute>(JobPayload_misc_workflowAttribute.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("workflow", Workflow);
            writer.WriteObjectValue<JobPayload_misc_workflowAttribute>("workflowAttribute", WorkflowAttribute);
        }
    }
}

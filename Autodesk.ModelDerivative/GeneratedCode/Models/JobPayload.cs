// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ModelDerivative.Models {
    public class JobPayload : IParsable 
    {
        /// <summary>Group of inputs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobPayload_input? Input { get; set; }
#nullable restore
#else
        public JobPayload_input Input { get; set; }
#endif
        /// <summary>The misc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobPayload_misc? Misc { get; set; }
#nullable restore
#else
        public JobPayload_misc Misc { get; set; }
#endif
        /// <summary>Group of outputs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobPayload_output? Output { get; set; }
#nullable restore
#else
        public JobPayload_output Output { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="JobPayload"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobPayload CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobPayload();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"input", n => { Input = n.GetObjectValue<JobPayload_input>(JobPayload_input.CreateFromDiscriminatorValue); } },
                {"misc", n => { Misc = n.GetObjectValue<JobPayload_misc>(JobPayload_misc.CreateFromDiscriminatorValue); } },
                {"output", n => { Output = n.GetObjectValue<JobPayload_output>(JobPayload_output.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JobPayload_input>("input", Input);
            writer.WriteObjectValue<JobPayload_misc>("misc", Misc);
            writer.WriteObjectValue<JobPayload_output>("output", Output);
        }
    }
}

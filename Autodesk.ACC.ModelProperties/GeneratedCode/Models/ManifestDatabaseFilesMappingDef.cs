// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.ModelProperties.Models
{
    /// <summary>
    /// manifest database files mapping
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ManifestDatabaseFilesMappingDef : IParsable
    {
        /// <summary>OSS path for the attributes file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Attributes { get; set; }
#nullable restore
#else
        public string Attributes { get; set; }
#endif
        /// <summary>DB ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>OSS path for the IDs file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ids { get; set; }
#nullable restore
#else
        public string Ids { get; set; }
#endif
        /// <summary>OSS path for the mapping file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mapping { get; set; }
#nullable restore
#else
        public string Mapping { get; set; }
#endif
        /// <summary>OSS path for the offsets file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Offsets { get; set; }
#nullable restore
#else
        public string Offsets { get; set; }
#endif
        /// <summary>OSS path for the values file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Values { get; set; }
#nullable restore
#else
        public string Values { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.ModelProperties.Models.ManifestDatabaseFilesMappingDef"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.ModelProperties.Models.ManifestDatabaseFilesMappingDef CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.ModelProperties.Models.ManifestDatabaseFilesMappingDef();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attributes", n => { Attributes = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "ids", n => { Ids = n.GetStringValue(); } },
                { "mapping", n => { Mapping = n.GetStringValue(); } },
                { "offsets", n => { Offsets = n.GetStringValue(); } },
                { "values", n => { Values = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("attributes", Attributes);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("ids", Ids);
            writer.WriteStringValue("mapping", Mapping);
            writer.WriteStringValue("offsets", Offsets);
            writer.WriteStringValue("values", Values);
        }
    }
}
#pragma warning restore CS0618

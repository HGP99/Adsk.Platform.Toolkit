// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.ModelProperties.Models {
    /// <summary>
    /// index manifest
    /// </summary>
    public class IndexManifestDef : IParsable 
    {
        /// <summary>creation timestamp</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>errors</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ResourceError>? Errors { get; set; }
#nullable restore
#else
        public List<ResourceError> Errors { get; set; }
#endif
        /// <summary>project ID</summary>
        public Guid? ProjectId { get; set; }
        /// <summary>current schema version</summary>
        public IndexManifestDef_schema? Schema { get; set; }
        /// <summary>seed files</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ManifestSeedFileDef>? SeedFiles { get; set; }
#nullable restore
#else
        public List<ManifestSeedFileDef> SeedFiles { get; set; }
#endif
        /// <summary>manifest status</summary>
        public ManifestStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="IndexManifestDef"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IndexManifestDef CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IndexManifestDef();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"errors", n => { Errors = n.GetCollectionOfObjectValues<ResourceError>(ResourceError.CreateFromDiscriminatorValue)?.ToList(); } },
                {"projectId", n => { ProjectId = n.GetGuidValue(); } },
                {"schema", n => { Schema = n.GetEnumValue<IndexManifestDef_schema>(); } },
                {"seedFiles", n => { SeedFiles = n.GetCollectionOfObjectValues<ManifestSeedFileDef>(ManifestSeedFileDef.CreateFromDiscriminatorValue)?.ToList(); } },
                {"status", n => { Status = n.GetEnumValue<ManifestStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteCollectionOfObjectValues<ResourceError>("errors", Errors);
            writer.WriteGuidValue("projectId", ProjectId);
            writer.WriteEnumValue<IndexManifestDef_schema>("schema", Schema);
            writer.WriteCollectionOfObjectValues<ManifestSeedFileDef>("seedFiles", SeedFiles);
            writer.WriteEnumValue<ManifestStatus>("status", Status);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.ModelProperties.Models {
    /// <summary>
    /// Specifies an optional query for the diff.
    /// </summary>
    public class DiffQueryRequest : IParsable 
    {
        /// <summary>SQL AST for describing columns/projections</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SqlColumnsExpression? Columns { get; set; }
#nullable restore
#else
        public SqlColumnsExpression Columns { get; set; }
#endif
        /// <summary>Parameters to control content within the Index</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IndexContents? Contents { get; set; }
#nullable restore
#else
        public IndexContents Contents { get; set; }
#endif
        /// <summary>SQL AST for binary expression/filter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SqlBinaryExpression? Query { get; set; }
#nullable restore
#else
        public SqlBinaryExpression Query { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DiffQueryRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DiffQueryRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DiffQueryRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"columns", n => { Columns = n.GetObjectValue<SqlColumnsExpression>(SqlColumnsExpression.CreateFromDiscriminatorValue); } },
                {"contents", n => { Contents = n.GetObjectValue<IndexContents>(IndexContents.CreateFromDiscriminatorValue); } },
                {"query", n => { Query = n.GetObjectValue<SqlBinaryExpression>(SqlBinaryExpression.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SqlColumnsExpression>("columns", Columns);
            writer.WriteObjectValue<IndexContents>("contents", Contents);
            writer.WriteObjectValue<SqlBinaryExpression>("query", Query);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.ModelProperties.Models
{
    /// <summary>
    /// manifest views
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ManifestViewDef : IParsable
    {
        /// <summary>view ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>is this a 3D view?</summary>
        public bool? Is3d { get; set; }
        /// <summary>is this a revit phase?</summary>
        public bool? IsRevitPhase { get; set; }
        /// <summary>file version URN</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Urn { get; set; }
#nullable restore
#else
        public string Urn { get; set; }
#endif
        /// <summary>viewable GUID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewableGuid { get; set; }
#nullable restore
#else
        public string ViewableGuid { get; set; }
#endif
        /// <summary>viewable ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewableId { get; set; }
#nullable restore
#else
        public string ViewableId { get; set; }
#endif
        /// <summary>viewable name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewableName { get; set; }
#nullable restore
#else
        public string ViewableName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.ModelProperties.Models.ManifestViewDef"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.ModelProperties.Models.ManifestViewDef CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.ModelProperties.Models.ManifestViewDef();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "is3d", n => { Is3d = n.GetBoolValue(); } },
                { "isRevitPhase", n => { IsRevitPhase = n.GetBoolValue(); } },
                { "urn", n => { Urn = n.GetStringValue(); } },
                { "viewableGuid", n => { ViewableGuid = n.GetStringValue(); } },
                { "viewableId", n => { ViewableId = n.GetStringValue(); } },
                { "viewableName", n => { ViewableName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is3d", Is3d);
            writer.WriteBoolValue("isRevitPhase", IsRevitPhase);
            writer.WriteStringValue("urn", Urn);
            writer.WriteStringValue("viewableGuid", ViewableGuid);
            writer.WriteStringValue("viewableId", ViewableId);
            writer.WriteStringValue("viewableName", ViewableName);
        }
    }
}

// <auto-generated/>
using Autodesk.ACC.ModelProperties.Models;
using Autodesk.ACC.ModelProperties.V2.Projects.Item.Indexes.Item.Queries.Item.Properties;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.ModelProperties.V2.Projects.Item.Indexes.Item.Queries.Item {
    /// <summary>
    /// Builds and executes requests for operations under \v2\projects\{projectId}\indexes\{indexId}\queries\{queryId}
    /// </summary>
    public class WithQueryItemRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The properties property</summary>
        public PropertiesRequestBuilder Properties
        {
            get => new PropertiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="WithQueryItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithQueryItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/projects/{projectId}/indexes/{indexId}/queries/{queryId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithQueryItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithQueryItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/projects/{projectId}/indexes/{indexId}/queries/{queryId}", rawUrl)
        {
        }
        /// <summary>
        /// Depending on the state different properties might be present or missing.E.g., if the indexing job is not finished yet, the results link might be missing,but the retryAt property will be present. Or if the processing failed for some reason,the errors property will contain some information.Once the final result of the indexing job has been determined (either finished or failed),the status is assumed to be immutable and the response will set a long expiration HTTP headerfor efficient client side caching.
        /// </summary>
        /// <returns>A <see cref="IndexJobStatus"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ResourceError">When receiving a 401 status code</exception>
        /// <exception cref="ResourceError">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<IndexJobStatus?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<IndexJobStatus> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", ResourceError.CreateFromDiscriminatorValue},
                {"404", ResourceError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<IndexJobStatus>(requestInfo, IndexJobStatus.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Depending on the state different properties might be present or missing.E.g., if the indexing job is not finished yet, the results link might be missing,but the retryAt property will be present. Or if the processing failed for some reason,the errors property will contain some information.Once the final result of the indexing job has been determined (either finished or failed),the status is assumed to be immutable and the response will set a long expiration HTTP headerfor efficient client side caching.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithQueryItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithQueryItemRequestBuilder WithUrl(string rawUrl)
        {
            return new WithQueryItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithQueryItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}

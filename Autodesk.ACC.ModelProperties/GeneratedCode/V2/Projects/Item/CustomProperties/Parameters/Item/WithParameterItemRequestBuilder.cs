// <auto-generated/>
using Autodesk.ACC.ModelProperties.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.ModelProperties.V2.Projects.Item.CustomProperties.Parameters.Item {
    /// <summary>
    /// Builds and executes requests for operations under \v2\projects\{projectId}\custom-properties\parameters\{parameterId}
    /// </summary>
    public class WithParameterItemRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="WithParameterItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithParameterItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/projects/{projectId}/custom-properties/parameters/{parameterId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithParameterItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithParameterItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/projects/{projectId}/custom-properties/parameters/{parameterId}", rawUrl)
        {
        }
        /// <summary>
        /// The specified Parameter from the Parameter Service will no longer be available as a Custom Property on the project.The underlying data storage for the Custom Property is not deleted during this call, but could bedeleted at a later time, for example the next time a Lineage&apos;s Index is re-generated. Once theunderlying data is deleted there is no way to restore it.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ResourceError">When receiving a 401 status code</exception>
        /// <exception cref="ResourceError">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", ResourceError.CreateFromDiscriminatorValue},
                {"404", ResourceError.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Read the given single Parameter that has been importad into the project as a Custom Property.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ResourceError">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"404", ResourceError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Import a Parameter into a Project as a Custom Property. All lineages in the Project will havethe imported Custom Property.## Assigning Properties to Design ElementsCustom Properties can only be assigned/scoped to individual Design Elements by Revit Category.The Revit Categories for a Custom Property&apos;s corresponding Parameter can be configured in theParameter Service as the &quot;category binding&quot;.## Links- [Custom Properties and Parameter Service](https://wiki.autodesk.com/display/ACSB4C/Custom+Properties+and+Parameter+Library)- [Parameter Service](https://wiki.autodesk.com/display/ACSB4C/Parameter+Service)- [Parameter Service API](https://aps.autodesk.com/en/docs/parameters/v1/overview/introduction/)- [Forge Data Schema](https://wiki.autodesk.com/display/GES/Forge+Data+Schema)- [Forge Data Schema Specification - V2](https://wiki.autodesk.com/display/GES/Forge+Data+Schema+Specification+-+V2)## Open Questions- For AIM, do Parameters need to be in Parameter Svc, or Forge Data Schema, or both?- Can Forge Data Schema parameters be edited? Or does it require a new version?- How do we store &quot;display units&quot; for Custom Properties?- Does AIM store Parameters (properties) in &quot;storage units&quot;?- Permission model: who is allowed to add a new CP to a project? only a project admin? Param Svc currently  allows only account admins to create new Params, but Custom Props requires more open permissions. This is  a recognized gap that is being worked out between Model Quality Group and PSET PMs.- Parameter Service is currently in beta, when is it supposed to be released?It could be useful for invalidating an index to query the Param Svc for the &quot;last modified&quot; time on acollection, which is the last time the collection itself or any of its individual params was modified.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ResourceError">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PutAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PutAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPutRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"404", ResourceError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The specified Parameter from the Parameter Service will no longer be available as a Custom Property on the project.The underlying data storage for the Custom Property is not deleted during this call, but could bedeleted at a later time, for example the next time a Lineage&apos;s Index is re-generated. Once theunderlying data is deleted there is no way to restore it.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Read the given single Parameter that has been importad into the project as a Custom Property.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Import a Parameter into a Project as a Custom Property. All lineages in the Project will havethe imported Custom Property.## Assigning Properties to Design ElementsCustom Properties can only be assigned/scoped to individual Design Elements by Revit Category.The Revit Categories for a Custom Property&apos;s corresponding Parameter can be configured in theParameter Service as the &quot;category binding&quot;.## Links- [Custom Properties and Parameter Service](https://wiki.autodesk.com/display/ACSB4C/Custom+Properties+and+Parameter+Library)- [Parameter Service](https://wiki.autodesk.com/display/ACSB4C/Parameter+Service)- [Parameter Service API](https://aps.autodesk.com/en/docs/parameters/v1/overview/introduction/)- [Forge Data Schema](https://wiki.autodesk.com/display/GES/Forge+Data+Schema)- [Forge Data Schema Specification - V2](https://wiki.autodesk.com/display/GES/Forge+Data+Schema+Specification+-+V2)## Open Questions- For AIM, do Parameters need to be in Parameter Svc, or Forge Data Schema, or both?- Can Forge Data Schema parameters be edited? Or does it require a new version?- How do we store &quot;display units&quot; for Custom Properties?- Does AIM store Parameters (properties) in &quot;storage units&quot;?- Permission model: who is allowed to add a new CP to a project? only a project admin? Param Svc currently  allows only account admins to create new Params, but Custom Props requires more open permissions. This is  a recognized gap that is being worked out between Model Quality Group and PSET PMs.- Parameter Service is currently in beta, when is it supposed to be released?It could be useful for invalidating an index to query the Param Svc for the &quot;last modified&quot; time on acollection, which is the last time the collection itself or any of its individual params was modified.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithParameterItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithParameterItemRequestBuilder WithUrl(string rawUrl)
        {
            return new WithParameterItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithParameterItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithParameterItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithParameterItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.Authentication.Authentication.V2.Authorize
{
    /// <summary>
    /// Builds and executes requests for operations under \authentication\v2\authorize
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AuthorizeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/authentication/v2/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&state={state}{&authoptions*,code_challenge*,code_challenge_method*,nonce*,prompt*,response_mode*,scope*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/authentication/v2/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&state={state}{&authoptions*,code_challenge*,code_challenge_method*,nonce*,prompt*,response_mode*,scope*}", rawUrl)
        {
        }
        /// <summary>
        /// To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details &lt;Link&gt;
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task GetAsync(Action<RequestConfiguration<global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder.AuthorizeRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task GetAsync(Action<RequestConfiguration<global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder.AuthorizeRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details &lt;Link&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder.AuthorizeRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder.AuthorizeRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// To obtain an authorization code grant or id_token grant.We rate limit this endpoint. When rate limit reached, then Apigee will throw HTTP 429 Too Many Requests error. See Forge docs on the rate limit: [Forge rate limit](https://forge.autodesk.com/en/docs/oauth/v2/developers_guide/rate-limiting/forge-rate-limits/)Errors came from OKTA/PF directly.Please refer forge v2 api document for more details &lt;Link&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeRequestBuilderGetQueryParameters 
        {
            /// <summary>A Json object carries information to Identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("authoptions")]
            public string? Authoptions { get; set; }
#nullable restore
#else
            [QueryParameter("authoptions")]
            public string Authoptions { get; set; }
#endif
            /// <summary>Client ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("client_id")]
            public string? ClientId { get; set; }
#nullable restore
#else
            [QueryParameter("client_id")]
            public string ClientId { get; set; }
#endif
            /// <summary>A challenge for PKCE. The challenge is verified in the access token request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("code_challenge")]
            public string? CodeChallenge { get; set; }
#nullable restore
#else
            [QueryParameter("code_challenge")]
            public string CodeChallenge { get; set; }
#endif
            /// <summary>Method used to derive the code challenge for PKCE. Must be S256 if `code_challenge` is present.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("code_challenge_method")]
            public string? CodeChallengeMethod { get; set; }
#nullable restore
#else
            [QueryParameter("code_challenge_method")]
            public string CodeChallengeMethod { get; set; }
#endif
            /// <summary>A string value used to associate a Client session with an ID Token, and to mitigate replay attacks. Required if `response_type` is `id_token` or `token`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("nonce")]
            public string? Nonce { get; set; }
#nullable restore
#else
            [QueryParameter("nonce")]
            public string Nonce { get; set; }
#endif
            /// <summary>Values supported: `login` and `none`.`login`: Always prompt the user for authentication, regardless of the login session.`prompt`: Do not prompt user for authentication. If user is not logged in, the calling application receives an error.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("prompt")]
            public string? Prompt { get; set; }
#nullable restore
#else
            [QueryParameter("prompt")]
            public string Prompt { get; set; }
#endif
            /// <summary>URL-encoded callback URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("redirect_uri")]
            public string? RedirectUri { get; set; }
#nullable restore
#else
            [QueryParameter("redirect_uri")]
            public string RedirectUri { get; set; }
#endif
            /// <summary>The mode of response for the supplied `response_type`. Supported values are `fragment`, `form_post` or `query`. `query` is not supported if the `response_type` is `token`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("response_mode")]
            public string? ResponseMode { get; set; }
#nullable restore
#else
            [QueryParameter("response_mode")]
            public string ResponseMode { get; set; }
#endif
            /// <summary>Must be `code` for authorization code grant, `id_token` for an OpenID Connect ID token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("response_type")]
            public string? ResponseType { get; set; }
#nullable restore
#else
            [QueryParameter("response_type")]
            public string ResponseType { get; set; }
#endif
            /// <summary>URL-encoded, a space-delimited list of scopes. Supported values:1. device_sso2. All scopes mentioned in [Forge Developers Guide](https://forge.autodesk.com/en/docs/oauth/v3/developers_guide/scopes/)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("scope")]
            public string? Scope { get; set; }
#nullable restore
#else
            [QueryParameter("scope")]
            public string Scope { get; set; }
#endif
            /// <summary>The payload that authorization flow will pass back verbatim in state query parameter to the callback URL. It can contain alphanumeric, comma, period, underscore, and hyphen characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("state")]
            public string? State { get; set; }
#nullable restore
#else
            [QueryParameter("state")]
            public string State { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.Authentication.Authentication.V2.Authorize.AuthorizeRequestBuilder.AuthorizeRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

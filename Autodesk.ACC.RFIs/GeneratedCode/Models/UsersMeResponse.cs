// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.RFIs.Models {
    public class UsersMeResponse : IParsable 
    {
        /// <summary>The ID of the rfi type.</summary>
        public Guid? DefaultRfiType { get; set; }
        /// <summary>The maintenanceEndDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaintenanceEndDate { get; set; }
#nullable restore
#else
        public string MaintenanceEndDate { get; set; }
#endif
        /// <summary>The list of actions that are permitted for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UsersMeResponse_permittedActions? PermittedActions { get; set; }
#nullable restore
#else
        public UsersMeResponse_permittedActions PermittedActions { get; set; }
#endif
        /// <summary>User data object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UsersMeResponse_user? User { get; set; }
#nullable restore
#else
        public UsersMeResponse_user User { get; set; }
#endif
        /// <summary>The RFIs workflow data object for the user</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UsersMeResponse_workflow? Workflow { get; set; }
#nullable restore
#else
        public UsersMeResponse_workflow Workflow { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="UsersMeResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UsersMeResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UsersMeResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"defaultRfiType", n => { DefaultRfiType = n.GetGuidValue(); } },
                {"maintenanceEndDate", n => { MaintenanceEndDate = n.GetStringValue(); } },
                {"permittedActions", n => { PermittedActions = n.GetObjectValue<UsersMeResponse_permittedActions>(UsersMeResponse_permittedActions.CreateFromDiscriminatorValue); } },
                {"user", n => { User = n.GetObjectValue<UsersMeResponse_user>(UsersMeResponse_user.CreateFromDiscriminatorValue); } },
                {"workflow", n => { Workflow = n.GetObjectValue<UsersMeResponse_workflow>(UsersMeResponse_workflow.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("defaultRfiType", DefaultRfiType);
            writer.WriteStringValue("maintenanceEndDate", MaintenanceEndDate);
            writer.WriteObjectValue<UsersMeResponse_permittedActions>("permittedActions", PermittedActions);
            writer.WriteObjectValue<UsersMeResponse_user>("user", User);
            writer.WriteObjectValue<UsersMeResponse_workflow>("workflow", Workflow);
        }
    }
}

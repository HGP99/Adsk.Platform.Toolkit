// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Autodesk.ACC.RFIs.Models {
    public class CreateAttachmentRequestDefinition : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The name of the attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Mobile user last sync token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SyncToken { get; set; }
#nullable restore
#else
        public string SyncToken { get; set; }
#endif
        /// <summary>The ID (item ID) of the document associated with the RFI. For more details, see the `Upload Attachment tutorial` `BIM 360&lt;/en/docs/bim360/v1/reference/tutorials/attach-BIM-360-files-to-rfi/&gt;`_ `ACC&lt;/en/docs/acc/v1/reference/tutorials/attach-BIM-360-files-to-rfi/&gt;`_.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Urn { get; set; }
#nullable restore
#else
        public string Urn { get; set; }
#endif
        /// <summary>The type of attachment. We currently only support adding attachments from BIM 360 Document Management. Possible value: ``dm``.</summary>
        public CreateAttachmentRequestDefinition_urnType? UrnType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="CreateAttachmentRequestDefinition"/> and sets the default values.
        /// </summary>
        public CreateAttachmentRequestDefinition()
        {
            AdditionalData = new Dictionary<string, object>();
            UrnType = CreateAttachmentRequestDefinition_urnType.Oss;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CreateAttachmentRequestDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateAttachmentRequestDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateAttachmentRequestDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"id", n => { Id = n.GetGuidValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"syncToken", n => { SyncToken = n.GetStringValue(); } },
                {"urn", n => { Urn = n.GetStringValue(); } },
                {"urnType", n => { UrnType = n.GetEnumValue<CreateAttachmentRequestDefinition_urnType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("syncToken", SyncToken);
            writer.WriteStringValue("urn", Urn);
            writer.WriteEnumValue<CreateAttachmentRequestDefinition_urnType>("urnType", UrnType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

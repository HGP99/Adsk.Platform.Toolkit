// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.RFIs.Models
{
    /// <summary>
    /// Permitted RFI status
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class PermittedRfiStatus : IParsable
    {
        /// <summary>The maxAssignees property</summary>
        public int? MaxAssignees { get; set; }
        /// <summary>The list of attributes that are permitted when updating/creating an RFI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>? PermittedAttributes { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute> PermittedAttributes { get; set; }
#endif
        /// <summary>The list of attributes that are required when updating/creating an RFI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>? RequiredAttributes { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute> RequiredAttributes { get; set; }
#endif
        /// <summary>The status of the RFI. Note that the possible statuses of the RFI depend on the workflow type assigned to the RFI.For a default workflow with a single reviewer (``US``), you can potentially use the following statuses: ``draft``, ``submitted``, ``open``, ``answered``, ``rejected``, ``closed``, ``void``.For a workflow with an additional reviewer (``EMEA``), you can potentially use the following statuses: ``draft``, ``submitted``, ``openRev1``, ``openRev2``, ``rejectedRev1``, ``rejectedManager``, ``answeredRev1``, ``answeredManager``, ``closed``, ``void``.For more information about different workflows and statuses, see the `RFIs help documentation` `BIM360&lt;https://help.autodesk.com/view/BIM360D/ENU/?guid=GUID-787338BF-1189-4170-8629-7FA240F4BED4&gt;`_ `ACC&lt;https://help.autodesk.com/view/BUILD/ENU/?guid=RFI_Workflow_Setup&gt;`_.To check the workflow type of an RFI, call `GET users/me` `BIM 360&lt;/en/docs/bim360/v1/reference/http/rfis-v2-users-me-GET/&gt;`_ `ACC&lt;/en/docs/acc/v1/reference/http/rfis-v2-users-me-GET/&gt;`_ and check ``workflow.type``.To check which statuses the user can potentially open the RFI with, call `GET rfis/:id` `BIM 360&lt;/en/docs/bim360/v1/reference/http/rfis-v2-rfis-id-GET&gt;`_ `ACC&lt;/en/docs/acc/v1/reference/http/rfis-v2-rfis-id-GET&gt;`_.</summary>
        public global::Autodesk.ACC.RFIs.Models.RfiStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.RFIs.Models.PermittedRfiStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.RFIs.Models.PermittedRfiStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.RFIs.Models.PermittedRfiStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "maxAssignees", n => { MaxAssignees = n.GetIntValue(); } },
                { "permittedAttributes", n => { PermittedAttributes = n.GetCollectionOfObjectValues<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>(global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute.CreateFromDiscriminatorValue)?.AsList(); } },
                { "requiredAttributes", n => { RequiredAttributes = n.GetCollectionOfObjectValues<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>(global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.RFIs.Models.RfiStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("maxAssignees", MaxAssignees);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>("permittedAttributes", PermittedAttributes);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.RFIs.Models.PermittedRfiAttribute>("requiredAttributes", RequiredAttributes);
            writer.WriteEnumValue<global::Autodesk.ACC.RFIs.Models.RfiStatus>("status", Status);
        }
    }
}
